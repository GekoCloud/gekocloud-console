"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

require("intl");

var _react = _interopRequireDefault(require("react"));

var _intlMessageformat = _interopRequireDefault(require("intl-messageformat"));

var _escapeHtml = _interopRequireDefault(require("escape-html"));

var _cookie = _interopRequireDefault(require("cookie"));

var _querystring = _interopRequireDefault(require("querystring"));

var _invariant = _interopRequireDefault(require("invariant"));

require("console-polyfill");

var _constants = _interopRequireDefault(require("./constants"));

var _this = void 0;

var defaultMsg = function defaultMsg(msg) {
  return _this || msg || '';
};

String.prototype.defaultMessage = defaultMsg;
String.prototype.d = defaultMsg;

var Locale = function () {
  function Locale() {
    var _this2 = this;

    (0, _classCallCheck2.default)(this, Locale);
    (0, _defineProperty2.default)(this, "options", {
      currentLocale: null,
      urlLocaleKey: null,
      cookieLocaleKey: null,
      locales: {},
      escapeHtml: true,
      ignoreWarnings: false
    });
    (0, _defineProperty2.default)(this, "getInitOptions", function () {
      return _this2.options;
    });
    (0, _defineProperty2.default)(this, "getLocaleFromCookie", function (options) {
      var cookieLocaleKey = options.cookieLocaleKey;

      if (cookieLocaleKey) {
        var params = _cookie.default.parse(document.cookie);

        return params && params[cookieLocaleKey];
      }

      return null;
    });
    (0, _defineProperty2.default)(this, "getLocaleFromURL", function (options) {
      var urlLocaleKey = options.urlLocaleKey;
      var _window = window,
          location = _window.location;

      if (urlLocaleKey) {
        var query = location.search.split('?');

        if (query.length >= 2) {
          var params = _querystring.default.parse(query[1]);

          return params && params[urlLocaleKey];
        }
      }

      return null;
    });
    (0, _defineProperty2.default)(this, "getDescendantProp", function (locale, key) {
      if (locale[key]) {
        return locale[key];
      }

      var msg = key.split('.').reduce(function (a, b) {
        return a !== undefined ? a[b] : a;
      }, locale);
      return msg;
    });
    (0, _defineProperty2.default)(this, "getLocaleFromBrowser", function () {
      return navigator.language || navigator.userLanguage;
    });
    (0, _defineProperty2.default)(this, "determineLocale", function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _this2.getLocaleFromURL(options) || _this2.getLocaleFromCookie(options) || _this2.getLocaleFromBrowser();
    });
    (0, _defineProperty2.default)(this, "get", function (key, variables) {
      (0, _invariant.default)(key, 'key is required');
      var _this2$options = _this2.options,
          locales = _this2$options.locales,
          currentLocale = _this2$options.currentLocale,
          formats = _this2$options.formats,
          escapeHtml = _this2$options.escapeHtml;

      if (!locales || !locales[currentLocale]) {
        _this2.warningHandler("locales data \"".concat(currentLocale, "\" not exists."));

        return key;
      }

      var msg = _this2.getDescendantProp(locales[currentLocale], key);

      if (msg == null) {
        _this2.warningHandler("key \"".concat(key, "\" not defined in ").concat(currentLocale));

        return key;
      }

      var newVariables = Object.assign({}, variables);

      if (variables) {
        Object.keys(newVariables).forEach(function (k) {
          var value = newVariables[k];

          if (escapeHtml === true && (typeof value === 'string' || value instanceof String) && value.indexOf('<') >= 0 && value.indexOf('>') >= 0) {
            value = (0, _escapeHtml.default)(value);
          }

          newVariables[k] = value;
        });
      }

      try {
        var msgFormatter = new _intlMessageformat.default(msg, currentLocale, formats);
        return msgFormatter.format(newVariables);
      } catch (err) {
        _this2.warningHandler("format message failed for key='".concat(key, "'."), err.message);

        return msg;
      }
    });
    (0, _defineProperty2.default)(this, "getHTML", function (key, variables) {
      var msg = _this2.get(key, variables);

      if (msg) {
        var el = _react.default.createElement('span', {
          dangerouslySetInnerHTML: {
            __html: msg
          }
        });

        var defaultMessage = function defaultMessage() {
          return el;
        };

        return Object.assign({
          defaultMessage: defaultMessage,
          d: defaultMessage
        }, el);
      }

      return '';
    });
    (0, _defineProperty2.default)(this, "formatMessage", function (messageDescriptor, variables) {
      var id = messageDescriptor.id,
          defaultMessage = messageDescriptor.defaultMessage;
      return _this2.get(id, variables).defaultMessage(defaultMessage);
    });
    (0, _defineProperty2.default)(this, "formatHTMLMessage", function (messageDescriptor, variables) {
      var id = messageDescriptor.id,
          defaultMessage = messageDescriptor.defaultMessage;
      return _this2.getHTML(id, variables).defaultMessage(defaultMessage);
    });
  }

  (0, _createClass2.default)(Locale, [{
    key: "warningHandler",
    value: function warningHandler(msg) {
      var ignoreWarnings = this.options.ignoreWarnings;

      if (!ignoreWarnings) {
        console.warn(msg);
      }
    }
  }, {
    key: "init",
    value: function init() {
      var _this3 = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      (0, _invariant.default)(options.currentLocale, 'options.currentLocale is required');
      (0, _invariant.default)(options.locales, 'options.locales is required');
      Object.assign(this.options, options);
      var _this$options = this.options,
          formats = _this$options.formats,
          locales = _this$options.locales,
          currentLocale = _this$options.currentLocale;
      this.options.formats = Object.assign({}, formats, _constants.default);
      var lang = currentLocale.split('-')[0].split('_')[0];
      var currentLocaleData = locales[currentLocale];
      return new Promise(function (resolve, reject) {
        if (!currentLocaleData) {
          _this3.warningHandler("".concat(currentLocale, " not defined in current locales"), lang);

          reject();
        }

        resolve();
      });
    }
  }, {
    key: "setCurrentLocale",
    value: function setCurrentLocale(lang, callback) {
      (0, _invariant.default)(lang, 'lang is required');
      var _this$options2 = this.options,
          locales = _this$options2.locales,
          currentLocale = _this$options2.currentLocale;

      if (Object.keys(locales).find(function (i) {
        return i === lang;
      })) {
        this.options.currentLocale = lang;

        if (callback && typeof callback === 'function') {
          callback.call();
        }
      } else {
        this.warningHandler("".concat(currentLocale, " not defined in current locales"), lang);
      }
    }
  }]);
  return Locale;
}();

var _default = new Locale();

exports.default = _default;