"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _isArray2 = _interopRequireDefault(require("lodash/isArray"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _fuse = _interopRequireDefault(require("fuse.js"));

var _utils = require("../../utils");

var _Input = _interopRequireDefault(require("../Input/Input"));

var _Selector = _interopRequireDefault(require("./Selector"));

var AutoComplete =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(AutoComplete, _Component);

  function AutoComplete(props) {
    var _this;

    (0, _classCallCheck2.default)(this, AutoComplete);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AutoComplete).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function (prevProps, prevState) {
      var _this$state = _this.state,
          entryValue = _this$state.entryValue,
          isFocused = _this$state.isFocused;
      var options = _this.props.options;

      if (entryValue !== prevState.entryValue || !(0, _isEqual2.default)(options, prevProps.options)) {
        var searchResults = _this.getOptionsForValue(entryValue);

        var showResults = Boolean(searchResults.length) && isFocused; // eslint-disable-next-line react/no-did-update-set-state

        _this.setState({
          searchResults: searchResults,
          showResults: showResults
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getCustomValue", function () {
      if (_this.hasCustomValue()) {
        var entryValue = _this.state.entryValue;
        return entryValue;
      }

      return null;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setEntryText", function (value) {
      _this.handleOnTextEntryUpdated(value);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getOptionsForValue", function (value) {
      if (_this.shouldSkipSearch(value)) {
        return [];
      }

      var _this$props = _this.props,
          options = _this$props.options,
          filterConfig = _this$props.filterConfig;
      var _this$fuse = _this.fuse,
          prevConfig = _this$fuse.options,
          list = _this$fuse.list;
      var nextConfig = (0, _objectSpread2.default)({}, filterConfig, {
        keys: _this.keys
      });

      if (!(0, _isEqual2.default)(prevConfig, nextConfig)) {
        _this.fuse.options = (0, _objectSpread2.default)({}, prevConfig, nextConfig);
      }

      if (!(0, _isEqual2.default)(list, options)) {
        _this.fuse.setCollection(options);
      }

      return _this.fuse.search(value);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getSelection", function () {
      var _this$state2 = _this.state,
          selectionIndex = _this$state2.selectionIndex,
          entryValue = _this$state2.entryValue,
          searchResults = _this$state2.searchResults;
      var index = selectionIndex;

      if (_this.hasCustomValue()) {
        if (index === 0 || index === null) {
          return entryValue;
        }

        index -= 1;
      }

      return searchResults[index];
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "shouldSkipSearch", function (input) {
      var showOptionsWhenEmpty = _this.props.showOptionsWhenEmpty;

      var _assertThisInitialize = (0, _assertThisInitialized2.default)(_this),
          state = _assertThisInitialize.state;

      var emptyValue = !input || input.trim().length === 0;
      var isFocused = _this.state && state.isFocused;
      return !(showOptionsWhenEmpty && isFocused) && emptyValue;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasCustomValue", function () {
      var allowCustomValues = _this.props.allowCustomValues;
      var _this$state3 = _this.state,
          entryValue = _this$state3.entryValue,
          searchResults = _this$state3.searchResults;

      if (allowCustomValues && !searchResults.includes(entryValue)) {
        return true;
      }

      return false;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "focus", function () {
      _this.entry.focus();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "blur", function () {
      _this.entry.blur();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "eventMap", function () {
      var events = {
        38: _this.handleNavUp,
        40: _this.handleNavDown,
        13: _this.handleOnEnter,
        14: _this.handleOnEnter,
        27: _this.handleOnEscape,
        9: _this.handleOnTab
      };
      return events;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "nav", function (delta) {
      if (!_this.hasHint()) {
        return;
      }

      var _this$state4 = _this.state,
          selectionIndex = _this$state4.selectionIndex,
          searchResults = _this$state4.searchResults;
      var maxVisible = _this.props.maxVisible;
      var newIndex;

      if (selectionIndex === null) {
        newIndex = delta === 1 ? 0 : delta;
      } else {
        newIndex = selectionIndex + delta;
      }

      var length = maxVisible ? searchResults.slice(0, maxVisible).length : searchResults.length;

      if (_this.hasCustomValue()) {
        length += 1;
      }

      if (newIndex < 0) {
        newIndex += length;
      } else if (newIndex >= length) {
        newIndex -= length;
      }

      _this.setState({
        selectionIndex: newIndex
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasHint", function () {
      var searchResults = _this.state.searchResults;
      return searchResults.length > 0 || _this.hasCustomValue();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleOnSelected", function (option, event) {
      var _assertThisInitialize2 = (0, _assertThisInitialized2.default)(_this),
          entry = _assertThisInitialize2.entry;

      var entryValue = _this.state.entryValue;
      var _this$props2 = _this.props,
          options = _this$props2.options,
          onSelected = _this$props2.onSelected,
          keys = _this$props2.keys,
          valueRenderer = _this$props2.valueRenderer;
      entry.focus();
      var optionString;
      var result;

      if (typeof option.item === 'number') {
        optionString = options[option.item];
        result = optionString;
      }

      if ((0, _typeof2.default)(option.item) === 'object') {
        if (keys) {
          optionString = (0, _get2.default)(option.item, keys);
        } else {
          optionString = option.item.label;
        }

        result = option.item;
      }

      if (_this.hasCustomValue()) {
        optionString = entryValue;
        result = optionString;
      }

      if (valueRenderer) {
        optionString = valueRenderer(result);
      }

      _this.setState({
        searchResults: _this.getOptionsForValue(optionString),
        selection: optionString,
        entryValue: optionString,
        showResults: false
      }, function () {
        return onSelected(result, event);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleOnTextEntryUpdated", function (value) {
      var searchResults = _this.getOptionsForValue(value);

      _this.setState({
        searchResults: searchResults,
        selection: '',
        selectionIndex: null,
        entryValue: value,
        showResults: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleOnEnter", function (event) {
      var selection = _this.getSelection();

      var onKeyDown = _this.props.onKeyDown;

      if (!selection) {
        return onKeyDown(event);
      }

      return _this.handleOnSelected(selection, event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleOnEscape", function () {
      _this.setState({
        selectionIndex: null,
        showResults: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleOnTab", function (event) {
      var searchResults = _this.state.searchResults;

      var selection = _this.getSelection();

      var option = selection || (searchResults.length > 0 ? searchResults[0] : null);

      if (option === null && _this.hasCustomValue()) {
        option = _this.getCustomValue();
      }

      if (option !== null) {
        _this.handleOnSelected(option, event);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleOnChange", function (event, value) {
      var onChange = _this.props.onChange;

      if (onChange) {
        onChange(event, value);
      }

      _this.handleOnTextEntryUpdated(value);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleOnKeyDown", function (event) {
      var onKeyDown = _this.props.onKeyDown;

      if (!_this.hasHint() || event.shiftKey) {
        return onKeyDown(event);
      }

      var handler = _this.eventMap()[event.keyCode];

      if (handler) {
        handler(event);
      } else {
        return onKeyDown(event);
      }

      return event.preventDefault();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleOnFocus", function (event) {
      var onFocus = _this.props.onFocus;

      _this.setState({
        isFocused: true,
        showResults: true
      });

      if (onFocus) {
        onFocus(event);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleOnBlur", function (event) {
      var onBlur = _this.props.onBlur;

      _this.setState({
        isFocused: false,
        showResults: false
      });

      if (onBlur) {
        onBlur(event);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleNavDown", function () {
      _this.nav(1);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleNavUp", function () {
      _this.nav(-1);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderIncrementalSearchResults", function () {
      var _this$state5 = _this.state,
          entryValue = _this$state5.entryValue,
          selection = _this$state5.selection,
          searchResults = _this$state5.searchResults,
          selectionIndex = _this$state5.selectionIndex;
      var _this$props3 = _this.props,
          options = _this$props3.options,
          highlighting = _this$props3.highlighting;
      var _this$props4 = _this.props,
          prefixCls = _this$props4.prefixCls,
          maxVisible = _this$props4.maxVisible,
          resultsTruncatedMessage = _this$props4.resultsTruncatedMessage,
          allowCustomValues = _this$props4.allowCustomValues,
          customClasses = _this$props4.customClasses,
          isLoading = _this$props4.isLoading,
          noResultsText = _this$props4.noResultsText,
          optionRenderer = _this$props4.optionRenderer;

      if (_this.shouldSkipSearch(entryValue)) {
        return null;
      }

      if (selection) {
        return null;
      }

      return _react.default.createElement(_Selector.default, {
        ref: function ref(n) {
          _this.sel = n;
        },
        prefixCls: prefixCls,
        options: options,
        searchResults: maxVisible ? searchResults.slice(0, maxVisible) : searchResults,
        areResultsTruncated: maxVisible && searchResults.length > maxVisible,
        resultsTruncatedMessage: resultsTruncatedMessage,
        onSelected: _this.handleOnSelected,
        allowCustomValues: allowCustomValues,
        customValue: _this.getCustomValue(),
        customClasses: customClasses,
        selectionIndex: selectionIndex,
        highlighting: highlighting,
        isLoading: isLoading,
        noResultsText: noResultsText,
        optionRenderer: optionRenderer
      });
    });
    var _value = props.value,
        defaultValue = props.defaultValue;
    _this.state = {
      entryValue: _value || defaultValue,
      selection: _value,
      selectionIndex: null,
      isFocused: false,
      showResults: false,
      searchResults: []
    };
    return _this;
  }

  (0, _createClass2.default)(AutoComplete, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props5 = this.props,
          options = _this$props5.options,
          filterConfig = _this$props5.filterConfig;
      var config = (0, _objectSpread2.default)({}, filterConfig, {
        keys: this.keys
      });
      this.fuse = new _fuse.default(options, config);
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !(0, _utils.deepEqual)(this.props, nextProps) || !(0, _utils.shallowEqual)(this.state, nextState);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.fuse = null;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props6 = this.props,
          customClasses = _this$props6.customClasses,
          prefixCls = _this$props6.prefixCls,
          className = _this$props6.className,
          disabled = _this$props6.disabled,
          inputProps = _this$props6.inputProps,
          placeholder = _this$props6.placeholder,
          onKeyPress = _this$props6.onKeyPress,
          onKeyUp = _this$props6.onKeyUp,
          isLoading = _this$props6.isLoading,
          name = _this$props6.name,
          id = _this$props6.id,
          size = _this$props6.size,
          style = _this$props6.style;
      var _this$state6 = this.state,
          entryValue = _this$state6.entryValue,
          showResults = _this$state6.showResults;
      return _react.default.createElement("div", {
        className: (0, _classnames.default)(className, prefixCls)
      }, _react.default.createElement(_Input.default, (0, _extends2.default)({
        ref: function ref(n) {
          _this2.entry = n;
        },
        type: "text",
        disabled: disabled,
        placeholder: placeholder,
        name: name,
        id: id,
        size: size,
        style: style
      }, inputProps, {
        className: (0, _classnames.default)(className, "".concat(prefixCls, "-input"), customClasses.input),
        value: entryValue,
        onChange: this.handleOnChange,
        onKeyDown: this.handleOnKeyDown,
        onKeyPress: onKeyPress,
        onKeyUp: onKeyUp,
        onFocus: this.handleOnFocus,
        onBlur: this.handleOnBlur
      })), (showResults || isLoading) && this.renderIncrementalSearchResults());
    }
  }, {
    key: "keys",
    get: function get() {
      var propsKeys = this.props.keys;
      var keys = ['label'];

      if ('keys' in this.props && (0, _isArray2.default)(propsKeys)) {
        keys = propsKeys;
      }

      return keys;
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var value = nextProps.value;

      if ('value' in nextProps && value !== prevState.entryValue) {
        return {
          entryValue: value
        };
      }

      return null;
    }
  }]);
  return AutoComplete;
}(_react.Component);

(0, _defineProperty2.default)(AutoComplete, "propTypes", {
  prefixCls: _propTypes.default.string,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  name: _propTypes.default.string,
  id: _propTypes.default.string,
  customClasses: _propTypes.default.object,
  maxVisible: _propTypes.default.number,
  size: _propTypes.default.string,
  resultsTruncatedMessage: _propTypes.default.string,
  options: _propTypes.default.array,
  allowCustomValues: _propTypes.default.bool,
  defaultValue: _propTypes.default.string,
  value: _propTypes.default.string,
  keys: _propTypes.default.array,
  placeholder: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  inputProps: _propTypes.default.object,
  onSelected: _propTypes.default.func,
  onChange: _propTypes.default.func,
  onKeyDown: _propTypes.default.func,
  onKeyPress: _propTypes.default.func,
  onKeyUp: _propTypes.default.func,
  onFocus: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  showOptionsWhenEmpty: _propTypes.default.bool,
  highlighting: _propTypes.default.bool,
  isLoading: _propTypes.default.bool,
  noResultsText: _propTypes.default.string,
  optionRenderer: _propTypes.default.func,
  valueRenderer: _propTypes.default.func,
  filterConfig: _propTypes.default.shape({
    location: _propTypes.default.number,
    distance: _propTypes.default.number,
    threshold: _propTypes.default.number,
    maxPatternLength: _propTypes.default.number,
    caseSensitive: _propTypes.default.bool,
    tokenSeparator: _propTypes.default.any,
    findAllMatches: _propTypes.default.bool,
    minMatchCharLength: _propTypes.default.number,
    id: _propTypes.default.string,
    keys: _propTypes.default.array,
    shouldSort: _propTypes.default.bool,
    getFn: _propTypes.default.func,
    sortFn: _propTypes.default.func,
    tokenize: _propTypes.default.bool,
    matchAllTokens: _propTypes.default.bool,
    includeScore: _propTypes.default.bool,
    includeMatches: _propTypes.default.bool,
    verbose: _propTypes.default.bool
  })
});
(0, _defineProperty2.default)(AutoComplete, "defaultProps", {
  prefixCls: 'autocomplete',
  options: [],
  customClasses: {},
  size: 'default',
  allowCustomValues: false,
  maxVisible: 6,
  defaultValue: '',
  placeholder: '',
  disabled: false,
  inputProps: {},
  onSelected: _noop2.default,
  onChange: _noop2.default,
  onKeyDown: _noop2.default,
  onKeyPress: _noop2.default,
  onKeyUp: _noop2.default,
  onFocus: _noop2.default,
  onBlur: _noop2.default,
  showOptionsWhenEmpty: false,
  resultsTruncatedMessage: null,
  highlighting: true,
  isLoading: false,
  filterConfig: {
    id: null,
    caseSensitive: false,
    shouldSort: true,
    tokenize: false,
    matchAllTokens: false,
    findAllMatches: false,
    includeScore: true,
    includeMatches: true,
    threshold: 0.5,
    location: 0,
    distance: 100,
    maxPatternLength: 32,
    minMatchCharLength: 1,
    keys: ['label']
  }
});
var _default = AutoComplete;
exports.default = _default;