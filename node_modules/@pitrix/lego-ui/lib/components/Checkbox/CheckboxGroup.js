"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _isFunction2 = _interopRequireDefault(require("lodash/isFunction"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Checkbox = _interopRequireDefault(require("./Checkbox"));

var CheckboxGroup =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(CheckboxGroup, _Component);

  function CheckboxGroup(props) {
    var _this;

    (0, _classCallCheck2.default)(this, CheckboxGroup);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CheckboxGroup).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleChange", function (e) {
      var stateValue = _this.state.value;
      var option = e.target;
      var value = (0, _toConsumableArray2.default)(stateValue);
      var optionIndex = value.indexOf(option.value);

      if (optionIndex === -1) {
        value.push(option.value);
      } else {
        value.splice(optionIndex, 1);
      }

      if (!('value' in _this.props)) {
        _this.setState({
          value: value
        });
      }

      var _this$props = _this.props,
          onChange = _this$props.onChange,
          name = _this$props.name;

      if ((0, _isFunction2.default)(onChange) && value !== stateValue) {
        onChange(value, name);
      }
    });
    _this.state = {
      value: props.value || props.defaultValue
    };
    return _this;
  }

  (0, _createClass2.default)(CheckboxGroup, [{
    key: "getChildContext",
    value: function getChildContext() {
      var _this$props2 = this.props,
          disabled = _this$props2.disabled,
          name = _this$props2.name;
      var value = this.state.value;
      return {
        checkboxGroup: {
          onChange: this.handleChange,
          value: value,
          disabled: disabled,
          name: name
        }
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          options = _this$props3.options,
          direction = _this$props3.direction,
          name = _this$props3.name,
          className = _this$props3.className,
          wrapClassName = _this$props3.wrapClassName,
          prefixCls = _this$props3.prefixCls,
          style = _this$props3.style,
          children = _this$props3.children,
          disabled = _this$props3.disabled;
      var value = this.state.value;
      var newChildren = children;

      if (options && options.length > 0) {
        newChildren = options.map(function (option) {
          var restProps = {
            name: name,
            className: className
          };
          var newLabel = null;

          if (typeof option === 'string') {
            restProps.value = option;
            restProps.checked = value.indexOf(option) > -1;
            restProps.disabled = disabled;
            newLabel = option;
          } else {
            restProps.value = option.value;
            restProps.checked = value.indexOf(option.value) > -1;
            restProps.disabled = option.disabled || disabled;
            newLabel = option.label;
          }

          return _react.default.createElement(_Checkbox.default, (0, _extends2.default)({
            key: "Checkbox-".concat(restProps.value),
            name: name,
            className: className
          }, restProps, {
            onChange: _this2.handleChange
          }), newLabel);
        });
      }

      return _react.default.createElement("div", {
        "data-direction": direction,
        className: (0, _classnames.default)("field has-addons ".concat(prefixCls), wrapClassName),
        style: style
      }, newChildren);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if ('value' in nextProps && !(0, _isEqual2.default)(prevState.value, nextProps.value)) {
        return {
          value: nextProps.value
        };
      }

      return null;
    }
  }]);
  return CheckboxGroup;
}(_react.Component);

(0, _defineProperty2.default)(CheckboxGroup, "propTypes", {
  options: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
    value: _propTypes.default.any,
    label: _propTypes.default.string,
    disabled: _propTypes.default.bool
  })])),
  value: _propTypes.default.array,
  defaultValue: _propTypes.default.array,
  onChange: _propTypes.default.func,
  name: _propTypes.default.string,
  direction: _propTypes.default.oneOf(['row', 'column']),
  className: _propTypes.default.string,
  wrapClassName: _propTypes.default.string,
  prefixCls: _propTypes.default.string,
  style: _propTypes.default.object,
  disabled: _propTypes.default.bool,
  children: _propTypes.default.node
});
(0, _defineProperty2.default)(CheckboxGroup, "childContextTypes", {
  checkboxGroup: _propTypes.default.any
});
(0, _defineProperty2.default)(CheckboxGroup, "defaultProps", {
  direction: 'row',
  prefixCls: 'checkbox-group',
  options: [],
  defaultValue: []
});
var _default = CheckboxGroup;
exports.default = _default;