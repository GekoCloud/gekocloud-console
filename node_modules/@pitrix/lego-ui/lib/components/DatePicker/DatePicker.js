"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _merge2 = _interopRequireDefault(require("lodash/merge"));

var _react = _interopRequireWildcard(require("react"));

var _server = _interopRequireDefault(require("react-dom/server"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _flatpickr = _interopRequireDefault(require("flatpickr"));

var _zh = require("./i10n/zh");

var _Icon = _interopRequireDefault(require("../Icon"));

var _customUI = _interopRequireDefault(require("./plugins/customUI"));

var propsKey = ['onChange', 'onOpen', 'onClose', 'onMonthChange', 'onYearChange', 'onReady', 'onValueUpdate', 'onDayCreate', 'defaultDate', 'enableTime', 'enableSeconds', 'defaultHour', 'defaultMinute', 'dateFormat', 'formatDate', 'hourIncrement', 'minuteIncrement', 'enable', 'disable', 'maxDate', 'minDate', 'mode', 'conjunction', 'noCalendar', 'enableSeconds', 'weekNumbers', 'appendTo', 'locale'];
var defaultOptions = {
  locale: {},
  plugins: [new _customUI.default()],
  time_24hr: true,
  nextArrow: _server.default.renderToString(_react.default.createElement(_Icon.default, {
    name: "next",
    size: 20
  })),
  prevArrow: _server.default.renderToString(_react.default.createElement(_Icon.default, {
    name: "previous",
    size: 20
  }))
};

var pickFormValidateStatusClassNames = function pickFormValidateStatusClassNames() {
  var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return ['is-danger', 'has-danger-help', 'is-warning', 'has-warning-help', 'is-success'].filter(function (acceptableClassName) {
    return className.indexOf(acceptableClassName) !== -1;
  }).join(' ');
};

var DatePicker =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(DatePicker, _Component);

  function DatePicker(props) {
    var _this;

    (0, _classCallCheck2.default)(this, DatePicker);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DatePicker).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindEvents", function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _this$props = _this.props,
          _onOpen = _this$props.onOpen,
          _onClose = _this$props.onClose,
          _onChange = _this$props.onChange;
      var changing = _this.state.changing;
      var nextOptions = (0, _objectSpread2.default)({}, options, {
        onOpen: function onOpen(dates, dateStr, instance) {
          _this.setState({
            isFocus: true
          });

          _onOpen(dates, dateStr, instance);
        },
        onClose: function onClose(dates, dateStr, instance) {
          if (_this.node.blur) {
            _this.node.blur();
          }

          setTimeout(function () {
            _this.setState({
              isFocus: false
            });
          }, 1);

          _onClose(dates, dateStr, instance);
        },
        onChange: function onChange(dates, dateStr, instance) {
          if (!('value' in _this.props)) {
            _this.setState({
              value: dates
            });
          }

          if ('value' in _this.props && !changing) {
            _this.setState({
              changing: true
            }, function () {
              _this.setState({
                changing: false
              });
            });
          }

          _onChange(dates, dateStr, instance);
        }
      });
      return nextOptions;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMouseEnter", function () {
      var showClearBtn = _this.props.showClearBtn;
      var isHover = _this.state.isHover;

      if (showClearBtn && !isHover) {
        _this.setState({
          isHover: true
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMouseLeave", function () {
      var showClearBtn = _this.props.showClearBtn;
      var isHover = _this.state.isHover;

      if (showClearBtn && isHover) {
        _this.setState({
          isHover: false
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClear", function (e) {
      e.stopPropagation();
      var _this$props2 = _this.props,
          onClear = _this$props2.onClear,
          onChange = _this$props2.onChange;

      if (!('value' in _this.props)) {
        _this.setState({
          value: ''
        });
      }

      _this.instance.close();

      onClear();
      onChange([], '', _this.instance);
    });
    _this.instance = null;
    _this.state = {
      value: 'value' in props || 'defaultValue' in props ? props.value || props.defaultValue : undefined,
      changing: false,
      isHover: false,
      isFocus: false
    };
    return _this;
  }

  (0, _createClass2.default)(DatePicker, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var props = this.props;
      var propsOptions = this.props.options;
      var value = this.state.value;
      var options = (0, _objectSpread2.default)({}, defaultOptions, propsOptions);
      propsKey.forEach(function (key) {
        if (props[key]) {
          options[key] = props[key];
        }
      });
      options.locale = (0, _merge2.default)(options.locale, _zh.zh);
      this.instance = new _flatpickr.default(this.node, this.bindEvents(options));
      this.instance.setDate(value, false);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;

      var props = this.props;
      var propsOptions = this.props.options;
      var prevOptions = (0, _objectSpread2.default)({}, prevProps.options);
      var nextOptions = (0, _objectSpread2.default)({}, propsOptions);
      propsKey.forEach(function (key) {
        if (key in _this2.props) {
          nextOptions[key] = props[key];
        }

        if (key in prevProps) {
          prevOptions[key] = prevProps[key];
        }
      });
      var optionsKeys = Object.getOwnPropertyNames(nextOptions);
      optionsKeys = (0, _omit2.default)(optionsKeys, ['onChange', 'onOpen', 'onClose', 'onMonthChange', 'onYearChange', 'onReady', 'onValueUpdate', 'onDayCreate']);

      for (var index = optionsKeys.length - 1; index >= 0; index -= 1) {
        var key = optionsKeys[index];
        var value = nextOptions[key];

        if (value !== prevOptions[key]) {
          this.instance.set(key, value);
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.instance) {
        this.instance.destroy();
        this.instance = null;
      }
    }
  }, {
    key: "renderIcon",
    value: function renderIcon() {
      var _this$props3 = this.props,
          showClearBtn = _this$props3.showClearBtn,
          disabled = _this$props3.disabled;
      var _this$state = this.state,
          value = _this$state.value,
          isHover = _this$state.isHover,
          isFocus = _this$state.isFocus;
      var iconName = 'noCalendar' in this.props && 'enableTime' in this.props ? 'clock' : 'calendar';

      if (showClearBtn && (isFocus || isHover) && !disabled && value !== '') {
        return _react.default.createElement(_Icon.default, {
          className: "is-right",
          name: "close",
          clickable: true,
          onClick: this.handleClear
        });
      }

      return _react.default.createElement(_Icon.default, {
        className: "is-right",
        name: iconName
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props4 = this.props,
          options = _this$props4.options,
          defaultValue = _this$props4.defaultValue,
          value = _this$props4.value,
          children = _this$props4.children,
          className = _this$props4.className,
          showClearBtn = _this$props4.showClearBtn,
          props = (0, _objectWithoutProperties2.default)(_this$props4, ["options", "defaultValue", "value", "children", "className", "showClearBtn"]);
      var _this$state2 = this.state,
          stateValue = _this$state2.value,
          isHover = _this$state2.isHover;

      if (this.instance) {
        this.instance.setDate(stateValue, false);
      }

      propsKey.forEach(function (key) {
        delete props[key];
      });
      delete props.onClear;
      props.className = (0, _classnames.default)('datepicker-input input', pickFormValidateStatusClassNames(className), {
        'is-hover': isHover
      });
      return options.wrap ? _react.default.createElement("div", (0, _extends2.default)({}, props, {
        ref: function ref(n) {
          _this3.node = n;
        }
      }), children) : _react.default.createElement("div", {
        className: (0, _classnames.default)(className, 'control', 'has-icons-right'),
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave
      }, _react.default.createElement("input", (0, _extends2.default)({}, props, {
        ref: function ref(n) {
          _this3.node = n;
        }
      })), this.renderIcon());
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if ('value' in nextProps && !(0, _isEqual2.default)(nextProps.value, prevState.value)) {
        return {
          value: nextProps.value
        };
      }

      return null;
    }
  }]);
  return DatePicker;
}(_react.Component);

(0, _defineProperty2.default)(DatePicker, "propTypes", {
  defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.array, _propTypes.default.object, _propTypes.default.number]),
  options: _propTypes.default.object,
  onChange: _propTypes.default.func,
  onOpen: _propTypes.default.func,
  onClose: _propTypes.default.func,
  onClear: _propTypes.default.func,
  onMonthChange: _propTypes.default.func,
  onYearChange: _propTypes.default.func,
  onReady: _propTypes.default.func,
  onValueUpdate: _propTypes.default.func,
  onDayCreate: _propTypes.default.func,
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.array, _propTypes.default.object, _propTypes.default.number]),
  className: _propTypes.default.string,
  children: _propTypes.default.node,
  showClearBtn: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  enableTime: _propTypes.default.bool,
  mode: _propTypes.default.string
});
(0, _defineProperty2.default)(DatePicker, "defaultProps", {
  options: {},
  onChange: _noop2.default,
  onOpen: _noop2.default,
  onClose: _noop2.default,
  onClear: _noop2.default,
  showClearBtn: true,
  mode: 'single'
});
var _default = DatePicker;
exports.default = _default;