"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _remove2 = _interopRequireDefault(require("lodash/remove"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _isArray2 = _interopRequireDefault(require("lodash/isArray"));

var _isFunction2 = _interopRequireDefault(require("lodash/isFunction"));

var _isRegExp2 = _interopRequireDefault(require("lodash/isRegExp"));

var _isObject2 = _interopRequireDefault(require("lodash/isObject"));

var _pickBy2 = _interopRequireDefault(require("lodash/pickBy"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _context = require("./context");

var _validationRules = _interopRequireDefault(require("./validationRules"));

/* eslint-disable react/no-unused-state */
var errorStatus = ['validating', 'error', 'warning'];

var Form =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Form, _Component);

  function Form(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Form);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Form).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "Model", {
      /* name: value */
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "Schemas", {
      /* name: schemas */
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "SchemaErrors", {
      /* name: schema */
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "CustomErrors", {
      /* name: schema */
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "DisabledFields", []);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "submitForm", function (e) {
      e.preventDefault();
      var _this$props = _this.props,
          onSubmit = _this$props.onSubmit,
          validateOnSubmit = _this$props.validateOnSubmit;
      var isValid = validateOnSubmit ? _this.validateForm() : true;

      if (onSubmit !== _noop2.default && isValid) {
        onSubmit((0, _omit2.default)(_this.Model, _this.DisabledFields));
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "checkValid", function (name) {
      if (_this.Model && !(name && name in _this.Model)) return false;
      var defaultError = {
        status: '',
        help: ''
      };
      var customError = _this.CustomErrors[name] || defaultError;
      var validateError = _this.SchemaErrors[name] || defaultError;
      if (errorStatus.includes(customError.status)) return false;
      return !errorStatus.includes(validateError.status);
    });
    var onFieldValueChange = _this.props.onFieldValueChange;

    var initFormModel = function initFormModel(obj) {
      _this.Model = Object.assign({}, _this.Model, obj);
    };

    var setFormModel = function setFormModel(obj) {
      var key = Object.keys(obj)[0];

      if (!(0, _isEqual2.default)(obj[key], _this.Model[key])) {
        _this.Model = Object.assign({}, _this.Model, obj);
        onFieldValueChange(obj, _this.Model);
      }
    };

    var deleteFormModel = function deleteFormModel(name) {
      if (_this.Model && name in _this.Model) {
        delete _this.Model[name];
        delete _this.Schemas[name];
        delete _this.SchemaErrors[name];
        delete _this.CustomErrors[name];

        if (_this.DisabledFields.includes(name)) {
          (0, _remove2.default)(_this.DisabledFields, function (n) {
            return n === name;
          });
        }
      }
    };

    var setFormSchemas = function setFormSchemas(obj) {
      _this.Schemas = Object.assign({}, _this.Schemas, obj);
    };

    var setCustomErrors = function setCustomErrors(obj) {
      _this.CustomErrors = Object.assign({}, _this.CustomErrors, obj);
    };

    var initFormDisabled = function initFormDisabled(name) {
      if (!_this.DisabledFields.includes(name)) {
        _this.DisabledFields.push(name);
      }
    };

    var setFormDisabled = function setFormDisabled(name, disabled) {
      if (!_this.DisabledFields.includes(name) && disabled) {
        delete _this.SchemaErrors[name];

        _this.setState({
          validating: true
        }, function () {
          _this.DisabledFields.push(name);

          _this.setState({
            validating: false
          });
        });
      }

      if (_this.DisabledFields.includes(name) && !disabled) {
        (0, _remove2.default)(_this.DisabledFields, function (n) {
          return n === name;
        });

        _this.validateField(name);
      }
    };

    var getFormModel = function getFormModel() {
      return (0, _omit2.default)(_this.Model, _this.DisabledFields) || {};
    };

    var getFieldError = function getFieldError(name) {
      if (_this.CustomErrors && _this.SchemaErrors) {
        var schemaError = _this.SchemaErrors[name];
        var customError = _this.CustomErrors[name];

        if (schemaError || customError) {
          if (schemaError && errorStatus.includes(schemaError.status)) {
            return schemaError;
          }

          if (customError && errorStatus.includes(customError.status)) {
            return customError;
          }
        }

        return null;
      }

      return null;
    };

    var validateFormField = function validateFormField(name) {
      _this.validateField(name);
    };

    _this.state = {
      validating: false,
      initFormModel: initFormModel,
      setFormModel: setFormModel,
      deleteFormModel: deleteFormModel,
      setFormSchemas: setFormSchemas,
      setCustomErrors: setCustomErrors,
      getFormModel: getFormModel,
      getFieldError: getFieldError,
      validateFormField: validateFormField,
      initFormDisabled: initFormDisabled,
      setFormDisabled: setFormDisabled
    };
    return _this;
  }

  (0, _createClass2.default)(Form, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !nextState.validating;
    }
  }, {
    key: "getFieldValue",
    value: function getFieldValue(name) {
      if (name && name in this.Model) {
        return this.Model[name];
      }

      return undefined;
    }
  }, {
    key: "getFieldsValue",
    value: function getFieldsValue(names) {
      var _this2 = this;

      if (!names) return this.Model;
      var fieldsData = {};

      if ((0, _isArray2.default)(names)) {
        names.forEach(function (name) {
          fieldsData[name] = name && name in _this2.Model ? _this2.Model[name] : undefined;
        });
      }

      return fieldsData;
    }
  }, {
    key: "getFieldError",
    value: function getFieldError(name) {
      var errors = Object.assign({}, this.CustomErrors, this.SchemaErrors);
      errors = (0, _pickBy2.default)(errors, function (obj) {
        return errorStatus.includes(obj.status);
      });

      if (name && name in errors) {
        return errors[name];
      }

      return undefined;
    }
  }, {
    key: "getFieldsError",
    value: function getFieldsError(names) {
      var errors = Object.assign({}, this.CustomErrors, this.SchemaErrors);
      errors = (0, _pickBy2.default)(errors, function (obj) {
        return errorStatus.includes(obj.status);
      });
      if (!names) return errors;
      var errorsData = {};

      if ((0, _isArray2.default)(names)) {
        names.forEach(function (name) {
          errorsData[name] = name && name in errors ? errors[name] : undefined;
        });
      }

      return errorsData;
    }
  }, {
    key: "validateForm",
    value: function validateForm() {
      var FormModel = this.Model || {};
      var fieldNames = Object.keys(FormModel);
      return this.validateFields(fieldNames);
    }
  }, {
    key: "validateFields",
    value: function validateFields(names) {
      var _this3 = this;

      if (!names) return this.validateForm();

      if ((0, _isArray2.default)(names)) {
        // validate all fields
        names.forEach(function (name) {
          if (!_this3.DisabledFields.includes(name)) {
            _this3.validateField(name);
          }
        }); // then check the status

        var isValid = true;
        names.forEach(function (name) {
          if (!_this3.DisabledFields.includes(name)) {
            isValid = isValid && _this3.checkValid(name);
          }
        });
        return isValid;
      }

      return false;
    }
  }, {
    key: "validateField",
    value: function validateField(name, isRelated) {
      if (this.Model && !(name && name in this.Model)) return false;
      var schemas = this.Schemas[name] || [];

      if (schemas.length > 0) {
        this.setState({
          validating: true
        }); // validate under the error schemas

        var errorSchemas = schemas.filter(function (schema) {
          return schema.status === 'error' || !schema.status;
        });
        var passedErrorSchemes = errorSchemas.length > 0 ? this.validate(name, this.Model[name], errorSchemas, isRelated) : true;

        if (!passedErrorSchemes) {
          this.setState({
            validating: false
          });
          return false;
        } // if pass the error schemas, then validate under the warning schemas


        var warningSchemas = schemas.filter(function (schema) {
          return schema.status === 'warning';
        });
        this.validate(name, this.Model[name], warningSchemas, isRelated);
        this.setState({
          validating: false
        });
      }

      return this.checkValid(name);
    }
  }, {
    key: "validate",
    value: function validate(name, value, schemas, isRelated) {
      var _this4 = this;

      var filteredSchemas = schemas.filter(function (schema) {
        return schema && !(0, _isEqual2.default)(schema, {});
      });

      var _loop = function _loop(i) {
        var schema = filteredSchemas[i];
        if (!schema.status) schema.status = 'error';
        var isValid = true; // schema rules could be Function, Regex or Built-in Rules Object

        if ((0, _isFunction2.default)(schema.rule)) {
          isValid = schema.rule(value, _this4.Model);
        } else if ((0, _isRegExp2.default)(schema.rule)) {
          isValid = _validationRules.default.matchRegex(_this4.Model, value, schema.rule);
        } else if ((0, _isObject2.default)(schema.rule) && (0, _typeof2.default)(schema.rule) === 'object') {
          Object.keys(schema.rule).forEach(function (ruleKey) {
            var extra = schema.rule[ruleKey];
            var ruleFunc = _validationRules.default[ruleKey];

            if ((0, _isFunction2.default)(ruleFunc) && extra !== false) {
              isValid = isValid && ruleFunc(_this4.Model, value, extra);
            }
          });
        } // if this field has related fields, then validate them too


        if ((0, _isArray2.default)(schema.relatedField) && !isRelated) {
          schema.relatedField.forEach(function (fieldName) {
            _this4.validateField(fieldName, true);
          });
        } // set the error and status info if invalid


        if (!isValid) {
          _this4.SchemaErrors = Object.assign({}, _this4.SchemaErrors, (0, _defineProperty2.default)({}, name, schema));
          return {
            v: false
          };
        }
      };

      for (var i = 0; i < filteredSchemas.length; i += 1) {
        var _ret = _loop(i);

        if ((0, _typeof2.default)(_ret) === "object") return _ret.v;
      }

      delete this.SchemaErrors[name];
      return true;
    }
  }, {
    key: "render",
    value: function render() {
      var _this5 = this;

      var _this$props2 = this.props,
          children = _this$props2.children,
          className = _this$props2.className,
          style = _this$props2.style,
          onSubmit = _this$props2.onSubmit,
          validateOnSubmit = _this$props2.validateOnSubmit,
          id = _this$props2.id,
          width = _this$props2.width,
          layout = _this$props2.layout,
          onFieldValueChange = _this$props2.onFieldValueChange,
          restProps = (0, _objectWithoutProperties2.default)(_this$props2, ["children", "className", "style", "onSubmit", "validateOnSubmit", "id", "width", "layout", "onFieldValueChange"]);
      var widthStyle = width ? {
        width: "".concat(width, "px")
      } : {
        width: '100%'
      };
      return _react.default.createElement(_context.FormContext.Provider, {
        value: this.state
      }, _react.default.createElement("form", (0, _extends2.default)({}, restProps, {
        onSubmit: this.submitForm,
        id: id,
        className: (0, _classnames.default)('form', "is-".concat(layout, "-layout"), className),
        style: Object.assign({}, style, widthStyle),
        ref: function ref(_ref) {
          _this5.form = _ref;
        }
      }), children));
    }
  }]);
  return Form;
}(_react.Component);

(0, _defineProperty2.default)(Form, "propTypes", {
  layout: _propTypes.default.string,
  onSubmit: _propTypes.default.func,
  onFieldValueChange: _propTypes.default.func,
  validateOnSubmit: _propTypes.default.bool,
  width: _propTypes.default.number,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  children: _propTypes.default.node,
  id: _propTypes.default.string
});
(0, _defineProperty2.default)(Form, "defaultProps", {
  layout: 'horizon',
  onSubmit: _noop2.default,
  onFieldValueChange: _noop2.default,
  validateOnSubmit: true
});
var _default = Form;
exports.default = _default;