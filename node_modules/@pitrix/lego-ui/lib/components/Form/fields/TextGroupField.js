"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Loading = _interopRequireDefault(require("../../Loading"));

var _Layout = require("../../Layout");

var _formUtils = _interopRequireDefault(require("../formUtils"));

var _context = require("../context");

var TextGroupField =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(TextGroupField, _Component);

  function TextGroupField(props) {
    var _this;

    (0, _classCallCheck2.default)(this, TextGroupField);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TextGroupField).call(this));
    var model = props.model; // If there is no model in props, then get the default model from children

    if (Object.keys(model).length === 0) {
      _react.default.Children.forEach(props.children, function (child) {
        if ((0, _isString2.default)(child.type)) return;

        if (!child.props.disabled) {
          var fieldName = child.props.name;

          if (fieldName) {
            var fieldValue = _formUtils.default.getTextGroupFieldValue(child);

            model = Object.assign({}, model, (0, _defineProperty2.default)({}, fieldName, fieldValue));
          }
        }
      });
    }

    _this.state = {
      model: model,
      validateStatus: '',
      validateHelp: ''
    };
    return _this;
  }

  (0, _createClass2.default)(TextGroupField, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          children = _this$props.children,
          propsModel = _this$props.model,
          context = _this$props.context;
      var model = this.state.model;
      var validateFormField = context.validateFormField,
          initFormModel = context.initFormModel,
          setFormSchemas = context.setFormSchemas,
          setCustomErrors = context.setCustomErrors; // Get initial validateStatus & validateHelp from the child fields

      _react.default.Children.forEach(children, function (child) {
        var _child$props = child.props,
            fieldName = _child$props.name,
            fieldSchemas = _child$props.schemas,
            disabled = _child$props.disabled,
            validateStatus = _child$props.validateStatus,
            validateHelp = _child$props.validateHelp;
        var fieldValue = model[fieldName];
        if ((0, _isString2.default)(child.type) || !fieldName) return;

        if (!disabled) {
          if (initFormModel) initFormModel((0, _defineProperty2.default)({}, fieldName, fieldValue));
          if (fieldSchemas && setFormSchemas) setFormSchemas((0, _defineProperty2.default)({}, fieldName, fieldSchemas));

          if (setCustomErrors) {
            setCustomErrors((0, _defineProperty2.default)({}, fieldName, {
              status: validateStatus || '',
              help: validateHelp || ''
            }));
          }
        }
      }); // Set the real validateStatus & validateHelp after validate


      var modelKeys = Object.keys(propsModel);

      if (modelKeys.length > 0) {
        modelKeys.forEach(function (fieldName) {
          validateFormField(fieldName);
        });
      }

      this.setGroupFieldStatus();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var model = prevState.model;
      var _this$props2 = this.props,
          children = _this$props2.children,
          _this$props2$model = _this$props2.model,
          nextModel = _this$props2$model === void 0 ? {} : _this$props2$model,
          context = _this$props2.context;
      var setCustomErrors = context.setCustomErrors,
          setFormModel = context.setFormModel,
          validateFormField = context.validateFormField; // Custom validate

      _react.default.Children.forEach(children, function (child) {
        var _child$props2 = child.props,
            fieldName = _child$props2.name,
            validateStatus = _child$props2.validateStatus,
            validateHelp = _child$props2.validateHelp;
        if ((0, _isString2.default)(child.type) || !fieldName) return;

        if (setCustomErrors) {
          setCustomErrors((0, _defineProperty2.default)({}, fieldName, {
            status: validateStatus || '',
            help: validateHelp || ''
          }));
        }
      }); // Format validate


      var nextModelKeys = Object.keys(nextModel);

      if (nextModel && nextModelKeys.length > 0 && !(0, _isEqual2.default)(nextModel, model)) {
        nextModelKeys.forEach(function (fieldName) {
          if (model[fieldName] !== nextModel[fieldName]) {
            setFormModel((0, _defineProperty2.default)({}, fieldName, nextModel[fieldName]));
            validateFormField(fieldName);
          }
        });
      }

      this.setGroupFieldStatus();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this$props3 = this.props,
          children = _this$props3.children,
          context = _this$props3.context;
      var deleteFormModel = context.deleteFormModel;

      _react.default.Children.forEach(children, function (child) {
        var fieldName = child.props.name;

        if (!(0, _isString2.default)(child.type) && fieldName && deleteFormModel) {
          deleteFormModel(fieldName);
        }
      });
    }
  }, {
    key: "setGroupFieldStatus",
    value: function setGroupFieldStatus() {
      var context = this.props.context;
      var _this$state = this.state,
          model = _this$state.model,
          currentStatus = _this$state.validateStatus,
          currentHelp = _this$state.validateHelp;
      var getFieldError = context.getFieldError;
      var fieldNames = Object.keys(model);
      var validateStatus = '';
      var validateHelp = '';
      fieldNames.forEach(function (name) {
        var fieldError = getFieldError ? getFieldError(name) : null;

        if (fieldError && !validateStatus) {
          validateStatus = fieldError.status;
          validateHelp = fieldError.help;
        }
      });

      if (currentStatus !== validateStatus || currentHelp !== validateHelp) {
        this.setState({
          validateStatus: validateStatus,
          validateHelp: validateHelp
        });
      }
    }
  }, {
    key: "validateField",
    value: function validateField(fieldName) {
      var context = this.props.context;
      var validateFormField = context.validateFormField,
          getFieldError = context.getFieldError;

      if (validateFormField) {
        validateFormField(fieldName); // Get error info after validate

        var fieldError = getFieldError ? getFieldError(fieldName) : null;
        var validateStatus = '';
        var validateHelp = '';

        if (fieldError) {
          validateStatus = fieldError.status;
          validateHelp = fieldError.help;
        }

        this.setState({
          validateStatus: validateStatus,
          validateHelp: validateHelp
        });
      }
    }
  }, {
    key: "generateStatusInfo",
    value: function generateStatusInfo() {
      var help = this.props.help;
      var _this$state2 = this.state,
          validateStatus = _this$state2.validateStatus,
          validateHelp = _this$state2.validateHelp;
      var statusClass = '';
      var helpContent = help;

      if (validateStatus === 'error') {
        if (validateHelp) {
          statusClass = 'is-danger has-danger-help';
          helpContent = validateHelp;
        } else {
          statusClass = 'is-danger';
        }
      }

      if (validateStatus === 'warning') {
        if (validateHelp) {
          statusClass = 'is-warning has-warning-help';
          helpContent = validateHelp;
        } else {
          statusClass = 'is-warning';
        }
      }

      if (validateStatus === 'success') {
        statusClass = 'is-success';
      }

      return {
        statusClass: statusClass,
        helpContent: helpContent
      };
    }
  }, {
    key: "wrapChildren",
    value: function wrapChildren(component) {
      var _this2 = this;

      var context = this.props.context;
      var model = this.state.model;
      var setFormModel = context.setFormModel,
          getFieldError = context.getFieldError;
      var _component$props = component.props,
          name = _component$props.name,
          onChange = _component$props.onChange,
          onBlur = _component$props.onBlur,
          disabled = _component$props.disabled,
          validateOnChange = _component$props.validateOnChange,
          validateOnBlur = _component$props.validateOnBlur;

      if ((0, _isString2.default)(component.type) || !name) {
        return component;
      }

      var handleChange = function handleChange(e, value) {
        var nextValue = (0, _typeof2.default)(e) === 'object' ? value : e;
        nextValue = component.props.type === 'number' && nextValue !== '' ? Number(nextValue) : nextValue;

        if (setFormModel && !disabled) {
          setFormModel((0, _defineProperty2.default)({}, name, nextValue));
        }

        if (validateOnChange && !disabled) {
          _this2.validateField(name);
        }

        _this2.setState({
          model: Object.assign({}, model, (0, _defineProperty2.default)({}, name, nextValue))
        }, function () {
          if (onChange && onChange !== _noop2.default) {
            if ((0, _typeof2.default)(e) === 'object') {
              onChange(e, value);
            } else {
              onChange(nextValue);
            }
          }
        });
      };

      var handleBlur = function handleBlur(e, value) {
        if (validateOnBlur && !disabled) {
          _this2.validateField(name);
        }

        if (onBlur && onBlur !== _noop2.default) {
          onBlur(e, value);
        }
      };

      var _component$props2 = component.props,
          validateStatusProps = _component$props2.validateStatus,
          validateIcon = _component$props2.validateIcon,
          className = _component$props2.className;
      var fieldError = getFieldError ? getFieldError(name) : null;
      var validateStatus = '';
      var statusClass = '';
      validateStatus = fieldError ? fieldError.status : validateStatusProps;
      var hasStatusIcon = validateIcon;
      var hasLoadingIcon = validateIcon && validateStatus === 'validating';

      switch (validateStatus) {
        case 'warning':
        case 'success':
          statusClass = "is-".concat(validateStatus);
          break;

        case 'error':
          statusClass = 'is-danger';
          break;

        default:
          break;
      }

      return _react.default.createElement(_Layout.Control, {
        className: (0, _classnames.default)({
          'has-icons-right': hasStatusIcon
        })
      }, hasStatusIcon ? _react.default.createElement("span", {
        className: "icon icon-".concat(validateStatus, " is-right")
      }) : null, hasLoadingIcon ? _react.default.createElement(_Loading.default, {
        className: "icon is-right",
        size: 16,
        style: {
          padding: 0,
          top: 0
        }
      }) : null, _react.default.cloneElement(component, {
        validateStatus: validateStatus,
        value: model[name],
        className: (0, _classnames.default)(statusClass, className),
        onChange: handleChange,
        onBlur: handleBlur
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props4 = this.props,
          className = _this$props4.className,
          style = _this$props4.style,
          label = _this$props4.label,
          hasAddons = _this$props4.hasAddons,
          help = _this$props4.help,
          children = _this$props4.children;

      var _this$generateStatusI = this.generateStatusInfo(),
          statusClass = _this$generateStatusI.statusClass,
          helpContent = _this$generateStatusI.helpContent;

      return _react.default.createElement(_Layout.Field, {
        className: (0, _classnames.default)(className, 'text-group-field', {
          'has-help': help,
          'has-addons': hasAddons
        }),
        style: style
      }, label ? _react.default.createElement("label", {
        className: "label"
      }, label) : null, _react.default.createElement(_Layout.Control, null, _react.default.Children.map(children, function (child) {
        return _this3.wrapChildren(child);
      })), helpContent ? _react.default.createElement("p", {
        className: (0, _classnames.default)('help', statusClass)
      }, helpContent) : null);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var model = prevState.model;
      var _nextProps$model = nextProps.model,
          nextModel = _nextProps$model === void 0 ? {} : _nextProps$model;
      var nextModelKeys = Object.keys(nextModel);

      if (nextModel && nextModelKeys.length > 0 && !(0, _isEqual2.default)(nextModel, model)) {
        return {
          model: nextModel
        };
      }

      return null;
    }
  }]);
  return TextGroupField;
}(_react.Component);

(0, _defineProperty2.default)(TextGroupField, "fieldType", 'TextGroupField');
(0, _defineProperty2.default)(TextGroupField, "propTypes", {
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  label: _propTypes.default.node,
  help: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.element, _propTypes.default.string]),
  hasAddons: _propTypes.default.bool,
  children: _propTypes.default.node,
  model: _propTypes.default.object,
  context: _propTypes.default.object
});
(0, _defineProperty2.default)(TextGroupField, "defaultProps", {
  label: ' ',
  model: {},
  context: {}
});

var _default = (0, _context.withFormContext)(TextGroupField);

exports.default = _default;