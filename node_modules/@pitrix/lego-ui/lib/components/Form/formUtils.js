"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _isArray2 = _interopRequireDefault(require("lodash/isArray"));

var getFieldValue = function getFieldValue(field, type) {
  if (!field.props) return undefined;
  var fieldValue;
  var _field$props = field.props,
      value = _field$props.value,
      defaultValue = _field$props.defaultValue;

  switch (type) {
    case 'ToggleField':
      fieldValue = value || defaultValue || false;
      break;

    case 'CheckboxGroupField':
      fieldValue = value || defaultValue || [];
      break;

    case 'NumberField':
      fieldValue = value === 0 || defaultValue === 0 ? 0 : value || defaultValue;
      break;

    case 'TextField':
    case 'TextAreaField':
    case 'PasswordField':
      if ([0, ''].includes(value) || value) {
        fieldValue = String(value);
      } else if ([0, ''].includes(defaultValue) || defaultValue) {
        fieldValue = String(defaultValue);
      }

      break;

    case 'SelectField':
      if (field.props.multi) {
        fieldValue = (0, _isArray2.default)(value || defaultValue) && (value || defaultValue).length > 0 ? value || defaultValue : [];
      } else if ((0, _isNumber2.default)(value)) {
        fieldValue = value;
      } else if ((0, _isNumber2.default)(defaultValue)) {
        fieldValue = defaultValue;
      } else {
        fieldValue = value || defaultValue || '';
      }

      break;

    default:
      fieldValue = value || defaultValue;
      break;
  }

  return fieldValue;
};

var getTextGroupFieldValue = function getTextGroupFieldValue(field) {
  if (!field.props || !field.props.name) return undefined;
  var fieldValue;
  var _field$props2 = field.props,
      value = _field$props2.value,
      defaultValue = _field$props2.defaultValue;

  if ([0, ''].includes(value) || value) {
    fieldValue = value;
  } else if ([0, ''].includes(defaultValue) || defaultValue) {
    fieldValue = defaultValue;
  }

  return fieldValue;
};

var _default = {
  getFieldValue: getFieldValue,
  getTextGroupFieldValue: getTextGroupFieldValue
};
exports.default = _default;