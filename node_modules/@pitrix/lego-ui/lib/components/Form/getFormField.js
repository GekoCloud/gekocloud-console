"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _kebabCase2 = _interopRequireDefault(require("lodash/kebabCase"));

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _isArray2 = _interopRequireDefault(require("lodash/isArray"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Layout = require("../Layout");

var _formUtils = _interopRequireDefault(require("./formUtils"));

var _context = require("./context");

var getFormField = function getFormField(CustomField) {
  var FormField =
  /*#__PURE__*/
  function (_Component) {
    (0, _inherits2.default)(FormField, _Component);

    function FormField(props) {
      var _this;

      (0, _classCallCheck2.default)(this, FormField);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(FormField).call(this, props));
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getControlRef", function () {
        var getControlRef = _this.fieldRef.getControlRef;
        if (getControlRef) return getControlRef();
        return null;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setValidateStatus", function (fieldError) {
        var _this$props = _this.props,
            status = _this$props.validateStatus,
            help = _this$props.validateHelp;
        var currentStatus = _this.state.validateStatus; // Format validate

        if (fieldError && fieldError.status !== currentStatus) {
          _this.setState({
            validateStatus: fieldError.status,
            validateHelp: fieldError.help
          });
        } // Custom validate


        if (!fieldError && status !== currentStatus) {
          _this.setState({
            validateStatus: status,
            validateHelp: help
          });
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "validateField", function () {
        var _this$props2 = _this.props,
            name = _this$props2.name,
            context = _this$props2.context;
        var validateFormField = context.validateFormField,
            getFieldError = context.getFieldError;

        if (validateFormField) {
          validateFormField(name);
          var fieldError = getFieldError ? getFieldError(name) : null;

          if (fieldError) {
            _this.setState({
              validateStatus: fieldError.status,
              validateHelp: fieldError.help
            });
          } else {
            _this.setState({
              validateStatus: 'success',
              validateHelp: ''
            });
          }
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "generateStatus", function () {
        var help = _this.props.help;
        var _this$state = _this.state,
            validateStatus = _this$state.validateStatus,
            validateHelp = _this$state.validateHelp;
        var statusClass = '';
        var helpContent = help;

        if (validateStatus === 'error') {
          statusClass = 'is-danger';

          if (validateHelp) {
            statusClass = 'is-danger has-danger-help';
            helpContent = validateHelp;
          }
        }

        if (validateStatus === 'warning') {
          statusClass = 'is-warning';

          if (validateHelp) {
            statusClass = 'is-warning has-warning-help';
            helpContent = validateHelp;
          }
        }

        if (validateStatus === 'success') {
          statusClass = 'is-success';
        }

        return {
          statusClass: statusClass,
          helpContent: helpContent
        };
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleChange", function (value) {
        for (var _len = arguments.length, extra = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          extra[_key - 1] = arguments[_key];
        }

        var _this$props3 = _this.props,
            onChange = _this$props3.onChange,
            validateOnChange = _this$props3.validateOnChange,
            name = _this$props3.name,
            disabled = _this$props3.disabled,
            context = _this$props3.context;
        var setFormModel = context.setFormModel;

        _this.setState({
          value: value
        }, function () {
          if (setFormModel && !disabled) {
            setFormModel((0, _defineProperty2.default)({}, name, value));
          }

          if (validateOnChange && !disabled) {
            _this.validateField();
          }

          if (onChange && onChange !== _noop2.default) {
            onChange.apply(void 0, [value].concat(extra));
          }
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleBlur", function (value) {
        var _this$props4 = _this.props,
            onBlur = _this$props4.onBlur,
            validateOnBlur = _this$props4.validateOnBlur,
            disabled = _this$props4.disabled;

        if (validateOnBlur && !disabled) {
          _this.validateField();
        }

        if (onBlur && onBlur !== _noop2.default) {
          onBlur(value);
        }
      });
      _this.state = {
        value: _formUtils.default.getFieldValue((0, _assertThisInitialized2.default)(_this), CustomField.fieldType),
        validateStatus: props.validateStatus,
        validateHelp: props.validateHelp
      };
      return _this;
    }

    (0, _createClass2.default)(FormField, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$props5 = this.props,
            disabled = _this$props5.disabled,
            name = _this$props5.name,
            schemas = _this$props5.schemas,
            validateStatus = _this$props5.validateStatus,
            validateHelp = _this$props5.validateHelp,
            context = _this$props5.context;
        var value = this.state.value;
        var setFormSchemas = context.setFormSchemas,
            initFormModel = context.initFormModel,
            setCustomErrors = context.setCustomErrors,
            initFormDisabled = context.initFormDisabled;

        if (setFormSchemas && schemas) {
          setFormSchemas((0, _defineProperty2.default)({}, name, schemas));
        }

        if (initFormModel) {
          initFormModel((0, _defineProperty2.default)({}, name, value));
        }

        if (initFormDisabled && disabled) {
          initFormDisabled(name);
        }

        if (setCustomErrors) {
          setCustomErrors((0, _defineProperty2.default)({}, name, {
            status: validateStatus || '',
            help: validateHelp || ''
          }));
        }
      }
    }, {
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        return !nextProps.context.validating;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var value = this.state.value;
        var _this$props6 = this.props,
            validateStatus = _this$props6.validateStatus,
            validateHelp = _this$props6.validateHelp,
            name = _this$props6.name,
            disabled = _this$props6.disabled,
            context = _this$props6.context;
        var getFormModel = context.getFormModel,
            setCustomErrors = context.setCustomErrors,
            getFieldError = context.getFieldError,
            setFormModel = context.setFormModel,
            setFormDisabled = context.setFormDisabled; // Control value

        if (getFormModel && getFormModel !== _noop2.default && setFormModel && !disabled) {
          var Model = getFormModel();

          if (!(0, _isEqual2.default)(Model[name], value)) {
            setFormModel((0, _defineProperty2.default)({}, name, value));
          }
        } // Custom validate


        if (setCustomErrors) {
          setCustomErrors((0, _defineProperty2.default)({}, name, {
            status: validateStatus || '',
            help: validateHelp || ''
          }));
        } // Format validate


        var fieldError = getFieldError ? getFieldError(name) : null;
        this.setValidateStatus(fieldError); // Toggle disabled

        if (setFormDisabled) {
          setFormDisabled(name, disabled);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var _this$props7 = this.props,
            name = _this$props7.name,
            context = _this$props7.context;
        var deleteFormModel = context.deleteFormModel;

        if (deleteFormModel) {
          deleteFormModel(name);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props8 = this.props,
            value = _this$props8.value,
            defaultValue = _this$props8.defaultValue,
            className = _this$props8.className,
            controlClassName = _this$props8.controlClassName,
            style = _this$props8.style,
            label = _this$props8.label,
            name = _this$props8.name,
            help = _this$props8.help,
            onChange = _this$props8.onChange,
            schemas = _this$props8.schemas,
            validateIcon = _this$props8.validateIcon,
            validateOnChange = _this$props8.validateOnChange,
            validateOnBlur = _this$props8.validateOnBlur,
            direction = _this$props8.direction,
            restProps = (0, _objectWithoutProperties2.default)(_this$props8, ["value", "defaultValue", "className", "controlClassName", "style", "label", "name", "help", "onChange", "schemas", "validateIcon", "validateOnChange", "validateOnBlur", "direction"]);
        var _this$state2 = this.state,
            validateStatus = _this$state2.validateStatus,
            stateValue = _this$state2.value;

        var _this$generateStatus = this.generateStatus(),
            statusClass = _this$generateStatus.statusClass,
            helpContent = _this$generateStatus.helpContent;

        return _react.default.createElement(_Layout.Field, {
          className: (0, _classnames.default)(className, (0, _kebabCase2.default)(CustomField.fieldType), {
            'has-help': helpContent
          }),
          style: style
        }, label ? _react.default.createElement("label", {
          className: (0, _classnames.default)('label', {
            'textarea-label': CustomField.fieldType === 'TextAreaField',
            'group-label': (CustomField.fieldType === 'CheckboxGroupField' || CustomField.fieldType === 'RadioGroupField') && direction === 'column'
          }),
          htmlFor: name
        }, label) : null, _react.default.createElement(CustomField, (0, _extends2.default)({}, (0, _omit2.default)(restProps, 'validateStatus', 'validateHelp', 'context'), {
          name: name,
          label: label,
          onBlur: this.handleBlur,
          onChange: this.handleChange,
          value: stateValue,
          className: (0, _classnames.default)(statusClass, controlClassName),
          validateStatus: validateStatus,
          validateIcon: validateIcon,
          direction: direction,
          ref: function ref(n) {
            _this2.fieldRef = n;
          }
        })), helpContent ? _react.default.createElement("div", {
          className: (0, _classnames.default)('help', statusClass)
        }, helpContent) : null);
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        var nextState = {};
        var value = prevState.value; // Control the value of SelectField

        if ('value' in nextProps && CustomField.fieldType === 'SelectField') {
          var nextValue = nextProps.value;

          if (nextProps.multi) {
            nextValue = (0, _isArray2.default)(nextValue) && nextValue.length > 0 ? nextValue : [];
          } else {
            nextValue = (0, _isNumber2.default)(nextValue) ? nextValue : nextValue || '';
          }

          if (!(0, _isEqual2.default)(nextValue, value)) {
            nextState.value = nextValue;
          }
        } // Control the value of SliderField / NumberField


        if ('value' in nextProps && ['NumberField', 'SliderField'].includes(CustomField.fieldType)) {
          var _nextValue = nextProps.value;
          _nextValue = (0, _isNumber2.default)(_nextValue) ? _nextValue : nextProps.min;

          if (!(0, _isEqual2.default)(_nextValue, value)) {
            nextState.value = _nextValue;
          }
        } // Control the value of Other Fields


        if ('value' in nextProps) {
          var _nextValue2 = nextProps.value;

          if (!(0, _isEqual2.default)(_nextValue2, value)) {
            nextState.value = _nextValue2;
          }
        } // Control the validateHelp of all Fields


        if ('validateHelp' in nextProps) {
          var validateHelp = nextProps.validateHelp;
          nextState.validateHelp = validateHelp;
        }

        return nextState;
      }
    }]);
    return FormField;
  }(_react.Component);

  (0, _defineProperty2.default)(FormField, "propTypes", {
    // Styles
    className: _propTypes.default.string,
    controlClassName: _propTypes.default.string,
    style: _propTypes.default.object,
    // Field Props
    name: _propTypes.default.string.isRequired,
    label: _propTypes.default.node,
    help: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.element, _propTypes.default.string]),
    value: _propTypes.default.any,
    defaultValue: _propTypes.default.any,
    readOnly: _propTypes.default.bool,
    disabled: _propTypes.default.bool,
    min: _propTypes.default.number,
    multi: _propTypes.default.bool,
    // Handler
    onChange: _propTypes.default.func,
    onBlur: _propTypes.default.func,
    // Validation
    schemas: _propTypes.default.arrayOf(_propTypes.default.object),
    validateStatus: _propTypes.default.string,
    validateHelp: _propTypes.default.string,
    validateIcon: _propTypes.default.bool,
    validateOnChange: _propTypes.default.bool,
    validateOnBlur: _propTypes.default.bool,
    // Extra
    direction: _propTypes.default.string,
    // Context
    context: _propTypes.default.object
  });
  (0, _defineProperty2.default)(FormField, "defaultProps", {
    // Field Props
    defaultValue: '',
    label: ' ',
    help: CustomField.fieldHelp || '',
    readOnly: false,
    disabled: false,
    // Handler
    onChange: _noop2.default,
    onBlur: _noop2.default,
    // Validation
    validateStatus: '',
    validateHelp: '',
    validateIcon: false,
    validateOnChange: false,
    validateOnBlur: false,
    // Context
    context: {}
  });
  return (0, _context.withFormContext)(FormField);
};

var _default = getFormField;
exports.default = _default;