"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _isNaN2 = _interopRequireDefault(require("lodash/isNaN"));

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _round2 = _interopRequireDefault(require("lodash/round"));

var _reduce2 = _interopRequireDefault(require("lodash/reduce"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Pagination = _interopRequireDefault(require("../Pagination"));

var _Loading = _interopRequireDefault(require("../Loading"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _Button = require("../Button");

var _LocaleProvider = require("../LocaleProvider");

var _Layout = require("../Layout");

var _TableHeader = _interopRequireDefault(require("./TableHeader"));

var _TableRow = _interopRequireDefault(require("./TableRow"));

var _constants = require("./constants");

var setColumnsPosition = function setColumnsPosition(columns, pos) {
  var cols = columns.filter(function (c) {
    return c.fixed === pos;
  });
  cols = pos === 'right' ? cols.reverse() : cols;
  cols.forEach(function (c, index) {
    var prevCol = cols[index - 1];
    /* eslint-disable */

    c[pos] = index === 0 ? 0 : prevCol.width + prevCol[pos];
  });
};

var GridTable =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(GridTable, _React$Component);

  function GridTable() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, GridTable);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(GridTable)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {});
    return _this;
  }

  (0, _createClass2.default)(GridTable, [{
    key: "renderPaginationLeft",
    value: function renderPaginationLeft() {
      var _this$props = this.props,
          pagination = _this$props.pagination,
          selectedRowKeys = _this$props.selectedRowKeys,
          onCancelSelected = _this$props.onCancelSelected;
      var total = pagination.total;

      if (!(0, _isEmpty2.default)(selectedRowKeys)) {
        return _react.default.createElement("div", {
          className: "selected-help"
        }, _LocaleProvider.locale.get('SELECTED_HELP', {
          count: selectedRowKeys.length
        }), _react.default.createElement(_Button.Button, {
          type: "text",
          onClick: onCancelSelected
        }, _LocaleProvider.locale.get('CANCEL_SELECT')));
      }

      return _react.default.createElement("div", null, _LocaleProvider.locale.get('TOTAL_SUMMARY', {
        total: total
      }));
    }
  }, {
    key: "renderPagination",
    value: function renderPagination() {
      var pagination = this.props.pagination;

      if (!pagination) {
        return null;
      }

      var props = (0, _omit2.default)(pagination, ['onCancelSelected']);
      return _react.default.createElement("div", {
        className: "grid-table-footer"
      }, _react.default.createElement(_Layout.Level, {
        className: "pagination-bar"
      }, _react.default.createElement(_Layout.LevelLeft, null, this.renderPaginationLeft()), _react.default.createElement(_Layout.LevelRight, null, _react.default.createElement(_Pagination.default, props))));
    }
  }, {
    key: "renderPlaceholder",
    value: function renderPlaceholder() {
      var _this$props2 = this.props,
          loading = _this$props2.loading,
          dataSource = _this$props2.dataSource,
          emptyPlaceholder = _this$props2.emptyPlaceholder;

      if (loading) {
        return _react.default.createElement(_Loading.default, {
          size: "large"
        });
      }

      var icon = emptyPlaceholder.icon,
          _emptyPlaceholder$tex = emptyPlaceholder.text,
          text = _emptyPlaceholder$tex === void 0 ? _LocaleProvider.locale.get('NO_AVAILABLE_DATA') : _emptyPlaceholder$tex;

      if ((0, _isEmpty2.default)(dataSource)) {
        return _react.default.createElement("div", {
          className: "empty-placeholder"
        }, icon && _react.default.createElement("p", null, _react.default.createElement(_Icon.default, {
          name: icon,
          size: 48
        })), text);
      }

      return null;
    }
  }, {
    key: "renderTableBody",
    value: function renderTableBody() {
      var _this2 = this;

      var _this$props3 = this.props,
          dataSource = _this$props3.dataSource,
          loading = _this$props3.loading,
          rowKey = _this$props3.rowKey;

      if (loading || (0, _isEmpty2.default)(dataSource)) {
        return _react.default.createElement("div", {
          className: "grid-table-block"
        });
      }

      return _react.default.createElement("div", {
        className: "grid-table-body"
      }, dataSource.map(function (row) {
        return _react.default.createElement(_TableRow.default, (0, _extends2.default)({}, _this2.props, _this2.state, {
          key: "table-row-".concat(row[rowKey]),
          row: row
        }));
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          className = _this$props4.className,
          loading = _this$props4.loading,
          expandedRowRender = _this$props4.expandedRowRender;
      return _react.default.createElement("div", {
        className: (0, _classnames.default)('grid-table', className)
      }, this.renderPlaceholder(), _react.default.createElement("div", {
        className: (0, _classnames.default)('grid-table-content', {
          'table-with-expand': !loading && expandedRowRender
        })
      }, _react.default.createElement(_TableHeader.default, (0, _extends2.default)({}, this.props, this.state)), this.renderTableBody()), this.renderPagination());
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      var columns = nextProps.columns,
          selectType = nextProps.selectType,
          selectOptions = nextProps.selectOptions,
          expandedRowRender = nextProps.expandedRowRender,
          expandOptions = nextProps.expandOptions;
      var allColumns = columns;

      if (selectType) {
        var selectColumn = Object.assign({}, _constants.SELECT_OPTIONS, selectOptions);
        allColumns = [selectColumn].concat(columns);
      }

      if (expandedRowRender) {
        var expandColumn = Object.assign({}, _constants.EXPAND_OPTIONS, expandOptions);
        allColumns = allColumns.concat([expandColumn]);
      }

      var totalWidth = (0, _reduce2.default)(allColumns, function (total, c) {
        return total + c.width;
      }, 0);
      setColumnsPosition(allColumns, 'left');
      setColumnsPosition(allColumns, 'right');
      return {
        gridTemplateColumns: allColumns.map(function (_ref) {
          var width = _ref.width,
              fixed = _ref.fixed;

          if (!(0, _isNaN2.default)(totalWidth)) {
            return fixed ? "".concat(width, "px") : "minmax(".concat(width, "px, ").concat((0, _round2.default)(width / totalWidth * 100), "%)");
          }

          return width ? "".concat(width, "px") : '1fr';
        }).join(' '),
        columns: allColumns
      };
    }
  }]);
  return GridTable;
}(_react.default.Component);

exports.default = GridTable;
(0, _defineProperty2.default)(GridTable, "propTypes", {
  className: _propTypes.default.string,
  rowKey: _propTypes.default.string,
  dataSource: _propTypes.default.array,
  columns: _propTypes.default.array,
  rowClassName: _propTypes.default.string,
  loading: _propTypes.default.bool,
  hideHeader: _propTypes.default.bool,
  fixHeader: _propTypes.default.bool,
  selectType: _propTypes.default.string,
  selectOptions: _propTypes.default.object,
  selectedRowKeys: _propTypes.default.array,
  disabledRowKeys: _propTypes.default.array,
  onSelect: _propTypes.default.func,
  onCancelSelected: _propTypes.default.func,
  defaultExpandedRowKeys: _propTypes.default.array,
  expandOptions: _propTypes.default.object,
  expandedRowKeys: _propTypes.default.array,
  expandedRowRender: _propTypes.default.func,
  onExpand: _propTypes.default.func,
  pagination: _propTypes.default.object,
  emptyPlaceholder: _propTypes.default.object,
  onSort: _propTypes.default.func,
  onFilterChange: _propTypes.default.func
});
(0, _defineProperty2.default)(GridTable, "defaultProps", {
  dataSource: [],
  columns: [],
  hideHeader: false,
  fixHeader: true,
  selectedRowKeys: [],
  disabledRowKeys: [],
  defaultExpandedRowKeys: [],
  expandedRowKeys: [],
  expandOptions: {},
  selectOptions: {},
  emptyPlaceholder: {
    icon: 'laptop'
  },
  onSelect: function onSelect() {},
  onCancelSelected: function onCancelSelected() {},
  onExpand: function onExpand() {},
  onSort: function onSort() {},
  onFilterChange: function onFilterChange() {}
});