"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _every2 = _interopRequireDefault(require("lodash/every"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _Dropdown = _interopRequireDefault(require("../Dropdown"));

var _Menu = require("../Menu");

var _Checkbox = require("../Checkbox");

var _constants = require("./constants");

var MenuItem = _Menu.Menu.MenuItem;

var TableHeader =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(TableHeader, _React$Component);

  function TableHeader() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, TableHeader);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TableHeader)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      filters: {}
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getFilterKey", function (col) {
      return col.filterKey || col.dataIndex;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onSelectChange", function (e, checked) {
      var _this$props = _this.props,
          onSelect = _this$props.onSelect,
          rowKey = _this$props.rowKey;

      var data = _this.getSelectableData();

      var selectedRowKeys = checked ? data.map(function (item) {
        return item[rowKey];
      }) : [];
      var selectedRows = checked ? data : [];
      onSelect(selectedRowKeys, selectedRows);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onClickFilterItem", function (e, value, filterKey) {
      var filters = _this.state.filters;
      var onFilterChange = _this.props.onFilterChange;
      filters[filterKey] = value;

      _this.setState({
        filters: filters
      }, function () {
        onFilterChange(filters);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onClickSortIcon", function (sortKey, sortOrder) {
      var onSort = _this.props.onSort;
      onSort(sortKey, sortOrder === 'asc' ? 'desc' : 'asc');
    });
    return _this;
  }

  (0, _createClass2.default)(TableHeader, [{
    key: "getSelectableData",
    value: function getSelectableData() {
      var _this$props2 = this.props,
          dataSource = _this$props2.dataSource,
          disabledRowKeys = _this$props2.disabledRowKeys,
          rowKey = _this$props2.rowKey;
      return (0, _isEmpty2.default)(disabledRowKeys) ? dataSource : dataSource.filter(function (item) {
        return disabledRowKeys.indexOf(item[rowKey]) < 0;
      });
    }
  }, {
    key: "isSelectedAll",
    value: function isSelectedAll() {
      var _this$props3 = this.props,
          selectType = _this$props3.selectType,
          selectedRowKeys = _this$props3.selectedRowKeys,
          rowKey = _this$props3.rowKey;

      if (selectedRowKeys.length === 0 || selectType === 'radio') {
        return false;
      }

      var data = this.getSelectableData();
      return (0, _every2.default)(data, function (item) {
        return selectedRowKeys.indexOf(item[rowKey]) > -1;
      });
    }
  }, {
    key: "renderSortColumn",
    value: function renderSortColumn(col) {
      var _this2 = this;

      if (!col.sortable) {
        return null;
      }

      var sortKey = col.sortKey,
          dataIndex = col.dataIndex,
          sortOrder = col.sortOrder;
      var iconProps = _constants.SORT_ICON[col.sortOrder || 'default'];
      return _react.default.createElement("div", {
        className: "table-thead-sort",
        onClick: function onClick() {
          return _this2.onClickSortIcon(sortKey || dataIndex, sortOrder);
        }
      }, _react.default.createElement(_Icon.default, (0, _extends2.default)({}, iconProps, {
        changeable: true
      })));
    }
  }, {
    key: "renderFilterContent",
    value: function renderFilterContent(col) {
      var _this3 = this;

      var filters = col.filters,
          filteredValue = col.filteredValue;

      if ((0, _isEmpty2.default)(filters)) {
        return null;
      }

      return _react.default.createElement(_Menu.Menu, {
        selectedKey: filteredValue,
        onClick: function onClick(e, value) {
          return _this3.onClickFilterItem(e, value, _this3.getFilterKey(col));
        }
      }, filters.map(function (filter) {
        return _react.default.createElement(MenuItem, {
          key: filter.value
        }, filter.text, filteredValue === filter.value && _react.default.createElement(_Icon.default, {
          name: "check",
          type: "coloured"
        }));
      }));
    }
  }, {
    key: "renderFilterColumn",
    value: function renderFilterColumn(col) {
      var filters = this.state.filters;

      if ((0, _isEmpty2.default)(col.filters)) {
        return null;
      }

      var filterKey = this.getFilterKey(col);
      var iconType = (0, _isUndefined2.default)(filters[filterKey]) ? 'dark' : 'coloured';
      return _react.default.createElement("div", {
        className: "table-thead-filter"
      }, _react.default.createElement(_Dropdown.default, {
        className: "thead-filter",
        content: this.renderFilterContent(col),
        placement: "bottom"
      }, _react.default.createElement(_Icon.default, {
        name: "filter",
        changeable: true,
        type: iconType
      })));
    }
  }, {
    key: "renderSelection",
    value: function renderSelection(col) {
      var _this$props4 = this.props,
          selectType = _this$props4.selectType,
          selectedRowKeys = _this$props4.selectedRowKeys;

      if (selectType === 'radio' || col.key !== _constants.SELECT_COLUMN) {
        return null;
      }

      var hasSelected = selectedRowKeys.length > 0;
      var isSelectedAll = this.isSelectedAll();
      return _react.default.createElement(_Checkbox.Checkbox, {
        indeterminate: !isSelectedAll && hasSelected,
        checked: isSelectedAll,
        onChange: this.onSelectChange
      });
    }
  }, {
    key: "renderThead",
    value: function renderThead() {
      var _this4 = this;

      var columns = this.props.columns;
      return columns.map(function (col) {
        var _classnames;

        var fixed = col.fixed,
            sortable = col.sortable,
            filters = col.filters,
            key = col.key,
            dataIndex = col.dataIndex,
            title = col.title,
            align = col.align;
        var style = fixed ? (0, _defineProperty2.default)({}, fixed, col[fixed]) : {};
        return _react.default.createElement("div", {
          className: (0, _classnames2.default)('table-thead', (_classnames = {}, (0, _defineProperty2.default)(_classnames, "table-col-fixed-".concat(fixed), fixed), (0, _defineProperty2.default)(_classnames, "table-col-align-".concat(align), align), (0, _defineProperty2.default)(_classnames, 'table-thead-hover', sortable || !(0, _isEmpty2.default)(filters)), (0, _defineProperty2.default)(_classnames, 'table-icon', key === _constants.SELECT_COLUMN), _classnames)),
          key: "thead-".concat(key || dataIndex),
          style: style
        }, _this4.renderSelection(col), title, _this4.renderSortColumn(col), _this4.renderFilterColumn(col));
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props5 = this.props,
          gridTemplateColumns = _this$props5.gridTemplateColumns,
          fixHeader = _this$props5.fixHeader,
          hideHeader = _this$props5.hideHeader,
          dataSource = _this$props5.dataSource;

      if (hideHeader) {
        return null;
      }

      return _react.default.createElement("div", {
        className: (0, _classnames2.default)('grid-table-header', {
          'table-header-fixed': fixHeader && dataSource.length > 2
        }),
        style: {
          gridTemplateColumns: gridTemplateColumns
        }
      }, this.renderThead());
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(_ref2) {
      var columns = _ref2.columns;
      var filters = {};
      columns.forEach(function (col) {
        var filteredValue = col.filteredValue,
            filterKey = col.filterKey,
            dataIndex = col.dataIndex;
        var key = filterKey || dataIndex;

        if (filteredValue) {
          filters[key] = filteredValue;
        }
      });
      return {
        filters: filters
      };
    }
  }]);
  return TableHeader;
}(_react.default.Component);

exports.default = TableHeader;
(0, _defineProperty2.default)(TableHeader, "propTypes", {
  rowKey: _propTypes.default.string.isRequired,
  dataSource: _propTypes.default.array,
  columns: _propTypes.default.array,
  fixHeader: _propTypes.default.bool,
  hideHeader: _propTypes.default.bool,
  selectType: _propTypes.default.string,
  selectedRowKeys: _propTypes.default.array,
  disabledRowKeys: _propTypes.default.array,
  onSelect: _propTypes.default.func,
  onSort: _propTypes.default.func,
  onFilterChange: _propTypes.default.func,
  gridTemplateColumns: _propTypes.default.string
});