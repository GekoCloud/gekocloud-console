"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _isNaN2 = _interopRequireDefault(require("lodash/isNaN"));

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Button = _interopRequireDefault(require("../Button/Button"));

var _Icon = _interopRequireDefault(require("../Icon"));

var InputNumber =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(InputNumber, _Component);

  function InputNumber(props) {
    var _this;

    (0, _classCallCheck2.default)(this, InputNumber);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(InputNumber).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setBtnStatus", function (value) {
      var _this$props = _this.props,
          max = _this$props.max,
          min = _this$props.min;

      _this.setState({
        isMax: value >= max,
        isMin: value <= min
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "increase", function () {
      var _this$props2 = _this.props,
          step = _this$props2.step,
          max = _this$props2.max,
          formatter = _this$props2.formatter,
          upHandler = _this$props2.upHandler,
          onChange = _this$props2.onChange;
      var disabled = _this.state.disabled;
      if (disabled) return;
      var value = _this.state.value;
      var newValue = Number(value) + Number(step);
      if (newValue > max) return;

      _this.setState({
        value: newValue
      }, function () {
        _this.input.value = formatter(newValue);

        _this.setBtnStatus(newValue);

        upHandler(newValue);
        onChange(newValue);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "decrease", function () {
      var _this$props3 = _this.props,
          step = _this$props3.step,
          min = _this$props3.min,
          formatter = _this$props3.formatter,
          downHandler = _this$props3.downHandler,
          onChange = _this$props3.onChange;
      var disabled = _this.state.disabled;
      if (disabled) return;
      var value = _this.state.value;
      var newValue = Number(value) - Number(step);
      if (newValue < min) return;

      _this.setState({
        value: newValue
      }, function () {
        _this.input.value = formatter(newValue);

        _this.setBtnStatus(newValue);

        downHandler(newValue);
        onChange(newValue);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleKeyDown", function (e) {
      if (e.keyCode === 38) {
        e.preventDefault();

        _this.increase();
      } else if (e.keyCode === 40) {
        e.preventDefault();

        _this.decrease();
      }

      var onKeyDown = _this.props.onKeyDown;

      if (onKeyDown && onKeyDown !== _noop2.default) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        onKeyDown.apply(void 0, [e].concat(args));
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleBlur", function () {
      var _this$props4 = _this.props,
          propsValue = _this$props4.value,
          formatter = _this$props4.formatter,
          onBlur = _this$props4.onBlur,
          onChange = _this$props4.onChange;
      var stateValue = _this.state.value;
      var value = _this.input.value;

      if (value === '') {
        var _this$props5 = _this.props,
            min = _this$props5.min,
            defaultValue = _this$props5.defaultValue;
        var newValue;

        if ((0, _isNumber2.default)(propsValue)) {
          newValue = propsValue;
        } else if ((0, _isNumber2.default)(min)) {
          newValue = min;
        } else if ((0, _isNumber2.default)(defaultValue)) {
          newValue = defaultValue;
        }

        _this.setState({
          value: newValue
        }, function () {
          _this.input.value = formatter(newValue);

          _this.setBtnStatus(newValue);

          onChange(newValue);
          onBlur(newValue);
        });

        return;
      }

      if (Number(value) !== stateValue) {
        _this.handleInputChange(Number(value), true);
      } else {
        onBlur(Number(value));
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleInputChange", function (value, afterBlur) {
      var _this$props6 = _this.props,
          formatter = _this$props6.formatter,
          onChange = _this$props6.onChange,
          onBlur = _this$props6.onBlur;
      var stateValue = _this.state.value;
      var newValue;
      var _this$props7 = _this.props,
          max = _this$props7.max,
          min = _this$props7.min,
          step = _this$props7.step;

      if (!(0, _isNumber2.default)(value) || value % 1 !== 0) {
        newValue = stateValue;
      } else if (value > max) {
        newValue = max;
      } else if (value < min) {
        newValue = min;
      } else if (value % step !== 0) {
        newValue = value + step - value % step;
      } else {
        newValue = value;
      }

      _this.setState({
        value: newValue
      }, function () {
        _this.input.value = formatter(newValue);
        onChange(newValue);

        _this.setBtnStatus(newValue);

        if (afterBlur) onBlur(newValue);
      });
    });
    _this.state = {
      value: props.value || props.defaultValue || props.min,
      disabled: props.disabled,
      isMin: false,
      isMax: false
    };
    return _this;
  }

  (0, _createClass2.default)(InputNumber, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var value = this.state.value;
      this.setBtnStatus(value);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var formatter = this.props.formatter;
      var value = this.state.value;
      this.input.value = formatter(value);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props8 = this.props,
          className = _this$props8.className,
          prefixCls = _this$props8.prefixCls,
          style = _this$props8.style,
          name = _this$props8.name,
          min = _this$props8.min,
          max = _this$props8.max,
          step = _this$props8.step,
          disabled = _this$props8.disabled,
          readOnly = _this$props8.readOnly,
          showButton = _this$props8.showButton,
          isMini = _this$props8.isMini,
          formatter = _this$props8.formatter,
          validateStatus = _this$props8.validateStatus;
      var _this$state = this.state,
          isMin = _this$state.isMin,
          isMax = _this$state.isMax,
          value = _this$state.value;
      var inputDisplayValueFormat = formatter(value);
      var statusClass = '';

      switch (validateStatus) {
        case 'warning':
        case 'success':
          statusClass = "is-".concat(validateStatus);
          break;

        case 'error':
          statusClass = 'is-danger';
          break;

        default:
          break;
      }

      return _react.default.createElement("div", {
        className: (0, _classnames.default)(className, prefixCls, {
          'has-addons': showButton,
          'is-mini': isMini
        }),
        style: style
      }, _react.default.createElement("input", {
        ref: function ref(n) {
          _this2.input = n;
        },
        defaultValue: inputDisplayValueFormat,
        type: "number",
        min: min,
        max: max,
        name: name,
        step: step,
        onKeyDown: this.handleKeyDown,
        className: "input ".concat(statusClass),
        readOnly: readOnly,
        disabled: disabled,
        onBlur: this.handleBlur
      }), showButton && _react.default.createElement("span", {
        className: "".concat(prefixCls, "-controls")
      }, _react.default.createElement(_Button.default, {
        key: "minus",
        className: "btn-minus",
        onClick: this.decrease,
        disabled: disabled || readOnly || isMin
      }, isMini ? _react.default.createElement(_Icon.default, {
        name: "chevron-down",
        size: 12
      }) : _react.default.createElement(_Icon.default, {
        name: "substract",
        size: 20
      })), _react.default.createElement(_Button.default, {
        key: "plus",
        className: "button btn-plus",
        onClick: this.increase,
        disabled: disabled || readOnly || isMax
      }, isMini ? _react.default.createElement(_Icon.default, {
        name: "chevron-up",
        size: 12
      }) : _react.default.createElement(_Icon.default, {
        name: "add",
        size: 20
      }))));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var stateValue = prevState.value;
      var value = nextProps.value,
          max = nextProps.max,
          min = nextProps.min;
      var newVal = 'value' in nextProps ? Number(value) : Number(stateValue);

      if (!(0, _isNaN2.default)(newVal) && newVal !== stateValue && newVal >= nextProps.min && newVal <= nextProps.max) {
        return {
          value: newVal,
          isMax: value >= max,
          isMin: value <= min
        };
      }

      return null;
    }
  }]);
  return InputNumber;
}(_react.Component);

(0, _defineProperty2.default)(InputNumber, "propTypes", {
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  name: _propTypes.default.string,
  min: _propTypes.default.number,
  max: _propTypes.default.number,
  value: _propTypes.default.number,
  defaultValue: _propTypes.default.number,
  step: _propTypes.default.number,
  readOnly: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  showButton: _propTypes.default.bool,
  validateStatus: _propTypes.default.string,
  // Handler
  onChange: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  onKeyDown: _propTypes.default.func,
  upHandler: _propTypes.default.func,
  downHandler: _propTypes.default.func,
  formatter: _propTypes.default.func,
  isMini: _propTypes.default.bool,
  prefixCls: _propTypes.default.string
});
(0, _defineProperty2.default)(InputNumber, "defaultProps", {
  min: Number.MIN_SAFE_INTEGER || -9007199254740991,
  max: Number.MAX_SAFE_INTEGER || 9007199254740991,
  step: 1,
  prefixCls: 'input-number',
  onChange: _noop2.default,
  onBlur: _noop2.default,
  onKeyDown: _noop2.default,
  upHandler: _noop2.default,
  downHandler: _noop2.default,
  showButton: true,
  disabled: false,
  readOnly: false,
  isMini: false,
  formatter: function formatter(val) {
    return val;
  }
});
var _default = InputNumber;
exports.default = _default;