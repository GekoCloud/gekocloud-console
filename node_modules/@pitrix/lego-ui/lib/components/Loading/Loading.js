"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _isNaN2 = _interopRequireDefault(require("lodash/isNaN"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _LocaleProvider = require("../LocaleProvider");

var _LoadingIcon = _interopRequireDefault(require("./LoadingIcon"));

var sizeObj = {
  small: 20,
  medium: 32,
  large: 48
};

var Loading =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Loading, _Component);

  function Loading(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Loading);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Loading).call(this, props));
    _this.state = {
      spinning: props.spinning
    };
    return _this;
  }

  (0, _createClass2.default)(Loading, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var _this2 = this;

      var prevSpinning = prevState.spinning;
      var _this$props = this.props,
          spinning = _this$props.spinning,
          delay = _this$props.delay;

      if (this.debounceTimeout) {
        clearTimeout(this.debounceTimeout);
      }

      if (prevSpinning && !spinning) {
        this.debounceTimeout = window.setTimeout(function () {
          return _this2.setState({
            spinning: spinning
          });
        }, 200);

        if (this.delayTimeout) {
          clearTimeout(this.delayTimeout);
        }
      } else if (spinning && delay && !(0, _isNaN2.default)(Number(delay))) {
        if (this.delayTimeout) {
          clearTimeout(this.delayTimeout);
        }

        this.delayTimeout = window.setTimeout(function () {
          return _this2.setState({
            spinning: spinning
          });
        }, delay);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.debounceTimeout) {
        clearTimeout(this.debounceTimeout);
      }

      if (this.delayTimeout) {
        clearTimeout(this.delayTimeout);
      }
    }
  }, {
    key: "isNestedPattern",
    value: function isNestedPattern() {
      var children = this.props.children;
      return children;
    }
  }, {
    key: "renderIndicator",
    value: function renderIndicator() {
      var _this$props2 = this.props,
          prefixCls = _this$props2.prefixCls,
          size = _this$props2.size,
          indicator = _this$props2.indicator;
      var dotClassName = "".concat(prefixCls, "-dot");

      if (_react.default.isValidElement(indicator)) {
        return _react.default.cloneElement(indicator, {
          className: (0, _classnames.default)(indicator.props.className, dotClassName)
        });
      }

      return _react.default.createElement("span", {
        className: (0, _classnames.default)(dotClassName, "".concat(prefixCls, "-dot-spin"))
      }, _react.default.createElement(_LoadingIcon.default, {
        name: "loading",
        type: "dark",
        size: (0, _isNumber2.default)(size) ? size : sizeObj[size],
        style: {
          display: 'block',
          margin: 'auto'
        }
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames;

      var _this$props3 = this.props,
          className = _this$props3.className,
          size = _this$props3.size,
          prefixCls = _this$props3.prefixCls,
          tip = _this$props3.tip,
          wrapperClassName = _this$props3.wrapperClassName,
          children = _this$props3.children,
          restProps = (0, _objectWithoutProperties2.default)(_this$props3, ["className", "size", "prefixCls", "tip", "wrapperClassName", "children"]);
      var spinning = this.state.spinning;
      var spinClassName = (0, _classnames.default)(prefixCls, (_classNames = {}, (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-sm"), size === 'small'), (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-lg"), size === 'large'), (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-spinning"), spinning), _classNames), className);
      var divProps = (0, _omit2.default)(restProps, ['spinning', 'delay', 'indicator']);

      var spinElement = _react.default.createElement("div", (0, _extends2.default)({}, divProps, {
        className: spinClassName
      }), this.renderIndicator(), tip ? _react.default.createElement("div", {
        className: "".concat(prefixCls, "-text")
      }, _LocaleProvider.locale.get(tip)) : null);

      if (this.isNestedPattern()) {
        var _classNames2;

        var animateClassName = "".concat(prefixCls, "-nested-loading");

        if (wrapperClassName) {
          animateClassName += " ".concat(wrapperClassName);
        }

        var containerClassName = (0, _classnames.default)((_classNames2 = {}, (0, _defineProperty2.default)(_classNames2, "".concat(prefixCls, "-container"), true), (0, _defineProperty2.default)(_classNames2, "".concat(prefixCls, "-blur"), spinning), _classNames2));
        return _react.default.createElement("div", (0, _extends2.default)({}, divProps, {
          className: animateClassName
        }), spinning && _react.default.createElement("div", {
          key: "loading"
        }, spinElement), _react.default.createElement("div", {
          className: containerClassName,
          key: "container"
        }, children));
      }

      return spinning && spinElement;
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var prevSpinning = prevState.spinning;
      var spinning = nextProps.spinning,
          delay = nextProps.delay;

      if (!prevSpinning && spinning && !delay) {
        return {
          spinning: spinning
        };
      }

      return null;
    }
  }]);
  return Loading;
}(_react.Component);

(0, _defineProperty2.default)(Loading, "propTypes", {
  prefixCls: _propTypes.default.string,
  delay: _propTypes.default.number,
  indicator: _propTypes.default.node,
  className: _propTypes.default.string,
  size: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  spinning: _propTypes.default.bool,
  children: _propTypes.default.element,
  tip: _propTypes.default.string,
  wrapperClassName: _propTypes.default.string
});
(0, _defineProperty2.default)(Loading, "defaultProps", {
  prefixCls: 'spin',
  spinning: true,
  size: 'medium',
  wrapperClassName: ''
});
var _default = Loading;
exports.default = _default;