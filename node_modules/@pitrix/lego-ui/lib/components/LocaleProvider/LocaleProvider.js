"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _merge2 = _interopRequireDefault(require("lodash/merge"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _legoLocale = _interopRequireDefault(require("@pitrix/lego-locale"));

var _index = _interopRequireDefault(require("../../locales/index"));

var LocaleProvider =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(LocaleProvider, _Component);

  function LocaleProvider() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, LocaleProvider);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(LocaleProvider)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      initDone: false
    });
    return _this;
  }

  (0, _createClass2.default)(LocaleProvider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          locales = _this$props.locales,
          ignoreWarnings = _this$props.ignoreWarnings;
      var curLocale = this.state.curLocale;

      _legoLocale.default.init({
        currentLocale: curLocale,
        locales: (0, _merge2.default)(_index.default, locales),
        ignoreWarnings: ignoreWarnings
      }).then(this.setState({
        initDone: true
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      var initDone = this.state.initDone;
      return initDone ? _react.default.Children.only(children) : null;
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      var stateCurLocale = state.currentLocale,
          initDone = state.initDone;
      var nextCurLocale = props.currentLocale,
          locales = props.locales,
          localeKey = props.localeKey;
      var curLocale = null;

      if (!(nextCurLocale in locales)) {
        curLocale = _legoLocale.default.determineLocale({
          cookieLocaleKey: localeKey,
          urlLocaleKey: localeKey
        });
      }

      if (nextCurLocale && nextCurLocale !== stateCurLocale) {
        curLocale = nextCurLocale;
      }

      if (initDone) {
        _legoLocale.default.setCurrentLocale(curLocale);

        document.cookie = "".concat(localeKey, "=").concat(curLocale, ";path=/");
      }

      return {
        curLocale: curLocale
      };
    }
  }]);
  return LocaleProvider;
}(_react.Component);

(0, _defineProperty2.default)(LocaleProvider, "locale", _legoLocale.default);
(0, _defineProperty2.default)(LocaleProvider, "propTypes", {
  // currentLocale: PropTypes.string,
  locales: _propTypes.default.object,
  // localeKey: PropTypes.string,
  children: _propTypes.default.node,
  ignoreWarnings: _propTypes.default.bool
});
(0, _defineProperty2.default)(LocaleProvider, "defaultProps", {
  locales: {},
  // localeKey: 'lang',
  ignoreWarnings: false
});
var _default = LocaleProvider;
exports.default = _default;