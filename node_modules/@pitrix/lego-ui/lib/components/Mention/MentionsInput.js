"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _differenceWith2 = _interopRequireDefault(require("lodash/differenceWith"));

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _values2 = _interopRequireDefault(require("lodash/values"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _classnames = _interopRequireDefault(require("classnames"));

var _mentionUtils = require("./mentionUtils");

var _SuggestionsOverlay = _interopRequireDefault(require("./SuggestionsOverlay"));

var _Highlighter = _interopRequireDefault(require("./Highlighter"));

var KEY = {
  TAB: 9,
  RETURN: 13,
  ESC: 27,
  UP: 38,
  DOWN: 40
};
var isComposing = false;

var MentionsInput =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(MentionsInput, _Component);

  function MentionsInput() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, MentionsInput);

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(MentionsInput)).call.apply(_getPrototypeOf2, [this].concat(_args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "queryId", 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "mentions", []);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "suggestions", {});
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      focusIndex: 0,
      selectionStart: null,
      selectionEnd: null,
      suggestions: {},
      caretPosition: null,
      suggestionsPosition: null
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setSelectionAfterMentionChange", function () {
      var _this$state = _this.state,
          setSelectionAfterMentionChange = _this$state.setSelectionAfterMentionChange,
          selectionStart = _this$state.selectionStart,
          selectionEnd = _this$state.selectionEnd;

      if (setSelectionAfterMentionChange) {
        _this.setState({
          setSelectionAfterMentionChange: false
        });

        _this.setSelection(selectionStart, selectionEnd);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setSelection", function (selectionStart, selectionEnd) {
      if (selectionStart === null || selectionEnd === null) return;
      var el = _this.inputRef;

      if (el.setSelectionRange) {
        el.setSelectionRange(selectionStart, selectionEnd);
      } else if (el.createTextRange) {
        var range = el.createTextRange();
        range.collapse(true);
        range.moveEnd('character', selectionEnd);
        range.moveStart('character', selectionStart);
        range.select();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getInputProps", function () {
      var _this$props = _this.props,
          readOnly = _this$props.readOnly,
          disabled = _this$props.disabled,
          singleLine = _this$props.singleLine,
          size = _this$props.size,
          inputStyle = _this$props.inputStyle;
      var restProps = (0, _omit2.default)(_this.props, 'singleLine', 'allowSpaceInQuery', 'markup', 'displayTransform', 'children', 'regex', 'valueLink', 'prefixCls', 'size', 'style', 'inputStyle', 'scrollable', 'maxVisible', 'showNoResults', 'noResultsText');
      var classname = singleLine ? "input is-".concat(size) : 'textarea';
      return (0, _objectSpread3.default)({}, restProps, {
        className: classname,
        value: _this.getPlainText(),
        style: inputStyle
      }, !readOnly && !disabled && {
        onChange: _this.handleChange,
        onSelect: _this.handleSelect,
        onKeyDown: _this.handleKeyDown,
        onBlur: _this.handleBlur,
        onCompositionStart: _this.handleCompositionStart,
        onCompositionEnd: _this.handleCompositionEnd,
        onScroll: _this.updateHighlighterScroll
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getPlainText", function () {
      var _this$props2 = _this.props,
          _this$props2$value = _this$props2.value,
          value = _this$props2$value === void 0 ? '' : _this$props2$value,
          markup = _this$props2.markup,
          displayTransform = _this$props2.displayTransform,
          regex = _this$props2.regex;
      return (0, _mentionUtils.getPlainText)(value, markup, displayTransform, regex);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDataProvider", function (data) {
      if (data instanceof Array) {
        return function (query) {
          var results = [];
          data.forEach(function (item) {
            var display = item.display || item.id;

            if (display.toLowerCase().indexOf(query.toLowerCase()) >= 0) {
              results.push(item);
            }
          });
          return results;
        };
      }

      return data;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getTriggerRegex", function (trigger) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (trigger instanceof RegExp) {
        return trigger;
      }

      var allowSpaceInQuery = options.allowSpaceInQuery;
      var escapedTriggerChar = (0, _mentionUtils.escapeRegex)(trigger);
      return new RegExp("(?:^|\\s)(".concat(escapedTriggerChar, "([^").concat(allowSpaceInQuery ? '' : '\\s').concat(escapedTriggerChar, "]*))$"));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "executeOnChange", function (event) {
      var _this$props3 = _this.props,
          onChange = _this$props3.onChange,
          valueLink = _this$props3.valueLink;
      var value = event.target.value;

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      onChange.apply(void 0, [event].concat(args));

      if (valueLink) {
        valueLink.requestChange.apply(valueLink, [value].concat(args));
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleChange", function (ev) {
      var _document = document,
          activeElement = _document.activeElement;
      var currentDocument = activeElement && activeElement.contentDocument || document;

      if (currentDocument.activeElement !== ev.target) {
        return;
      }

      var _this$props$value = _this.props.value,
          value = _this$props$value === void 0 ? '' : _this$props$value;
      var _this$props4 = _this.props,
          markup = _this$props4.markup,
          displayTransform = _this$props4.displayTransform,
          regex = _this$props4.regex;
      var _this$state2 = _this.state,
          selectionStart = _this$state2.selectionStart,
          selectionEnd = _this$state2.selectionEnd;
      var newPlainTextValue = ev.target.value;
      var start = ev.target.selectionStart;
      var end = ev.target.selectionEnd;
      var newValue = (0, _mentionUtils.applyChangeToValue)(value, markup, newPlainTextValue, selectionStart, selectionEnd, end, displayTransform, regex);
      newPlainTextValue = (0, _mentionUtils.getPlainText)(newValue, markup, displayTransform, regex);
      var setSelectionAfterMentionChange = false;
      var startOfMention = (0, _mentionUtils.findStartOfMentionInPlainText)(value, markup, start, displayTransform, regex);

      if (startOfMention !== undefined && selectionEnd > startOfMention) {
        start = startOfMention;
        end = start;
        setSelectionAfterMentionChange = true;
      }

      _this.setState({
        selectionStart: start,
        selectionEnd: end,
        setSelectionAfterMentionChange: setSelectionAfterMentionChange
      });

      var newMentions = (0, _mentionUtils.getMentions)(newValue, markup, displayTransform, regex);
      var diffMentions = (0, _differenceWith2.default)(_this.mentions, newMentions, _isEqual2.default);

      if (diffMentions.length) {
        var children = _this.props.children;
        var currMention = diffMentions[0];

        _react.default.Children.forEach(children, function (child) {
          if (child.props.type === currMention.type) {
            child.props.onRemove(currMention.id, currMention.display);
          }
        });
      }

      _this.mentions = (0, _toConsumableArray2.default)(newMentions);
      var eventMock = {
        target: {
          value: newValue
        }
      };

      _this.executeOnChange(eventMock, newValue, newPlainTextValue, _this.mentions);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleSelect", function (ev) {
      if (isComposing) return;
      var _ev$target = ev.target,
          selectionStart = _ev$target.selectionStart,
          selectionEnd = _ev$target.selectionEnd;
      var onSelect = _this.props.onSelect;

      _this.setState({
        selectionStart: selectionStart,
        selectionEnd: selectionEnd
      });

      var el = _this.inputRef;

      if (selectionStart === selectionEnd) {
        _this.updateMentionsQueries(el.value, selectionStart);
      } else {
        _this.clearSuggestions();
      }

      _this.updateHighlighterScroll();

      onSelect(ev);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleKeyDown", function (ev) {
      var suggestions = _this.state.suggestions;
      var suggestionsCount = (0, _mentionUtils.countSuggestions)(suggestions);
      var onKeyDown = _this.props.onKeyDown;
      var suggestionsComp = _this.suggestionsRef;

      if (suggestionsCount === 0 || !suggestionsComp) {
        onKeyDown(ev);
        return;
      }

      if ((0, _values2.default)(KEY).indexOf(ev.keyCode) >= 0) {
        ev.preventDefault();
      }

      switch (ev.keyCode) {
        case KEY.ESC:
          _this.clearSuggestions();

          break;

        case KEY.DOWN:
          _this.shiftFocus(+1);

          break;

        case KEY.UP:
          _this.shiftFocus(-1);

          break;

        case KEY.RETURN:
          _this.selectFocused();

          break;

        case KEY.TAB:
          _this.selectFocused();

          break;

        default:
          break;
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "shiftFocus", function (delta) {
      var _this$state3 = _this.state,
          suggestions = _this$state3.suggestions,
          focusIndex = _this$state3.focusIndex;
      var suggestionsCount = (0, _mentionUtils.countSuggestions)(suggestions);

      _this.setState({
        focusIndex: (suggestionsCount + focusIndex + delta) % suggestionsCount,
        scrollFocusedIntoView: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "selectFocused", function () {
      var _this$state4 = _this.state,
          suggestions = _this$state4.suggestions,
          focusIndex = _this$state4.focusIndex;

      var _getSuggestion = (0, _mentionUtils.getSuggestion)(suggestions, focusIndex),
          suggestion = _getSuggestion.suggestion,
          descriptor = _getSuggestion.descriptor;

      _this.addMention(suggestion, descriptor);

      _this.setState({
        focusIndex: 0
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleBlur", function (ev) {
      var clickedSuggestion = _this.suggestionsMouseDown;
      var onBlur = _this.props.onBlur;
      _this.suggestionsMouseDown = false;

      if (!clickedSuggestion) {
        _this.setState({
          selectionStart: null,
          selectionEnd: null
        });
      }

      window.setTimeout(function () {
        _this.updateHighlighterScroll();
      }, 1);
      onBlur(ev, clickedSuggestion);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleSuggestionsMouseDown", function () {
      _this.suggestionsMouseDown = true;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateSuggestionsPosition", function () {
      var _this$state5 = _this.state,
          caretPosition = _this$state5.caretPosition,
          suggestionsPosition = _this$state5.suggestionsPosition;

      if (!caretPosition || !_this.suggestionsRef) {
        return;
      }

      var suggestions = _reactDom.default.findDOMNode(_this.suggestionsRef);

      var highlighter = _reactDom.default.findDOMNode(_this.highlighterRef);

      if (!suggestions) {
        return;
      }

      var left = caretPosition.left - highlighter.scrollLeft;
      var position = {};

      if (left + suggestions.offsetWidth > _this.containerRef.offsetWidth) {
        position.right = 0;
      } else {
        position.left = left;
      }

      position.top = caretPosition.top - highlighter.scrollTop + 10;

      if ((0, _isEqual2.default)(position, suggestionsPosition)) {
        return;
      }

      _this.setState({
        suggestionsPosition: position
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateHighlighterScroll", function () {
      if (!_this.inputRef || !_this.highlighterRef) {
        return;
      }

      var input = _this.inputRef;

      var highlighter = _reactDom.default.findDOMNode(_this.highlighterRef);

      highlighter.scrollLeft = input.scrollLeft;
      highlighter.scrollTop = input.scrollTop;
      highlighter.height = input.height;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleCompositionStart", function () {
      isComposing = true;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleCompositionEnd", function () {
      isComposing = false;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateMentionsQueries", function (plainTextValue, caretPosition) {
      _this.queryId += 1;
      _this.suggestions = {};

      _this.setState({
        suggestions: {}
      });

      var _this$props$value2 = _this.props.value,
          value = _this$props$value2 === void 0 ? '' : _this$props$value2;
      var _this$props5 = _this.props,
          markup = _this$props5.markup,
          displayTransform = _this$props5.displayTransform,
          children = _this$props5.children,
          regex = _this$props5.regex;
      var positionInValue = (0, _mentionUtils.mapPlainTextIndex)(value, markup, caretPosition, 'NULL', displayTransform, regex);

      if (positionInValue === null) {
        return;
      }

      var substringStartIndex = (0, _mentionUtils.getEndOfLastMention)(value.substring(0, positionInValue), markup, displayTransform, regex);
      var substring = plainTextValue.substring(substringStartIndex, caretPosition);

      _react.default.Children.forEach(children, function (child) {
        if (!child) {
          return;
        }

        var regexp = _this.getTriggerRegex(child.props.trigger, _this.props);

        var match = substring.match(regexp);

        if (match) {
          var querySequenceStart = substringStartIndex + substring.indexOf(match[1], match.index);

          _this.queryData(match[2], child, querySequenceStart, querySequenceStart + match[1].length, plainTextValue);
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "clearSuggestions", function () {
      _this.queryId += 1;
      _this.suggestions = {};

      _this.setState({
        suggestions: {},
        focusIndex: 0
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "queryData", function (query, mentionDescriptor, querySequenceStart, querySequenceEnd, plainTextValue) {
      var provideData = _this.getDataProvider(mentionDescriptor.props.data);

      var syncResult = provideData(query, _this.updateSuggestions.bind(null, _this.queryId, mentionDescriptor, query, querySequenceStart, querySequenceEnd, plainTextValue));

      if (syncResult instanceof Array) {
        _this.updateSuggestions(_this.queryId, mentionDescriptor, query, querySequenceStart, querySequenceEnd, plainTextValue, syncResult);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateSuggestions", function (queryId, mentionDescriptor, query, querySequenceStart, querySequenceEnd, plainTextValue, suggestions) {
      if (queryId !== _this.queryId) return;
      var maxVisible = _this.props.maxVisible;
      _this.suggestions = (0, _objectSpread3.default)({}, _this.suggestions, (0, _defineProperty2.default)({}, mentionDescriptor.props.type, {
        query: query,
        mentionDescriptor: mentionDescriptor,
        querySequenceStart: querySequenceStart,
        querySequenceEnd: querySequenceEnd,
        results: suggestions.slice(0, maxVisible),
        plainTextValue: plainTextValue
      }));
      var focusIndex = _this.state.focusIndex;
      var suggestionsCount = (0, _mentionUtils.countSuggestions)(_this.suggestions);

      _this.setState({
        suggestions: _this.suggestions,
        focusIndex: focusIndex >= suggestionsCount ? Math.max(suggestionsCount - 1, 0) : focusIndex
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "addMention", function (suggestion, _ref) {
      var mentionDescriptor = _ref.mentionDescriptor,
          querySequenceStart = _ref.querySequenceStart,
          querySequenceEnd = _ref.querySequenceEnd,
          plainTextValue = _ref.plainTextValue;
      var _this$props6 = _this.props,
          _this$props6$value = _this$props6.value,
          value = _this$props6$value === void 0 ? '' : _this$props6$value,
          markup = _this$props6.markup,
          displayTransform = _this$props6.displayTransform,
          regex = _this$props6.regex;
      var start = (0, _mentionUtils.mapPlainTextIndex)(value, markup, querySequenceStart, 'START', displayTransform, regex);
      var end = start + querySequenceEnd - querySequenceStart;
      var insert = (0, _mentionUtils.makeMentionsMarkup)(markup, suggestion.id, suggestion.display, mentionDescriptor.props.type);

      if (mentionDescriptor.props.appendSpaceOnAdd) {
        insert += ' ';
      }

      var newValue = (0, _mentionUtils.spliceString)(value, start, end, insert);

      _this.inputRef.focus();

      var displayValue = displayTransform(suggestion.id, suggestion.display, mentionDescriptor.props.type);

      if (mentionDescriptor.props.appendSpaceOnAdd) {
        displayValue += ' ';
      }

      var newCaretPosition = querySequenceStart + displayValue.length;

      _this.setState({
        selectionStart: newCaretPosition,
        selectionEnd: newCaretPosition,
        setSelectionAfterMentionChange: true
      });

      var eventMock = {
        target: {
          value: newValue
        }
      };
      _this.mentions = (0, _mentionUtils.getMentions)(newValue, markup, displayTransform, regex);
      var newPlainTextValue = (0, _mentionUtils.spliceString)(plainTextValue, querySequenceStart, querySequenceEnd, displayValue);

      _this.executeOnChange(eventMock, newValue, newPlainTextValue, _this.mentions);

      var onAdd = mentionDescriptor.props.onAdd;

      if (onAdd) {
        onAdd(suggestion.id, suggestion.display);
      }

      _this.clearSuggestions();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isLoading", function () {
      var isLoading = false;
      var children = _this.props.children;

      _react.default.Children.forEach(children, function (child) {
        isLoading = isLoading || child && child.props.isLoading;
      });

      return isLoading;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderControl", function () {
      var singleLine = _this.props.singleLine;

      var inputProps = _this.getInputProps(!singleLine);

      return _react.default.createElement(_react.default.Fragment, null, _this.renderHighlighter(), singleLine ? _this.renderInput(inputProps) : _this.renderTextarea(inputProps));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderInput", function (props) {
      return _react.default.createElement("input", (0, _extends2.default)({
        type: "text",
        ref: function ref(el) {
          _this.inputRef = el;
        }
      }, props));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderTextarea", function (props) {
      return _react.default.createElement("textarea", (0, _extends2.default)({
        ref: function ref(el) {
          _this.inputRef = el;
        }
      }, props));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderSuggestionsOverlay", function () {
      var selectionStart = _this.state.selectionStart;

      if (!(0, _isNumber2.default)(selectionStart)) {
        return null;
      }

      var _this$state6 = _this.state,
          suggestionsPosition = _this$state6.suggestionsPosition,
          focusIndex = _this$state6.focusIndex,
          scrollFocusedIntoView = _this$state6.scrollFocusedIntoView,
          suggestions = _this$state6.suggestions;
      var _this$props7 = _this.props,
          prefixCls = _this$props7.prefixCls,
          showNoResults = _this$props7.showNoResults,
          noResultsText = _this$props7.noResultsText;
      return _react.default.createElement(_SuggestionsOverlay.default, {
        className: "".concat(prefixCls, "-suggestions"),
        position: suggestionsPosition,
        focusIndex: focusIndex,
        scrollFocusedIntoView: scrollFocusedIntoView,
        ref: function ref(el) {
          _this.suggestionsRef = el;
        },
        suggestions: suggestions,
        onSelect: _this.addMention,
        onMouseDown: _this.handleSuggestionsMouseDown,
        onMouseEnter: function onMouseEnter(index) {
          return _this.setState({
            focusIndex: index,
            scrollFocusedIntoView: false
          });
        },
        isLoading: _this.isLoading(),
        showNoResults: showNoResults,
        noResultsText: noResultsText,
        prefixCls: prefixCls
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderHighlighter", function () {
      var _this$state7 = _this.state,
          selectionStart = _this$state7.selectionStart,
          selectionEnd = _this$state7.selectionEnd;
      var _this$props8 = _this.props,
          markup = _this$props8.markup,
          displayTransform = _this$props8.displayTransform,
          children = _this$props8.children,
          value = _this$props8.value,
          prefixCls = _this$props8.prefixCls,
          regex = _this$props8.regex;
      return _react.default.createElement(_Highlighter.default, {
        ref: function ref(el) {
          _this.highlighterRef = el;
        },
        className: "".concat(prefixCls, "-highlighter"),
        value: value,
        markup: markup,
        displayTransform: displayTransform,
        selection: {
          start: selectionStart,
          end: selectionEnd
        },
        onCaretPositionChange: function onCaretPositionChange(position) {
          return _this.setState({
            caretPosition: position
          });
        },
        regex: regex,
        prefixCls: prefixCls
      }, children);
    });
    return _this;
  }

  (0, _createClass2.default)(MentionsInput, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.updateSuggestionsPosition();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.updateSuggestionsPosition();
      this.setSelectionAfterMentionChange();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props9 = this.props,
          prefixCls = _this$props9.prefixCls,
          style = _this$props9.style,
          singleLine = _this$props9.singleLine,
          scrollable = _this$props9.scrollable;
      var isMobileSafari = typeof navigator !== 'undefined' && /iPhone|iPad|iPod/i.test(navigator.userAgent);
      return _react.default.createElement("div", {
        ref: function ref(el) {
          _this2.containerRef = el;
        },
        style: style,
        className: (0, _classnames.default)("".concat(prefixCls, "-input"), "is-".concat(singleLine ? 'singleLine' : 'multiLine'), {
          'is-mobile-safari': isMobileSafari,
          'is-scrollable': scrollable
        })
      }, this.renderControl(), this.renderSuggestionsOverlay());
    }
  }]);
  return MentionsInput;
}(_react.Component);

(0, _defineProperty2.default)(MentionsInput, "propTypes", {
  singleLine: _propTypes.default.bool,
  allowSpaceInQuery: _propTypes.default.bool,
  markup: _propTypes.default.string,
  value: _propTypes.default.string,
  readOnly: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  displayTransform: _propTypes.default.func,
  onKeyDown: _propTypes.default.func,
  onSelect: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  onChange: _propTypes.default.func,
  children: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.arrayOf(_propTypes.default.element)]).isRequired,
  regex: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.instanceOf(RegExp)]),
  valueLink: _propTypes.default.object,
  prefixCls: _propTypes.default.string,
  style: _propTypes.default.object,
  inputStyle: _propTypes.default.object,
  className: _propTypes.default.string,
  size: _propTypes.default.oneOf(['small', 'default', 'large']),
  maxVisible: _propTypes.default.number,
  showNoResults: _propTypes.default.bool,
  noResultsText: _propTypes.default.node,
  scrollable: _propTypes.default.bool
});
(0, _defineProperty2.default)(MentionsInput, "defaultProps", {
  markup: '@[__display__](__type__:__id__)',
  singleLine: false,
  allowSpaceInQuery: false,
  displayTransform: function displayTransform(id, display) {
    return display;
  },
  onKeyDown: _noop2.default,
  onSelect: _noop2.default,
  onBlur: _noop2.default,
  onChange: _noop2.default,
  prefixCls: 'mention',
  size: 'default',
  maxVisible: 6,
  showNoResults: true,
  scrollable: false
});
var _default = MentionsInput;
exports.default = _default;