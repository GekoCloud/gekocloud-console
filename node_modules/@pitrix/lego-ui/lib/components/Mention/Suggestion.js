"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var Suggestion =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Suggestion, _Component);

  function Suggestion() {
    (0, _classCallCheck2.default)(this, Suggestion);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Suggestion).apply(this, arguments));
  }

  (0, _createClass2.default)(Suggestion, [{
    key: "getDisplay",
    value: function getDisplay() {
      var suggestion = this.props.suggestion;

      if (suggestion instanceof String) {
        return suggestion;
      }

      var id = suggestion.id,
          display = suggestion.display;

      if (!id || !display) {
        return id;
      }

      return display;
    }
  }, {
    key: "renderHighlightedDisplay",
    value: function renderHighlightedDisplay(display) {
      var query = this.props.query;
      var i = display.toLowerCase().indexOf(query.toLowerCase());

      if (i === -1) {
        return _react.default.createElement("span", null, display);
      }

      return _react.default.createElement("span", null, display.substring(0, i), _react.default.createElement("em", {
        className: "highlight"
      }, display.substring(i, i + query.length)), display.substring(i + query.length));
    }
  }, {
    key: "renderContent",
    value: function renderContent() {
      var _this$props = this.props,
          query = _this$props.query,
          descriptor = _this$props.descriptor,
          suggestion = _this$props.suggestion,
          index = _this$props.index;
      var display = this.getDisplay();
      var highlightedDisplay = this.renderHighlightedDisplay(display, query);

      if (descriptor.props.renderSuggestion) {
        return descriptor.props.renderSuggestion(suggestion, query, highlightedDisplay, index);
      }

      return highlightedDisplay;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          focused = _this$props2.focused,
          prefixCls = _this$props2.prefixCls;
      var restProps = (0, _omit2.default)(this.props, 'id', 'query', 'index', 'suggestion', 'descriptor', 'focused', 'prefixCls');
      return _react.default.createElement("li", (0, _extends2.default)({}, restProps, {
        className: (0, _classnames.default)("".concat(prefixCls, "-suggestion"), {
          'is-active': focused
        })
      }), this.renderContent());
    }
  }]);
  return Suggestion;
}(_react.Component);

(0, _defineProperty2.default)(Suggestion, "propTypes", {
  id: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired,
  query: _propTypes.default.string.isRequired,
  index: _propTypes.default.number.isRequired,
  suggestion: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
    id: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired,
    display: _propTypes.default.string
  })]).isRequired,
  descriptor: _propTypes.default.object.isRequired,
  focused: _propTypes.default.bool,
  prefixCls: _propTypes.default.string
});
var _default = Suggestion;
exports.default = _default;