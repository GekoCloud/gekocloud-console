"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _keys2 = _interopRequireDefault(require("lodash/keys"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _LocaleProvider = require("../LocaleProvider");

var _mentionUtils = require("./mentionUtils");

var _Suggestion = _interopRequireDefault(require("./Suggestion"));

var _Loading = _interopRequireDefault(require("../Loading"));

var SuggestionsOverlay =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(SuggestionsOverlay, _Component);

  function SuggestionsOverlay() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, SuggestionsOverlay);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(SuggestionsOverlay)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getID", function (suggestion) {
      if (suggestion instanceof String) {
        return suggestion;
      }

      return suggestion.id;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollToOption", function () {
      var $selector = _reactDom.default.findDOMNode(_this.suggestionsRef);

      if (!$selector) return;
      var $li = $selector.querySelector('.is-active');
      if (!$li) return;
      var scrollTop = $selector.scrollTop;
      var scrollBottom = scrollTop + $selector.offsetHeight;
      var optionTop = $li.offsetTop;
      var optionBottom = optionTop + $li.offsetHeight;

      if (scrollTop > optionTop || scrollBottom < optionBottom) {
        $selector.scrollTop = $li.offsetTop - 6;
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderLoadingIndicator", function () {
      var _this$props = _this.props,
          isLoading = _this$props.isLoading,
          prefixCls = _this$props.prefixCls;

      if (!isLoading) {
        return null;
      }

      return _react.default.createElement("div", {
        className: "".concat(prefixCls, "-loading")
      }, _react.default.createElement(_Loading.default, {
        size: 20
      }));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderNoResult", function () {
      var _this$props2 = _this.props,
          suggs = _this$props2.suggestions,
          showNoResults = _this$props2.showNoResults,
          prefixCls = _this$props2.prefixCls,
          _this$props2$noResult = _this$props2.noResultsText,
          noResultsText = _this$props2$noResult === void 0 ? _LocaleProvider.locale.get('NO_RESULTS_FOUND') : _this$props2$noResult;
      var inQuery = (0, _keys2.default)(suggs).some(function (item) {
        return suggs[item].query !== '';
      });
      var result = showNoResults && (0, _mentionUtils.countSuggestions)(suggs) === 0 && inQuery;
      return result ? _react.default.createElement("div", {
        className: "".concat(prefixCls, "-noresults")
      }, noResultsText) : null;
    });
    return _this;
  }

  (0, _createClass2.default)(SuggestionsOverlay, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.scrollToOption();
      var _this$props3 = this.props,
          scrollFocusedIntoView = _this$props3.scrollFocusedIntoView,
          focusIndex = _this$props3.focusIndex;

      if (!this.suggestionsRef || this.suggestionsRef.offsetHeight >= this.suggestionsRef.scrollHeight || !scrollFocusedIntoView) {
        return;
      }

      var _this$suggestionsRef = this.suggestionsRef,
          scrollTop = _this$suggestionsRef.scrollTop,
          children = _this$suggestionsRef.children;

      var _children$focusIndex$ = children[focusIndex].getBoundingClientRect(),
          top = _children$focusIndex$.top,
          bottom = _children$focusIndex$.bottom;

      var _this$suggestionsRef$ = this.suggestionsRef.getBoundingClientRect(),
          topContainer = _this$suggestionsRef$.top;

      top = top - topContainer + scrollTop;
      bottom = bottom - topContainer + scrollTop;

      if (top < scrollTop) {
        this.suggestionsRef.scrollTop = top;
      } else if (bottom > this.suggestionsRef.offsetHeight) {
        this.suggestionsRef.scrollTop = bottom - this.suggestionsRef.offsetHeight;
      }
    }
  }, {
    key: "handleSelect",
    value: function handleSelect(suggestion, descriptor) {
      var onSelect = this.props.onSelect;
      onSelect(suggestion, descriptor);
    }
  }, {
    key: "handleMouseEnter",
    value: function handleMouseEnter(index) {
      var onMouseEnter = this.props.onMouseEnter;
      onMouseEnter(index);
    }
  }, {
    key: "renderSuggestions",
    value: function renderSuggestions() {
      var _this2 = this;

      var suggs = this.props.suggestions;
      var Suggestions = (0, _mentionUtils.getSuggestions)(suggs);
      return Suggestions.reduce(function (result, _ref) {
        var suggestions = _ref.suggestions,
            descriptor = _ref.descriptor;
        return [].concat((0, _toConsumableArray2.default)(result), (0, _toConsumableArray2.default)(suggestions.map(function (sugg, index) {
          var suggIndex = result.length + index;
          return _this2.renderSuggestion(sugg, descriptor, suggIndex);
        })));
      }, []);
    }
  }, {
    key: "renderSuggestion",
    value: function renderSuggestion(suggestion, descriptor, index) {
      var _this3 = this;

      var id = this.getID(suggestion);
      var _this$props4 = this.props,
          prefixCls = _this$props4.prefixCls,
          focusIndex = _this$props4.focusIndex;
      var isFocused = index === focusIndex;
      var mentionDescriptor = descriptor.mentionDescriptor,
          query = descriptor.query;
      return _react.default.createElement(_Suggestion.default, {
        key: id,
        id: id,
        query: query,
        index: index,
        descriptor: mentionDescriptor,
        suggestion: suggestion,
        focused: isFocused,
        prefixCls: prefixCls,
        onClick: function onClick() {
          return _this3.handleSelect(suggestion, descriptor);
        },
        onMouseEnter: function onMouseEnter() {
          return _this3.handleMouseEnter(index);
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var _this$props5 = this.props,
          suggestions = _this$props5.suggestions,
          isLoading = _this$props5.isLoading,
          onMouseDown = _this$props5.onMouseDown,
          position = _this$props5.position,
          prefixCls = _this$props5.prefixCls;
      var renderNoResult = this.renderNoResult();
      var renderLoading = this.renderLoadingIndicator();

      if ((0, _mentionUtils.countSuggestions)(suggestions) === 0 && !isLoading && !renderNoResult) {
        return null;
      }

      return _react.default.createElement("div", {
        className: "".concat(prefixCls, "-suggestions"),
        onMouseDown: onMouseDown,
        style: (0, _objectSpread2.default)({}, position)
      }, !renderNoResult && !renderLoading ? _react.default.createElement("ul", {
        ref: function ref(el) {
          _this4.suggestionsRef = el;
        }
      }, this.renderSuggestions()) : null, renderLoading, renderNoResult);
    }
  }]);
  return SuggestionsOverlay;
}(_react.Component);

(0, _defineProperty2.default)(SuggestionsOverlay, "propTypes", {
  suggestions: _propTypes.default.object.isRequired,
  focusIndex: _propTypes.default.number,
  scrollFocusedIntoView: _propTypes.default.bool,
  isLoading: _propTypes.default.bool,
  showNoResults: _propTypes.default.bool,
  onSelect: _propTypes.default.func,
  onMouseDown: _propTypes.default.func,
  onMouseEnter: _propTypes.default.func,
  position: _propTypes.default.object,
  prefixCls: _propTypes.default.string,
  noResultsText: _propTypes.default.string
});
(0, _defineProperty2.default)(SuggestionsOverlay, "defaultProps", {
  onSelect: _noop2.default,
  onMouseDown: _noop2.default,
  onMouseEnter: _noop2.default
});
var _default = SuggestionsOverlay;
exports.default = _default;