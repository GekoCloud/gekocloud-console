"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSuggestion = exports.getSuggestions = exports.countSuggestions = exports.makeMentionsMarkup = exports.getEndOfLastMention = exports.getMentions = exports.applyChangeToValue = exports.getPlainText = exports.findStartOfMentionInPlainText = exports.mapPlainTextIndex = exports.iterateMentionsMarkup = exports.getPositionOfCapturingGroup = exports.spliceString = exports.escapeRegex = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _keys2 = _interopRequireDefault(require("lodash/keys"));

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var PLACEHOLDERS = {
  id: '__id__',
  display: '__display__',
  type: '__type__'
};

var numericComparator = function numericComparator(a, b) {
  var x = a === null ? Number.MAX_VALUE : a;
  var y = b === null ? Number.MAX_VALUE : b;
  return x - y;
};

var escapeRegex = function escapeRegex(str) {
  return str.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
};

exports.escapeRegex = escapeRegex;

var countCapturingGroups = function countCapturingGroups(regex) {
  return new RegExp("".concat(regex.toString(), "|")).exec('').length - 1;
};

var markupToRegex = function markupToRegex(markup) {
  var markupPattern = escapeRegex(markup);
  markupPattern = markupPattern.replace(PLACEHOLDERS.display, '(.+?)');
  markupPattern = markupPattern.replace(PLACEHOLDERS.id, '(.+?)');
  markupPattern = markupPattern.replace(PLACEHOLDERS.type, '(.+?)');
  return new RegExp(markupPattern, 'g');
};

var spliceString = function spliceString(str, start, end, insert) {
  var strStart = str.substring(0, start);
  var strEnd = str.substring(end);
  return strStart + insert + strEnd;
};

exports.spliceString = spliceString;

var getPositionOfCapturingGroup = function getPositionOfCapturingGroup(markup, parameterName, regex) {
  if (parameterName !== 'id' && parameterName !== 'display' && parameterName !== 'type') {
    throw new Error("parameterName must be 'id', 'display', or 'type'");
  }

  var indexDisplay = markup.indexOf(PLACEHOLDERS.display);
  var indexId = markup.indexOf(PLACEHOLDERS.id);
  var indexType = markup.indexOf(PLACEHOLDERS.type);
  if (indexDisplay < 0) indexDisplay = null;
  if (indexId < 0) indexId = null;
  if (indexType < 0) indexType = null;

  if (indexDisplay === null && indexId === null) {
    throw new Error("The markup `".concat(markup, "` must contain at least one of the placeholders `__id__` or `__display__`"));
  }

  if (indexType === null && parameterName === 'type') {
    return null;
  }

  var sortedIndices = [indexDisplay, indexId, indexType].sort(numericComparator);
  if (indexDisplay === null) indexDisplay = indexId;
  if (indexId === null) indexId = indexDisplay;

  if (regex && countCapturingGroups(regex) === 0) {
    return parameterName === 'type' ? null : 0;
  }

  if (parameterName === 'id') return sortedIndices.indexOf(indexId);
  if (parameterName === 'display') return sortedIndices.indexOf(indexDisplay);
  if (parameterName === 'type') return indexType === null ? null : sortedIndices.indexOf(indexType);
  return null;
};

exports.getPositionOfCapturingGroup = getPositionOfCapturingGroup;

var iterateMentionsMarkup = function iterateMentionsMarkup(value, markup, textIteratee, markupIteratee, displayTransform) {
  var regex = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : markupToRegex(markup);
  var displayPos = getPositionOfCapturingGroup(markup, 'display', regex);
  var idPos = getPositionOfCapturingGroup(markup, 'id', regex);
  var typePos = getPositionOfCapturingGroup(markup, 'type', regex);

  var getMatch = function getMatch(val) {
    return regex.exec(val);
  };

  var match = getMatch(value);
  var start = 0;
  var currentPlainTextIndex = 0;

  while (match !== null) {
    var id = match[idPos + 1];
    var display = match[displayPos + 1];
    var type = typePos !== null ? match[typePos + 1] : null;
    if (displayTransform) display = displayTransform(id, display, type);
    var substr = value.substring(start, match.index);
    textIteratee(substr, start, currentPlainTextIndex);
    currentPlainTextIndex += substr.length;
    markupIteratee(match[0], match.index, currentPlainTextIndex, id, display, type, start);
    currentPlainTextIndex += display.length;
    start = regex.lastIndex;
    match = getMatch(value);
  }

  if (start < value.length) {
    textIteratee(value.substring(start), start, currentPlainTextIndex);
  }
};

exports.iterateMentionsMarkup = iterateMentionsMarkup;

var mapPlainTextIndex = function mapPlainTextIndex(value, markup, indexInPlainText) {
  var inMarkupCorrection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'START';
  var displayTransform = arguments.length > 4 ? arguments[4] : undefined;
  var regex = arguments.length > 5 ? arguments[5] : undefined;

  if (!(0, _isNumber2.default)(indexInPlainText)) {
    return indexInPlainText;
  }

  var result;

  var textIteratee = function textIteratee(substr, index, substrPlainTextIndex) {
    if (result !== undefined) return;

    if (substrPlainTextIndex + substr.length >= indexInPlainText) {
      result = index + indexInPlainText - substrPlainTextIndex;
    }
  };

  var markupIteratee = function markupIteratee(mark, index, mentionPlainTextIndex, id, display) {
    if (result !== undefined) return;

    if (mentionPlainTextIndex + display.length > indexInPlainText) {
      if (inMarkupCorrection === 'NULL') {
        result = null;
      } else {
        result = index + (inMarkupCorrection === 'END' ? mark.length : 0);
      }
    }
  };

  iterateMentionsMarkup(value, markup, textIteratee, markupIteratee, displayTransform, regex);
  return result === undefined ? value.length : result;
};

exports.mapPlainTextIndex = mapPlainTextIndex;

var findStartOfMentionInPlainText = function findStartOfMentionInPlainText(value, markup, indexInPlainText, displayTransform, regex) {
  var result = indexInPlainText;
  var foundMention = false;

  var markupIteratee = function markupIteratee(mark, index, mentionPlainTextIndex, id, display) {
    if (mentionPlainTextIndex <= indexInPlainText && mentionPlainTextIndex + display.length > indexInPlainText) {
      result = mentionPlainTextIndex;
      foundMention = true;
    }
  };

  iterateMentionsMarkup(value, markup, function () {}, markupIteratee, displayTransform, regex);

  if (foundMention) {
    return result;
  }

  return undefined;
};

exports.findStartOfMentionInPlainText = findStartOfMentionInPlainText;

var getPlainText = function getPlainText(value, markup, displayTransform) {
  var regex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : markupToRegex(markup);
  var idPos = getPositionOfCapturingGroup(markup, 'id', regex);
  var displayPos = getPositionOfCapturingGroup(markup, 'display', regex);
  var typePos = getPositionOfCapturingGroup(markup, 'type', regex);
  return value.replace(regex, function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var id = args[idPos + 1];
    var display = args[displayPos + 1];
    var type = typePos !== null ? args[typePos + 1] : null;
    if (displayTransform) display = displayTransform(id, display, type);
    return display;
  });
};

exports.getPlainText = getPlainText;

var applyChangeToValue = function applyChangeToValue(value, markup, plainTextValue, selectionStartBeforeChange, selectionEndBeforeChange, selectionEndAfterChange, displayTransform, regex) {
  var oldPlainTextValue = getPlainText(value, markup, displayTransform, regex);
  var StartBeforeChange = selectionStartBeforeChange;
  var EndBeforeChange = selectionEndBeforeChange;
  var lengthDelta = oldPlainTextValue.length - plainTextValue.length;

  if (StartBeforeChange === 'undefined') {
    StartBeforeChange = selectionEndAfterChange + lengthDelta;
  }

  if (EndBeforeChange === 'undefined') {
    EndBeforeChange = StartBeforeChange;
  }

  if (StartBeforeChange === EndBeforeChange && EndBeforeChange === selectionEndAfterChange && oldPlainTextValue.length === plainTextValue.length) {
    StartBeforeChange -= 1;
  }

  var insert = plainTextValue.slice(StartBeforeChange, selectionEndAfterChange);
  var spliceStart = Math.min(StartBeforeChange, selectionEndAfterChange);
  var spliceEnd = EndBeforeChange;

  if (StartBeforeChange === selectionEndAfterChange) {
    spliceEnd = Math.max(EndBeforeChange, StartBeforeChange + lengthDelta);
  }

  var mappedSpliceStart = mapPlainTextIndex(value, markup, spliceStart, 'START', displayTransform, regex);
  var mappedSpliceEnd = mapPlainTextIndex(value, markup, spliceEnd, 'END', displayTransform, regex);
  var controlSpliceStart = mapPlainTextIndex(value, markup, spliceStart, 'NULL', displayTransform, regex);
  var controlSpliceEnd = mapPlainTextIndex(value, markup, spliceEnd, 'NULL', displayTransform, regex);
  var willRemoveMention = controlSpliceStart === null || controlSpliceEnd === null;
  var newValue = spliceString(value, mappedSpliceStart, mappedSpliceEnd, insert);

  if (!willRemoveMention) {
    var controlPlainTextValue = getPlainText(newValue, markup, displayTransform, regex);

    if (controlPlainTextValue !== plainTextValue) {
      spliceStart = 0;

      while (plainTextValue[spliceStart] === controlPlainTextValue[spliceStart]) {
        spliceStart += 1;
      }

      insert = plainTextValue.slice(spliceStart, selectionEndAfterChange);
      spliceEnd = oldPlainTextValue.lastIndexOf(plainTextValue.substring(selectionEndAfterChange));
      mappedSpliceStart = mapPlainTextIndex(value, markup, spliceStart, 'START', displayTransform, regex);
      mappedSpliceEnd = mapPlainTextIndex(value, markup, spliceEnd, 'END', displayTransform, regex);
      newValue = spliceString(value, mappedSpliceStart, mappedSpliceEnd, insert);
    }
  }

  return newValue;
};

exports.applyChangeToValue = applyChangeToValue;

var getMentions = function getMentions(value, markup, displayTransform, regex) {
  var mentions = [];
  iterateMentionsMarkup(value, markup, function () {}, function (match, index, plainTextIndex, id, display, type) {
    mentions.push({
      id: id,
      display: display,
      type: type,
      index: index,
      plainTextIndex: plainTextIndex
    });
  }, displayTransform, regex);
  return mentions;
};

exports.getMentions = getMentions;

var getEndOfLastMention = function getEndOfLastMention(value, markup, displayTransform, regex) {
  var mentions = getMentions(value, markup, displayTransform, regex);
  var lastMention = mentions[mentions.length - 1];
  return lastMention ? lastMention.plainTextIndex + lastMention.display.length : 0;
};

exports.getEndOfLastMention = getEndOfLastMention;

var makeMentionsMarkup = function makeMentionsMarkup(markup, id, display, type) {
  var result = markup.replace(PLACEHOLDERS.id, id);
  result = result.replace(PLACEHOLDERS.display, display);
  result = result.replace(PLACEHOLDERS.type, type);
  return result;
};

exports.makeMentionsMarkup = makeMentionsMarkup;

var countSuggestions = function countSuggestions(suggestions) {
  var suggestionsKey = (0, _keys2.default)(suggestions);
  return suggestionsKey.reduce(function (acc, prop) {
    return acc + suggestions[prop].results.length;
  }, 0);
};

exports.countSuggestions = countSuggestions;

var getSuggestions = function getSuggestions(suggestions) {
  return (0, _keys2.default)(suggestions).reduce(function (acc, mentionType) {
    return [].concat((0, _toConsumableArray2.default)(acc), [{
      suggestions: suggestions[mentionType].results,
      descriptor: suggestions[mentionType]
    }]);
  }, []);
};

exports.getSuggestions = getSuggestions;

var getSuggestion = function getSuggestion(suggs, index) {
  return getSuggestions(suggs).reduce(function (result, _ref) {
    var suggestions = _ref.suggestions,
        descriptor = _ref.descriptor;
    return [].concat((0, _toConsumableArray2.default)(result), (0, _toConsumableArray2.default)(suggestions.map(function (suggestion) {
      return {
        suggestion: suggestion,
        descriptor: descriptor
      };
    })));
  }, [])[index];
};

exports.getSuggestion = getSuggestion;