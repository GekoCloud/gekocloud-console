"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _isFunction2 = _interopRequireDefault(require("lodash/isFunction"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _cloneMenuItem = _interopRequireDefault(require("./utils/cloneMenuItem"));

var _MenuItem = _interopRequireDefault(require("./MenuItem"));

var _MenuDivider = _interopRequireDefault(require("./MenuDivider"));

var _SubMenu = _interopRequireDefault(require("./SubMenu"));

var Menu =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Menu, _Component);

  function Menu(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Menu);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Menu).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "toggleExpand", function (key, parentKeys) {
      var onExpandChange = _this.props.onExpandChange;
      var expandKeys = _this.state.expandKeys;
      var isCurrentKeyExpand = expandKeys.includes(key);
      var newExpandKeys = isCurrentKeyExpand ? expandKeys.filter(function (item) {
        return item !== key;
      }) : [].concat((0, _toConsumableArray2.default)(parentKeys), [key]);

      if (!(0, _isEqual2.default)(expandKeys, newExpandKeys)) {
        _this.setState({
          expandKeys: newExpandKeys
        }, function () {
          if ((0, _isFunction2.default)(onExpandChange)) {
            onExpandChange(newExpandKeys);
          }
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleSelect", function (key, parentKeys) {
      var expandKeys = _this.state.expandKeys;
      var onExpandChange = _this.props.onExpandChange;
      var isExpandKeysEqual = (0, _isEqual2.default)(expandKeys, parentKeys);

      _this.setState({
        selectedKey: key,
        selectedParentKeys: parentKeys,
        expandKeys: parentKeys
      }, function () {
        if ((0, _isFunction2.default)(onExpandChange) && !isExpandKeysEqual) {
          onExpandChange(parentKeys);
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClick", function (e, key, value) {
      var onClick = _this.props.onClick;

      if ((0, _isFunction2.default)(onClick)) {
        onClick(e, key, value);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderMenuItem", function (component, index) {
      if (!component) {
        return null;
      }

      var _this$state = _this.state,
          selectedKey = _this$state.selectedKey,
          selectedParentKeys = _this$state.selectedParentKeys,
          expandKeys = _this$state.expandKeys;
      var _this$props = _this.props,
          mode = _this$props.mode,
          inlineIndent = _this$props.inlineIndent,
          onClick = _this$props.onClick;
      var options = {
        depth: 1,
        isInline: mode === 'inline',
        isHorizon: mode === 'horizon',
        inlineIndent: inlineIndent,
        selectedKey: selectedKey,
        selectedParentKeys: selectedParentKeys,
        expandKeys: expandKeys,
        handleSelect: _this.handleSelect,
        toggleExpand: _this.toggleExpand
      };

      if (component.type.menuType === 'MenuGroup') {
        return _react.default.cloneElement(component, (0, _objectSpread2.default)({
          mode: mode,
          onClick: onClick
        }, options));
      }

      return (0, _cloneMenuItem.default)(component, index, 'menu', options, _this.handleClick);
    });
    var _this$props2 = _this.props,
        _selectedKey = _this$props2.selectedKey,
        defaultSelectedKey = _this$props2.defaultSelectedKey,
        _expandKeys = _this$props2.expandKeys,
        defaultExpandKeys = _this$props2.defaultExpandKeys;
    _this.state = {
      selectedKey: _selectedKey || defaultSelectedKey,
      selectedParentKeys: [],
      expandKeys: _expandKeys || defaultExpandKeys
    };
    return _this;
  }

  (0, _createClass2.default)(Menu, [{
    key: "getChildContext",
    value: function getChildContext() {
      var _this$props3 = this.props,
          selectable = _this$props3.selectable,
          inlineIndent = _this$props3.inlineIndent;
      return {
        selectable: selectable,
        inlineIndent: inlineIndent
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          children = _this$props4.children,
          className = _this$props4.className,
          style = _this$props4.style,
          mode = _this$props4.mode,
          width = _this$props4.width;
      var isInline = mode === 'inline';
      var isHorizon = mode === 'horizon';
      var classString = (0, _classnames.default)('menu', className, {
        'menu-inline': isInline,
        'menu-horizon': isHorizon
      });
      var widthStyle = width ? {
        width: width
      } : null;
      return _react.default.createElement("ul", {
        className: classString,
        style: Object.assign({}, style, widthStyle)
      }, _react.default.Children.map(children, this.renderMenuItem));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var derivedState = {};

      if ('selectedKey' in nextProps && nextProps.selectedKey !== prevState.selectedKey) {
        derivedState.selectedKey = nextProps.selectedKey;
      }

      if ('expandKeys' in nextProps && !(0, _isEqual2.default)(nextProps.expandKeys, prevState.expandKeys)) {
        derivedState.expandKeys = nextProps.expandKeys;
      }

      return derivedState;
    }
  }]);
  return Menu;
}(_react.Component);

(0, _defineProperty2.default)(Menu, "MenuItem", _MenuItem.default);
(0, _defineProperty2.default)(Menu, "SubMenu", _SubMenu.default);
(0, _defineProperty2.default)(Menu, "MenuDivider", _MenuDivider.default);
(0, _defineProperty2.default)(Menu, "childContextTypes", {
  selectable: _propTypes.default.bool,
  inlineIndent: _propTypes.default.number
});
(0, _defineProperty2.default)(Menu, "propTypes", {
  onClick: _propTypes.default.func,
  style: _propTypes.default.object,
  mode: _propTypes.default.string,
  className: _propTypes.default.string,
  width: _propTypes.default.number,
  selectable: _propTypes.default.bool,
  children: _propTypes.default.node,
  // inline props
  expandKeys: _propTypes.default.array,
  defaultExpandKeys: _propTypes.default.array,
  selectedKey: _propTypes.default.string,
  defaultSelectedKey: _propTypes.default.string,
  inlineIndent: _propTypes.default.number,
  onExpandChange: _propTypes.default.func
});
(0, _defineProperty2.default)(Menu, "defaultProps", {
  onClick: _noop2.default,
  onExpandChange: _noop2.default,
  mode: 'vertical',
  inlineIndent: 11,
  selectable: false,
  defaultExpandKeys: [],
  style: {}
});
var _default = Menu;
exports.default = _default;