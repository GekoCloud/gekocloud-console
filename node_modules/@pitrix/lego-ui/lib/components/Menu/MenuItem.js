"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("../../utils");

var MenuItem =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(MenuItem, _Component);

  function MenuItem() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, MenuItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(MenuItem)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getIndentStyle", function (_ref) {
      var isInline = _ref.isInline,
          depth = _ref.depth,
          inlineIndent = _ref.inlineIndent;
      var style = {};

      if (isInline) {
        style = {
          paddingLeft: "".concat(depth * inlineIndent, "px")
        };
      }

      return style;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClick", function (e) {
      var selectable = _this.context.selectable;
      var _this$props = _this.props,
          specKey = _this$props.specKey,
          parentKeys = _this$props.parentKeys,
          value = _this$props.value,
          onClick = _this$props.onClick,
          disabled = _this$props.disabled,
          isInline = _this$props.isInline,
          handleSelect = _this$props.handleSelect;
      if (disabled) return;

      if (isInline || selectable) {
        handleSelect(specKey, parentKeys);
      }

      onClick(e, specKey, value);
    });
    return _this;
  }

  (0, _createClass2.default)(MenuItem, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var selectable = this.context.selectable;
      var _this$props2 = this.props,
          specKey = _this$props2.specKey,
          parentKeys = _this$props2.parentKeys,
          selectedKey = _this$props2.selectedKey,
          isInline = _this$props2.isInline,
          handleSelect = _this$props2.handleSelect;

      if ((isInline || selectable) && specKey === selectedKey) {
        handleSelect(specKey, parentKeys);
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {
      var selectable = this.context.selectable;
      return !(0, _utils.shallowEqual)(this.props, nextProps) || !(0, _utils.shallowEqual)(selectable, nextContext.selectable);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          specKey = _this$props3.specKey,
          className = _this$props3.className,
          children = _this$props3.children,
          disabled = _this$props3.disabled,
          isHorizon = _this$props3.isHorizon,
          isInline = _this$props3.isInline,
          selectedKey = _this$props3.selectedKey,
          depth = _this$props3.depth,
          inlineIndent = _this$props3.inlineIndent;
      var isSelected = selectedKey && selectedKey === specKey;
      var style = this.getIndentStyle({
        isInline: isInline,
        depth: depth,
        inlineIndent: inlineIndent
      });
      return _react.default.createElement("li", {
        className: (0, _classnames.default)('menu-item', className, {
          'menu-horizon-item': isHorizon,
          'menu-inline-item': isInline,
          'menu-item-selected': isSelected,
          'menu-item-disabled': disabled
        }),
        style: style,
        onClick: this.handleClick
      }, children);
    }
  }]);
  return MenuItem;
}(_react.Component);

(0, _defineProperty2.default)(MenuItem, "menuType", 'MenuItem');
(0, _defineProperty2.default)(MenuItem, "propTypes", {
  disabled: _propTypes.default.bool,
  className: _propTypes.default.string,
  isHorizon: _propTypes.default.bool,
  isInline: _propTypes.default.bool,
  value: _propTypes.default.any,
  specKey: _propTypes.default.string,
  parentKeys: _propTypes.default.arrayOf(_propTypes.default.string),
  onClick: _propTypes.default.func,
  children: _propTypes.default.any.isRequired,
  // inline props
  depth: _propTypes.default.number,
  inlineIndent: _propTypes.default.number,
  selectedKey: _propTypes.default.string,
  handleSelect: _propTypes.default.func
});
(0, _defineProperty2.default)(MenuItem, "contextTypes", {
  selectable: _propTypes.default.bool
});
(0, _defineProperty2.default)(MenuItem, "defaultProps", {
  parentKeys: []
});
var _default = MenuItem;
exports.default = _default;