"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _SubPopupMenu = _interopRequireDefault(require("./SubPopupMenu"));

var _cloneMenuItem = _interopRequireDefault(require("./utils/cloneMenuItem"));

var SubMenu =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(SubMenu, _Component);

  function SubMenu(props) {
    var _this;

    (0, _classCallCheck2.default)(this, SubMenu);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SubMenu).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getIndentStyle", function (_ref) {
      var isInline = _ref.isInline,
          depth = _ref.depth,
          inlineIndent = _ref.inlineIndent;
      var styleObject = {};

      if (isInline) {
        styleObject = {
          paddingLeft: "".concat(depth * inlineIndent, "px")
        };
      }

      return styleObject;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getEventHandles", function (disabled, isInline) {
      var eventHandles = {};

      if (!disabled && !isInline) {
        eventHandles = {
          onMouseEnter: _this.onMouseEnter,
          onMouseLeave: _this.onMouseLeave
        };
      }

      return eventHandles;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClick", function (e, key, value) {
      var selectable = _this.context.selectable;
      var _this$props = _this.props,
          onClick = _this$props.onClick,
          isInline = _this$props.isInline;

      if (!(isInline || selectable)) {
        _this.setState({
          subMenuVisible: false
        });
      }

      onClick(e, key, value);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "titleClickHandler", function (e) {
      var _this$props2 = _this.props,
          isInline = _this$props2.isInline,
          specKey = _this$props2.specKey,
          parentKeys = _this$props2.parentKeys,
          toggleExpand = _this$props2.toggleExpand;

      if (isInline) {
        toggleExpand(specKey, parentKeys);
      }

      e.stopPropagation();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMouseEnter", function () {
      if (_this.leaveTimer) {
        clearTimeout(_this.leaveTimer);
      }

      _this.enterTimer = setTimeout(function () {
        _this.setState({
          subMenuVisible: true
        });
      }, 200);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMouseLeave", function () {
      if (_this.enterTimer) {
        clearTimeout(_this.enterTimer);
      }

      _this.leaveTimer = setTimeout(function () {
        _this.setState({
          subMenuVisible: false
        });
      }, 200);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderInlineChild", function (component, index) {
      var _this$props3 = _this.props,
          depth = _this$props3.depth,
          isInline = _this$props3.isInline,
          inlineIndent = _this$props3.inlineIndent,
          selectedKey = _this$props3.selectedKey,
          selectedParentKeys = _this$props3.selectedParentKeys,
          expandKeys = _this$props3.expandKeys,
          handleSelect = _this$props3.handleSelect,
          toggleExpand = _this$props3.toggleExpand,
          specKey = _this$props3.specKey,
          parentKeys = _this$props3.parentKeys;
      return (0, _cloneMenuItem.default)(component, index, specKey, {
        depth: depth + 1,
        isInline: isInline,
        inlineIndent: inlineIndent,
        selectedKey: selectedKey,
        selectedParentKeys: selectedParentKeys,
        expandKeys: expandKeys,
        handleSelect: handleSelect,
        toggleExpand: toggleExpand,
        parentKeys: parentKeys.concat(specKey)
      }, _this.handleClick);
    });
    var _this$props4 = _this.props,
        _isInline = _this$props4.isInline,
        _expandKeys = _this$props4.expandKeys,
        _specKey = _this$props4.specKey;
    _this.state = {
      isExpand: _isInline && _expandKeys.includes(_specKey),
      subMenuVisible: false
    };
    return _this;
  }

  (0, _createClass2.default)(SubMenu, [{
    key: "renderContent",
    value: function renderContent() {
      var _this$props5 = this.props,
          children = _this$props5.children,
          specKey = _this$props5.specKey,
          overlayClassName = _this$props5.overlayClassName,
          isInline = _this$props5.isInline,
          parentKeys = _this$props5.parentKeys,
          selectedKey = _this$props5.selectedKey,
          handleSelect = _this$props5.handleSelect,
          selectedParentKeys = _this$props5.selectedParentKeys;
      var subMenuVisible = this.state.subMenuVisible;
      var selectable = this.context.selectable;

      if (!isInline) {
        var props = {
          visible: subMenuVisible,
          onClick: this.handleClick,
          overlayClass: overlayClassName,
          specKey: specKey,
          parentKeys: parentKeys
        };

        if (selectable) {
          props.selectedKey = selectedKey;
          props.selectedParentKeys = selectedParentKeys;
          props.handleSelect = handleSelect;
        }

        return _react.default.createElement(_SubPopupMenu.default, (0, _extends2.default)({}, props, {
          onPopupMenuClick: this.onMouseLeave
        }), children);
      }

      var isExpand = this.state.isExpand;
      return _react.default.createElement("ul", {
        className: (0, _classnames.default)('menu-inner', overlayClassName),
        style: {
          height: isExpand ? 'auto' : 0
        }
      }, _react.default.Children.map(children, this.renderInlineChild));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props6 = this.props,
          className = _this$props6.className,
          disabled = _this$props6.disabled,
          title = _this$props6.title,
          isInline = _this$props6.isInline,
          isHorizon = _this$props6.isHorizon,
          depth = _this$props6.depth,
          inlineIndent = _this$props6.inlineIndent,
          specKey = _this$props6.specKey,
          _this$props6$selected = _this$props6.selectedParentKeys,
          selectedParentKeys = _this$props6$selected === void 0 ? [] : _this$props6$selected;
      var isExpand = this.state.isExpand;
      var eventHandles = this.getEventHandles(disabled, isInline);
      var style = this.getIndentStyle({
        isInline: isInline,
        depth: depth,
        inlineIndent: inlineIndent
      });
      return _react.default.createElement("li", (0, _extends2.default)({
        className: (0, _classnames.default)(className, {
          submenu: !isInline,
          'menu-item': !isInline,
          'menu-item-disabled': disabled,
          'menu-horizon-submenu': isHorizon,
          'menu-inline-submenu': isInline,
          'submenu-has-selected-item': selectedParentKeys.includes(specKey) && !isInline
        })
      }, eventHandles), _react.default.createElement("div", {
        className: (0, _classnames.default)({
          'menu-inline-submenu-title': isInline,
          'submenu-title': !isInline,
          'submenu-disabled': disabled,
          'submenu-has-selected-item': selectedParentKeys.includes(specKey) && isInline
        }),
        style: style,
        onClick: this.titleClickHandler
      }, _react.default.createElement("span", {
        className: "submenu-title-text"
      }, title), !disabled && !isHorizon && _react.default.createElement(_Icon.default, {
        className: (0, _classnames.default)('submenu-title-operate-icon', {
          'menu-inline-submenu-icon--expand': isInline && isExpand
        }),
        name: "chevron-right"
      })), !disabled && this.renderContent());
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      var specKey = nextProps.specKey;

      if ('expandKeys' in nextProps && nextProps.expandKeys) {
        var isExpand = nextProps.expandKeys.includes(specKey);
        return {
          isExpand: isExpand
        };
      }

      return null;
    }
  }]);
  return SubMenu;
}(_react.Component);

(0, _defineProperty2.default)(SubMenu, "menuType", 'SubMenu');
(0, _defineProperty2.default)(SubMenu, "propTypes", {
  title: _propTypes.default.node,
  className: _propTypes.default.string,
  overlayClassName: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  onClick: _propTypes.default.func,
  isInline: _propTypes.default.bool,
  isHorizon: _propTypes.default.bool,
  value: _propTypes.default.any,
  specKey: _propTypes.default.string,
  parentKeys: _propTypes.default.arrayOf(_propTypes.default.string),
  selectedKey: _propTypes.default.string,
  selectedParentKeys: _propTypes.default.arrayOf(_propTypes.default.string),
  handleSelect: _propTypes.default.func,
  children: _propTypes.default.node,
  // inline props
  depth: _propTypes.default.number,
  expandKeys: _propTypes.default.array,
  inlineIndent: _propTypes.default.number,
  toggleExpand: _propTypes.default.func
});
(0, _defineProperty2.default)(SubMenu, "contextTypes", {
  selectable: _propTypes.default.bool
});
(0, _defineProperty2.default)(SubMenu, "defaultProps", {
  title: '',
  parentKeys: []
});
var _default = SubMenu;
exports.default = _default;