"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _includes2 = _interopRequireDefault(require("lodash/includes"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("../../utils");

var _NotifyManager = _interopRequireDefault(require("../Notify/NotifyManager"));

var _position = require("../Notify/position");

var messageInstance = {};
var NoticeType = ['info', 'success', 'error', 'warning', 'loading'];

var _open = function open(args) {
  var defaultOptions = {
    type: 'info',
    duration: 3000,
    top: 24,
    bottom: 24,
    left: 20,
    right: 20,
    prefixCls: 'message',
    placement: 'topCenter',
    animation: 'slide down'
  };
  var options = (0, _objectSpread2.default)({}, defaultOptions, args);
  var position;

  if (!(0, _includes2.default)(_position.PLACEMENT, options.placement)) {
    position = defaultOptions.placement;
  } else {
    position = options.placement;
  }

  var iconNode = null;
  var customIcon = false;
  var prefixCls = options.prefixCls,
      type = options.type,
      content = options.content,
      duration = options.duration,
      onClose = options.onClose,
      animation = options.animation,
      icon = options.icon,
      btns = options.btns,
      key = options.key,
      top = options.top,
      left = options.left,
      bottom = options.bottom,
      right = options.right;

  if (_react.default.isValidElement(icon)) {
    iconNode = icon;
    customIcon = true;
  } else if ((0, _includes2.default)(NoticeType, type)) {
    iconNode = _react.default.createElement("span", {
      className: "icon icon-".concat(type)
    });
  }

  var target = key || (0, _utils.generateUUID)('message');
  var cacheKey = "".concat(prefixCls, "-").concat(position);

  var addNotice = function addNotice(instance) {
    instance.createNotice({
      key: target,
      duration: duration,
      style: {},
      closable: false,
      content: _react.default.createElement("div", {
        className: "".concat(prefixCls, "-content ").concat(prefixCls, "-").concat(type)
      }, iconNode && _react.default.createElement("div", {
        className: (0, _classnames.default)("".concat(prefixCls, "-icon"), {
          'is-custom-icon': customIcon
        })
      }, iconNode), _react.default.createElement("span", null, content), btns && _react.default.createElement("div", {
        className: "".concat(prefixCls, "-btns")
      }, btns)),
      onClose: onClose
    });
  };

  if (messageInstance[cacheKey]) {
    addNotice(messageInstance[cacheKey]);
  } else {
    _NotifyManager.default.newInstance({
      prefixCls: prefixCls,
      animation: animation,
      wrapperCls: 'message',
      className: cacheKey,
      style: (0, _position.getPlacementStyle)(position, top, right, bottom, left)
    }, function (notify) {
      messageInstance[cacheKey] = notify;
      addNotice(notify);
    });
  }

  return (0, _objectSpread2.default)({}, messageInstance[cacheKey], {
    key: target
  });
};

var convert = function convert(args, type) {
  if ((0, _isString2.default)(args)) {
    return _open({
      content: args,
      type: type
    });
  }

  return _open((0, _objectSpread2.default)({}, args, {
    type: type
  }));
};

var _default = {
  open: function open(args) {
    return _open(args);
  },
  info: function info(args) {
    return convert(args, 'info');
  },
  success: function success(args) {
    return convert(args, 'success');
  },
  warning: function warning(args) {
    return convert(args, 'warning');
  },
  error: function error(args) {
    return convert(args, 'error');
  },
  close: function close(key) {
    Object.keys(messageInstance).forEach(function (cacheKey) {
      return messageInstance[cacheKey].removeNotice(key);
    });
  },
  destroy: function destroy() {
    if (messageInstance) {
      messageInstance.destroy();
      messageInstance = null;
    }
  }
};
exports.default = _default;