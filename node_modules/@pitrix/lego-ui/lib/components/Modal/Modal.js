"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _clamp2 = _interopRequireDefault(require("lodash/clamp"));

var _isFunction2 = _interopRequireDefault(require("lodash/isFunction"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireWildcard(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Button = _interopRequireDefault(require("../Button/Button"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _LocaleProvider = require("../LocaleProvider");

var _utils = require("../../utils");

var Modal =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Modal, _Component);

  function Modal(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Modal);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Modal).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMouseDown", function (e) {
      e.stopPropagation();
      var draggable = _this.props.draggable;
      if (e.button !== 0 || !draggable) return;

      var _ReactDOM$findDOMNode = _reactDom.default.findDOMNode(_this.nodeModal),
          offsetLeft = _ReactDOM$findDOMNode.offsetLeft,
          offsetTop = _ReactDOM$findDOMNode.offsetTop;

      _this.setState({
        isDragging: true,
        rel: {
          x: e.clientX - offsetLeft,
          y: e.clientY - offsetTop
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMouseUp", function (e) {
      e.stopPropagation();

      _this.setState({
        isDragging: false,
        isResizing: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMouseMove", function (e) {
      e.stopPropagation();
      var draggable = _this.props.draggable;
      var _this$state = _this.state,
          visible = _this$state.visible,
          isDragging = _this$state.isDragging,
          isResizing = _this$state.isResizing,
          rel = _this$state.rel;
      if (!visible) return;
      var _window = window,
          innerWidth = _window.innerWidth,
          innerHeight = _window.innerHeight;

      if (draggable && isDragging) {
        var left = (0, _clamp2.default)(e.clientX, 0, innerWidth) - rel.x,
            top = (0, _clamp2.default)(e.clientY, 0, innerHeight) - rel.y;

        _this.setState({
          top: top,
          left: left
        });
      }

      if (isResizing) {
        var _ref = [(0, _clamp2.default)(e.clientX, 0, innerWidth), (0, _clamp2.default)(e.clientY, 0, innerHeight)],
            clientX = _ref[0],
            clientY = _ref[1];

        _this.handleResizing(clientX, clientY);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleResizerMouseDown", function () {
      _this.setState({
        isResizing: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleResizing", function (clientX, clientY) {
      var _this$props = _this.props,
          minWidth = _this$props.minWidth,
          minHeight = _this$props.minHeight,
          maxWidth = _this$props.maxWidth,
          maxHeight = _this$props.maxHeight;

      var _ReactDOM$findDOMNode2 = _reactDom.default.findDOMNode(_this.nodeModal),
          offsetLeft = _ReactDOM$findDOMNode2.offsetLeft,
          offsetTop = _ReactDOM$findDOMNode2.offsetTop;

      _this.setState({
        width: clientX > offsetLeft + minWidth ? Math.min(clientX - offsetLeft, maxWidth) : minWidth,
        height: clientY > offsetTop + minHeight ? Math.min(clientY - offsetTop, maxHeight) : minHeight
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleKeydown", function (e) {
      if (e.keyCode === 27) {
        _this.handleCancel();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleCancel", function () {
      var onCancel = _this.props.onCancel;

      if (onCancel !== _noop2.default) {
        onCancel();
      } else {
        _this.setState({
          visible: false
        });
      }

      document.body.parentElement.style['overflow-y'] = 'scroll';
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleOk", function () {
      var _this$props2 = _this.props,
          onOk = _this$props2.onOk,
          onAsyncOk = _this$props2.onAsyncOk;

      if (onAsyncOk !== _noop2.default) {
        _this.setState({
          confirmLoading: true
        }, function () {
          onAsyncOk().finally(function () {
            if (_this.isModalMounted) {
              _this.setState({
                confirmLoading: false
              });
            }
          });
        });
      } else if (onOk !== _noop2.default) {
        onOk();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderMask", function () {
      var _this$props3 = _this.props,
          mask = _this$props3.mask,
          maskClosable = _this$props3.maskClosable,
          maskStyle = _this$props3.maskStyle;
      if (!mask) return null;
      return _react.default.createElement("div", {
        style: maskStyle,
        className: "modal-background",
        onClick: maskClosable ? _this.handleCancel : _noop2.default
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderHeader", function () {
      var _this$props4 = _this.props,
          closable = _this$props4.closable,
          title = _this$props4.title;
      return _react.default.createElement("header", {
        className: "modal-card-head",
        onMouseDown: _this.handleMouseDown
      }, _react.default.createElement("div", {
        className: "modal-card-title"
      }, title), closable ? _react.default.createElement(_Icon.default, {
        name: "close",
        size: 24,
        clickable: true,
        onClick: _this.handleCancel
      }) : null);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderBody", function () {
      var _this$props5 = _this.props,
          footer = _this$props5.footer,
          bodyStyle = _this$props5.bodyStyle,
          children = _this$props5.children;
      return _react.default.createElement("section", {
        style: bodyStyle,
        className: (0, _classnames.default)('modal-card-body', {
          'without-footer': footer === null
        })
      }, children);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderFooter", function () {
      var _this$props6 = _this.props,
          footer = _this$props6.footer,
          okText = _this$props6.okText,
          okType = _this$props6.okType,
          cancelText = _this$props6.cancelText,
          cancelType = _this$props6.cancelType,
          hideOk = _this$props6.hideOk,
          showConfirmLoading = _this$props6.showConfirmLoading;
      var confirmLoading = _this.state.confirmLoading;
      if (footer === null) return null;

      if (footer) {
        return _react.default.createElement("footer", {
          className: "modal-card-foot"
        }, footer);
      }

      return _react.default.createElement("footer", {
        className: "modal-card-foot"
      }, _react.default.createElement(_Button.default, {
        type: cancelType,
        onClick: _this.handleCancel
      }, cancelText || _LocaleProvider.locale.get('CANCEL')), hideOk ? null : _react.default.createElement(_Button.default, {
        type: okType,
        onClick: _this.handleOk,
        disabled: confirmLoading,
        loading: showConfirmLoading && confirmLoading
      }, okText || _LocaleProvider.locale.get('OK')));
    });
    var _confirmLoading = props.confirmLoading,
        _visible = props.visible,
        width = props.width,
        height = props.height,
        appendToBody = props.appendToBody;

    if (appendToBody) {
      var modalContainer = document.getElementById('modal-container');

      if (!modalContainer) {
        modalContainer = document.createElement('div');
        modalContainer.id = 'modal-container';
        document.body.appendChild(modalContainer);
      }

      var modalId = (0, _utils.generateUUID)('modal');
      var modalWrapper = document.createElement('div');
      modalWrapper.id = modalId;
      modalWrapper.className = 'modal-wrapper';
      modalContainer.appendChild(modalWrapper);
      document.activeElement.blur();
      _this.modalWrapper = modalWrapper;
    }

    _this.state = {
      confirmLoading: _confirmLoading,
      visible: _visible,
      width: width,
      height: height,
      left: props.defaultLeft,
      top: props.defaultTop,
      isDragging: false,
      rel: {}
    };
    return _this;
  }

  (0, _createClass2.default)(Modal, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props7 = this.props,
          mask = _this$props7.mask,
          escClosable = _this$props7.escClosable,
          onOpen = _this$props7.onOpen;
      var visible = this.state.visible;

      if (visible && mask) {
        document.body.parentElement.style['overflow-y'] = 'hidden';
      }

      if (escClosable) {
        document.addEventListener('keydown', this.handleKeydown);
      }

      if ((0, _isFunction2.default)(onOpen) && onOpen !== _noop2.default) {
        onOpen();
      }

      this.isModalMounted = true;
      document.addEventListener('mouseup', this.handleMouseUp);
      document.addEventListener('mousemove', this.handleMouseMove);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this$props8 = this.props,
          escClosable = _this$props8.escClosable,
          appendToBody = _this$props8.appendToBody;
      document.body.parentElement.style['overflow-y'] = 'scroll';

      if (escClosable) {
        document.removeEventListener('keydown', this.handleKeydown);
      }

      document.removeEventListener('mousemove', this.handleMouseMove);
      document.removeEventListener('mouseup', this.handleMouseUp);

      if (appendToBody && this.modalWrapper && this.modalWrapper.parentNode) {
        this.modalWrapper.parentNode.removeChild(this.modalWrapper);
        this.modalWrapper = null;
      }

      this.isModalMounted = false;
    }
  }, {
    key: "renderContent",
    value: function renderContent() {
      var _this2 = this;

      var _this$props9 = this.props,
          type = _this$props9.type,
          width = _this$props9.width,
          height = _this$props9.height,
          style = _this$props9.style,
          children = _this$props9.children,
          draggable = _this$props9.draggable,
          resizable = _this$props9.resizable;
      var _this$state2 = this.state,
          top = _this$state2.top,
          left = _this$state2.left,
          isDragging = _this$state2.isDragging,
          stateWidth = _this$state2.width,
          stateHeight = _this$state2.height;
      var calculatedStyle = (0, _objectSpread2.default)({}, style, {
        width: width,
        height: height
      });

      if (draggable) {
        calculatedStyle = (0, _objectSpread2.default)({}, calculatedStyle, {
          top: top,
          left: left
        });
      }

      if (resizable) {
        calculatedStyle = (0, _objectSpread2.default)({}, calculatedStyle, {
          width: stateWidth,
          height: stateHeight
        });
      }

      if (type === 'image') {
        return _react.default.createElement("div", {
          className: (0, _classnames.default)('modal-content', {
            'is-draggable': !!draggable,
            'is-dragging': isDragging
          }),
          style: calculatedStyle,
          draggable: isDragging,
          ref: function ref(n) {
            _this2.nodeModal = n;
          }
        }, children, resizable && this.renderResizeHandler());
      }

      return _react.default.createElement("div", {
        className: (0, _classnames.default)('modal-content', 'modal-card', {
          'is-draggable': !!draggable,
          'is-dragging': isDragging
        }),
        style: calculatedStyle,
        ref: function ref(n) {
          _this2.nodeModal = n;
        }
      }, this.renderHeader(), this.renderBody(), this.renderFooter(), resizable && this.renderResizeHandler());
    }
  }, {
    key: "renderResizeHandler",
    value: function renderResizeHandler() {
      return _react.default.createElement("div", {
        className: "modal-resizer",
        onMouseDown: this.handleResizerMouseDown
      });
    }
  }, {
    key: "renderModal",
    value: function renderModal() {
      var _this$props10 = this.props,
          type = _this$props10.type,
          className = _this$props10.className,
          closable = _this$props10.closable;
      var visible = this.state.visible;
      if (!visible) return null;
      return _react.default.createElement("div", {
        className: (0, _classnames.default)('modal', (0, _defineProperty2.default)({
          'is-active': visible
        }, className, className))
      }, this.renderMask(), this.renderContent(), type === 'image' && closable ? _react.default.createElement("div", {
        className: "modal-close"
      }, _react.default.createElement(_Icon.default, {
        name: "close",
        type: "light",
        size: 24,
        onClick: this.handleCancel
      })) : null);
    }
  }, {
    key: "render",
    value: function render() {
      var appendToBody = this.props.appendToBody;

      if (appendToBody) {
        return (0, _reactDom.createPortal)(this.renderModal(), this.modalWrapper);
      }

      return this.renderModal();
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var visible = prevState.visible,
          confirmLoading = prevState.confirmLoading;
      var nextState = {};

      if ('visible' in nextProps && nextProps.visible !== visible) {
        nextState.visible = nextProps.visible;

        if (nextProps.visible && nextProps.mask) {
          document.body.parentElement.style['overflow-y'] = 'hidden';
        } else {
          document.body.parentElement.style['overflow-y'] = 'scroll';
        }
      }

      if ('confirmLoading' in nextProps && nextProps.confirmLoading !== confirmLoading) {
        nextState.confirmLoading = nextProps.confirmLoading;
      }

      if (nextProps.visible && !prevState.visible) {
        nextState = (0, _objectSpread2.default)({}, nextState, {
          left: nextProps.defaultLeft,
          top: nextProps.defaultTop,
          width: nextProps.width,
          height: nextProps.height
        });
      }

      return nextState;
    }
  }]);
  return Modal;
}(_react.Component);

(0, _defineProperty2.default)(Modal, "propTypes", {
  style: _propTypes.default.object,
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  visible: _propTypes.default.bool,
  width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  minWidth: _propTypes.default.number,
  minHeight: _propTypes.default.number,
  maxWidth: _propTypes.default.number,
  maxHeight: _propTypes.default.number,
  closable: _propTypes.default.bool,
  title: _propTypes.default.node,
  footer: _propTypes.default.node,
  okText: _propTypes.default.string,
  okType: _propTypes.default.string,
  onOk: _propTypes.default.func,
  onAsyncOk: _propTypes.default.func,
  onOpen: _propTypes.default.func,
  hideOk: _propTypes.default.bool,
  cancelText: _propTypes.default.string,
  cancelType: _propTypes.default.string,
  onCancel: _propTypes.default.func,
  confirmLoading: _propTypes.default.bool,
  showConfirmLoading: _propTypes.default.bool,
  mask: _propTypes.default.bool,
  maskClosable: _propTypes.default.bool,
  maskStyle: _propTypes.default.object,
  escClosable: _propTypes.default.bool,
  bodyStyle: _propTypes.default.object,
  type: _propTypes.default.oneOf(['card', 'image']),
  draggable: _propTypes.default.bool,
  resizable: _propTypes.default.bool,
  appendToBody: _propTypes.default.bool,
  defaultLeft: _propTypes.default.string,
  defaultTop: _propTypes.default.string
});
(0, _defineProperty2.default)(Modal, "defaultProps", {
  style: {},
  closable: true,
  type: 'card',
  okType: 'primary',
  hideOk: false,
  onOk: _noop2.default,
  onAsyncOk: _noop2.default,
  onCancel: _noop2.default,
  onOpen: _noop2.default,
  cancelType: 'default',
  mask: true,
  maskClosable: true,
  escClosable: true,
  maskStyle: {},
  bodyStyle: {},
  visible: false,
  draggable: false,
  resizable: false,
  width: 448,
  height: 'auto',
  minWidth: 300,
  minHeight: 200,
  maxWidth: Number.MAX_VALUE,
  maxHeight: Number.MAX_VALUE,
  appendToBody: false,
  showConfirmLoading: true,
  defaultLeft: 'auto',
  defaultTop: 'auto'
});
var _default = Modal;
exports.default = _default;