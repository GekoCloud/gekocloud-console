"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _isFunction2 = _interopRequireDefault(require("lodash/isFunction"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _Modal = _interopRequireDefault(require("./Modal"));

var _utils = require("../../utils");

var _LocaleProvider = require("../LocaleProvider");

var ModalManager =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(ModalManager, _Component);

  function ModalManager() {
    (0, _classCallCheck2.default)(this, ModalManager);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ModalManager).apply(this, arguments));
  }

  (0, _createClass2.default)(ModalManager, [{
    key: "render",
    value: function render() {
      return _react.default.createElement(_Modal.default, this.props);
    }
  }]);
  return ModalManager;
}(_react.Component);

(0, _defineProperty2.default)(ModalManager, "open", function (options) {
  var modalId = (0, _utils.generateUUID)('modal');
  var modalWrapper = document.createElement('div');
  modalWrapper.id = modalId;
  modalWrapper.className = 'modal-wrapper';
  document.body.appendChild(modalWrapper);
  document.activeElement.blur();

  var wrapCancel = function wrapCancel() {
    if ((0, _isFunction2.default)(options.onCancel)) {
      options.onCancel();
    }

    ModalManager.close(modalWrapper);
  };

  _reactDom.default.render(_react.default.createElement(_Modal.default, (0, _extends2.default)({}, (0, _omit2.default)(options, 'content', 'onCancel'), {
    onCancel: wrapCancel,
    visible: true
  }), options.content), modalWrapper);

  return modalWrapper;
});
(0, _defineProperty2.default)(ModalManager, "close", function (modal) {
  var unmounted = _reactDom.default.unmountComponentAtNode(modal);

  if (unmounted && modal.parentNode) {
    modal.parentNode.removeChild(modal);
  }
});
(0, _defineProperty2.default)(ModalManager, "status", function (args) {
  var options = {
    title: _LocaleProvider.locale.get('TIPS'),
    hideOk: true,
    cancelText: _LocaleProvider.locale.get('OK'),
    cancelType: 'primary',
    onCancel: args.onCancel,
    content: _react.default.createElement("div", null, _react.default.createElement("span", {
      className: "modal-icon"
    }, _react.default.createElement("i", {
      className: "icon icon-".concat(args.type)
    })), _react.default.createElement("div", null, args.content))
  };
  return ModalManager.open(options);
});
(0, _defineProperty2.default)(ModalManager, "info", function (content, onCancel) {
  return ModalManager.status({
    content: content,
    onCancel: onCancel,
    type: 'info'
  });
});
(0, _defineProperty2.default)(ModalManager, "success", function (content, onCancel) {
  return ModalManager.status({
    content: content,
    onCancel: onCancel,
    type: 'success'
  });
});
(0, _defineProperty2.default)(ModalManager, "warning", function (content, onCancel) {
  return ModalManager.status({
    content: content,
    onCancel: onCancel,
    type: 'warning'
  });
});
(0, _defineProperty2.default)(ModalManager, "error", function (content, onCancel) {
  return ModalManager.status({
    content: content,
    onCancel: onCancel,
    type: 'error'
  });
});
var _default = ModalManager;
exports.default = _default;