"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _includes2 = _interopRequireDefault(require("lodash/includes"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _NotifyManager = _interopRequireDefault(require("./NotifyManager"));

var _position = require("./position");

var _utils = require("../../utils");

var prefixCls = 'notify';
var NoticeType = ['success', 'info', 'warning', 'error'];
var notifyInstance = {};

var _open = function open(args) {
  var defaultOptions = {
    duration: 4500,
    closable: true,
    top: 24,
    bottom: 24,
    left: 20,
    right: 20,
    placement: 'topRight',
    type: 'info'
  };
  var options = (0, _objectSpread2.default)({}, defaultOptions, args);
  var position;

  if (!(0, _includes2.default)(_position.PLACEMENT, options.placement)) {
    position = defaultOptions.placement;
  } else {
    position = options.placement;
  }

  var title = options.title,
      content = options.content,
      icon = options.icon,
      type = options.type,
      btns = options.btns,
      key = options.key,
      top = options.top,
      right = options.right,
      bottom = options.bottom,
      left = options.left;
  var cacheKey = "".concat(prefixCls, "-").concat(position);
  var newOptions = (0, _omit2.default)(options, ['title', 'content', 'placement', 'icon', 'type', 'btns']);
  var iconNode = null;
  var customIcon = false;

  if (_react.default.isValidElement(icon)) {
    iconNode = icon;
    customIcon = true;
  } else if ((0, _includes2.default)(NoticeType, type)) {
    iconNode = _react.default.createElement("span", {
      className: "icon icon-".concat(type)
    });
  }

  var target = key || (0, _utils.generateUUID)('notify');

  var addNotice = function addNotice(notify) {
    notify.createNotice((0, _objectSpread2.default)({
      key: target,
      content: _react.default.createElement("div", {
        className: iconNode ? "".concat(prefixCls, "-with-icon") : ''
      }, iconNode && _react.default.createElement("div", {
        className: (0, _classnames.default)("".concat(prefixCls, "-icon"), {
          'is-custom-icon': customIcon
        })
      }, iconNode), Boolean(title) && _react.default.createElement("div", {
        className: "".concat(prefixCls, "-title")
      }, title), Boolean(content) && _react.default.createElement("div", {
        className: "".concat(prefixCls, "-content")
      }, content), Boolean(btns) && _react.default.createElement("div", {
        className: "".concat(prefixCls, "-btns")
      }, btns))
    }, newOptions));
  };

  if (notifyInstance[cacheKey]) {
    addNotice(notifyInstance[cacheKey]);
  } else {
    _NotifyManager.default.newInstance({
      prefixCls: prefixCls,
      animation: 'drop',
      className: cacheKey,
      style: (0, _position.getPlacementStyle)(position, top, right, bottom, left)
    }, function (notify) {
      notifyInstance[cacheKey] = notify;
      addNotice(notify);
    });
  }

  return (0, _objectSpread2.default)({}, notifyInstance[cacheKey], {
    key: target
  });
};

var convert = function convert(args1, args2, type) {
  if ((0, _isString2.default)(args1)) {
    return _open({
      title: args1,
      content: args2,
      type: type
    });
  }

  return _open((0, _objectSpread2.default)({}, args1, {
    type: type
  }));
};

var _default = {
  open: function open(args) {
    return _open(args);
  },
  info: function info(args1, args2) {
    return convert(args1, args2, 'info');
  },
  success: function success(args1, args2) {
    return convert(args1, args2, 'success');
  },
  warning: function warning(args1, args2) {
    return convert(args1, args2, 'warning');
  },
  error: function error(args1, args2) {
    return convert(args1, args2, 'error');
  },
  close: function close(key) {
    Object.keys(notifyInstance).forEach(function (cacheKey) {
      return notifyInstance[cacheKey].removeNotice(key);
    });
  }
};
exports.default = _default;