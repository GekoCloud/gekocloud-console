"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _includes2 = _interopRequireDefault(require("lodash/includes"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _Circle = _interopRequireDefault(require("./Circle"));

var Progress =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2.default)(Progress, _PureComponent);

  function Progress() {
    (0, _classCallCheck2.default)(this, Progress);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Progress).apply(this, arguments));
  }

  (0, _createClass2.default)(Progress, [{
    key: "render",
    value: function render() {
      var _classNames;

      var props = this.props;
      var prefixCls = props.prefixCls,
          className = props.className,
          _props$percent = props.percent,
          percent = _props$percent === void 0 ? 0 : _props$percent,
          status = props.status,
          format = props.format,
          size = props.size,
          successPercent = props.successPercent,
          type = props.type,
          strokeWidth = props.strokeWidth,
          width = props.width,
          style = props.style,
          showInfo = props.showInfo,
          _props$gapDegree = props.gapDegree,
          gapDegree = _props$gapDegree === void 0 ? 0 : _props$gapDegree,
          gapPosition = props.gapPosition,
          onIconClick = props.onIconClick,
          title = props.title,
          start = props.start,
          end = props.end,
          unit = props.unit,
          primaryColor = props.primaryColor,
          secondaryColor = props.secondaryColor,
          errorColor = props.errorColor,
          restProps = (0, _objectWithoutProperties2.default)(props, ["prefixCls", "className", "percent", "status", "format", "size", "successPercent", "type", "strokeWidth", "width", "style", "showInfo", "gapDegree", "gapPosition", "onIconClick", "title", "start", "end", "unit", "primaryColor", "secondaryColor", "errorColor"]);
      var color = status === 'exception' ? errorColor : primaryColor;
      var currentPercentStr = successPercent ? successPercent.toString() : percent.toString();
      var currentPercent = parseInt(currentPercentStr, 10);
      var progressStatus = currentPercent >= 100 && !('status' in props) ? 'success' : status || 'normal';
      var progressInfo;
      var progress;

      var textFormatter = format || function (percentNumber) {
        return "".concat(percentNumber, "%");
      };

      var sizeNumber = 18;

      if (type === 'circle' && size !== 'small') {
        sizeNumber = 24;
      }

      var iconClickStyle = {};

      if (onIconClick !== _noop2.default) {
        iconClickStyle.cursor = 'pointer';
      }

      if (showInfo && !title) {
        var text;

        if (progressStatus === 'exception') {
          text = format ? textFormatter(percent) : _react.default.createElement(_Icon.default, {
            style: iconClickStyle,
            name: "restart",
            size: sizeNumber,
            onClick: onIconClick
          });
        } else if (type === 'circle' && progressStatus === 'success') {
          text = format ? textFormatter(percent) : _react.default.createElement(_Icon.default, {
            name: "check",
            size: sizeNumber,
            type: "coloured"
          });
        } else if (progressStatus === 'success') {
          text = _react.default.createElement(_Icon.default, {
            name: "check",
            size: sizeNumber,
            type: "coloured"
          });
        } else {
          text = textFormatter(percent);
        }

        if (!(type === 'circle' && size === 'small' && status !== 'exception')) {
          progressInfo = _react.default.createElement("span", {
            className: "".concat(prefixCls, "-text")
          }, text);
        } else if (type === 'circle' && size === 'small' && progressStatus === 'success') {
          progressInfo = _react.default.createElement(_Icon.default, {
            name: "check",
            size: sizeNumber,
            type: "coloured"
          });
        }
      }

      if (type === 'line') {
        var percentStyle = {
          width: "".concat(percent <= 100 ? percent : 100, "%"),
          height: strokeWidth || 4
        };

        if (color) {
          percentStyle.backgroundColor = color;
        }

        if (start && end && !percent) {
          percentStyle.width = "".concat(start * 100 / end * 100 / 100, "%");
        }

        var successPercentStyle = {
          width: "".concat(successPercent, "%"),
          height: strokeWidth || 4
        };
        var successSegment = successPercent !== undefined ? _react.default.createElement("div", {
          className: "".concat(prefixCls, "-success-bg"),
          style: successPercentStyle
        }) : null;
        progress = _react.default.createElement("div", null, title && _react.default.createElement("div", {
          className: "".concat(prefixCls, "-title")
        }, title, _react.default.createElement("div", {
          className: "".concat(prefixCls, "-title--info")
        }, !start || !end ? textFormatter(percent) : "".concat(start, " ").concat(unit, " / ").concat(end, " ").concat(unit))), _react.default.createElement("div", {
          className: "".concat(prefixCls, "-outer")
        }, _react.default.createElement("div", {
          className: "".concat(prefixCls, "-inner"),
          style: {
            backgroundColor: secondaryColor
          }
        }, _react.default.createElement("div", {
          className: "".concat(prefixCls, "-bg"),
          style: percentStyle
        }), successSegment)), progressInfo);
      } else if (type === 'circle' || type === 'dashboard') {
        var circleSize = width || size !== 'small' ? 64 : 18;
        var circleStyle = {
          width: circleSize,
          height: circleSize,
          fontSize: circleSize * 0.15 + 6
        };
        var circleWidth = strokeWidth || 3;
        var gapPos = gapPosition || type === 'dashboard' && 'bottom' || 'top';
        var gapDeg = gapDegree || (type === 'dashboard' ? 75 : 0);
        var showCircle = !((0, _includes2.default)(['success', 'exception'], progressStatus) && size === 'small');
        progress = _react.default.createElement("div", {
          className: "".concat(prefixCls, "-inner"),
          style: circleStyle
        }, showCircle && _react.default.createElement(_Circle.default, {
          percent: percent,
          strokeWidth: circleWidth,
          trailWidth: circleWidth,
          trailColor: secondaryColor,
          strokeColor: color,
          prefixCls: prefixCls,
          gapDegree: gapDeg,
          gapPosition: gapPos,
          size: size
        }), progressInfo);
      }

      var strokeStyle = !showInfo && type === 'line' ? {
        lineHeight: 0
      } : {};
      var classString = (0, _classnames.default)(prefixCls, (_classNames = {}, (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-").concat(type === 'dashboard' && 'circle' || type), true), (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-status-").concat(progressStatus), true), (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-show-info"), showInfo), (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-").concat(size), size), _classNames), className);
      return _react.default.createElement("div", (0, _extends2.default)({}, restProps, {
        className: classString,
        style: Object.assign({}, style, strokeStyle)
      }), progress);
    }
  }]);
  return Progress;
}(_react.PureComponent);

(0, _defineProperty2.default)(Progress, "propTypes", {
  prefixCls: _propTypes.default.string,
  status: _propTypes.default.oneOf(['normal', 'exception', 'active', 'success']),
  type: _propTypes.default.oneOf(['line', 'circle', 'dashboard']),
  showInfo: _propTypes.default.bool,
  percent: _propTypes.default.number,
  width: _propTypes.default.number,
  strokeWidth: _propTypes.default.number,
  format: _propTypes.default.func,
  gapDegree: _propTypes.default.number,
  onIconClick: _propTypes.default.func,
  size: _propTypes.default.oneOf(['default', 'small']),
  title: _propTypes.default.string,
  start: _propTypes.default.number,
  end: _propTypes.default.number,
  primaryColor: _propTypes.default.string,
  secondaryColor: _propTypes.default.string,
  errorColor: _propTypes.default.string,
  className: _propTypes.default.string,
  successPercent: _propTypes.default.number,
  style: _propTypes.default.object,
  gapPosition: _propTypes.default.oneOf(['top', 'bottom', 'left', 'right']),
  unit: _propTypes.default.string
});
(0, _defineProperty2.default)(Progress, "defaultProps", {
  type: 'line',
  percent: 0,
  showInfo: true,
  prefixCls: 'lego-progress',
  onIconClick: _noop2.default,
  size: 'default'
});
var _default = Progress;
exports.default = _default;