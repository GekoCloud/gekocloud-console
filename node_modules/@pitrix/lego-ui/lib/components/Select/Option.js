"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _Checkbox = _interopRequireDefault(require("../Checkbox/Checkbox"));

var blockEvent = function blockEvent(event) {
  event.preventDefault();
  event.stopPropagation();

  if (event.target.tagName !== 'A' || !('href' in event.target)) {
    return;
  }

  if (event.target.target) {
    window.open(event.target.href, event.target.target);
  } else {
    window.location.href = event.target.href;
  }
};

var Option =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Option, _Component);

  function Option() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Option);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Option)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFocus", function (event) {
      var _this$props = _this.props,
          isFocused = _this$props.isFocused,
          onFocus = _this$props.onFocus,
          option = _this$props.option;

      if (!isFocused) {
        onFocus(option, event);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMouseDown", function (event) {
      var _this$props2 = _this.props,
          onSelect = _this$props2.onSelect,
          option = _this$props2.option;
      event.preventDefault();
      event.stopPropagation();
      onSelect(option, event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMouseEnter", function (event) {
      _this.onFocus(event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMouseMove", function (event) {
      _this.onFocus(event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleTouchEnd", function (event) {
      // Check if the view is being dragged, In this case
      // we don't want to fire the click event (because the user only wants to scroll)
      if (_this.dragging) return;

      _this.handleMouseDown(event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleTouchMove", function () {
      // Set a flag that the view is being dragged
      _this.dragging = true;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleTouchStart", function () {
      // Set a flag that the view is not being dragged
      _this.dragging = false;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderDisabledOption", function () {
      var _this$props3 = _this.props,
          propsClassName = _this$props3.className,
          option = _this$props3.option,
          isMulti = _this$props3.isMulti,
          children = _this$props3.children;
      var className = (0, _classnames.default)(propsClassName, option.className);
      return _react.default.createElement("div", {
        className: className,
        onMouseDown: blockEvent,
        onClick: blockEvent
      }, isMulti ? _react.default.createElement("div", {
        className: "option-checkbox-area"
      }, _react.default.createElement(_Checkbox.default, {
        checked: false,
        disabled: true
      })) : null, children);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderSingleOption", function () {
      var _this$props4 = _this.props,
          option = _this$props4.option,
          isSelected = _this$props4.isSelected,
          propsClassName = _this$props4.className,
          children = _this$props4.children;
      var className = (0, _classnames.default)(propsClassName, option.className);
      return _react.default.createElement("div", {
        className: className,
        style: option.style,
        onMouseDown: _this.handleMouseDown,
        onMouseEnter: _this.handleMouseEnter,
        onMouseMove: _this.handleMouseMove,
        onTouchStart: _this.handleTouchStart,
        onTouchMove: _this.handleTouchMove,
        onTouchEnd: _this.handleTouchEnd,
        title: option.title
      }, children, isSelected ? _react.default.createElement("div", {
        className: "option-selected-area"
      }, _react.default.createElement(_Icon.default, {
        name: "check",
        size: "small",
        type: "coloured"
      })) : null);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderMultiOption", function () {
      var _this$props5 = _this.props,
          option = _this$props5.option,
          isSelected = _this$props5.isSelected,
          propsClassName = _this$props5.className,
          children = _this$props5.children;
      var className = (0, _classnames.default)(propsClassName, option.className);
      return _react.default.createElement("div", {
        className: className,
        style: option.style,
        onMouseDown: _this.handleMouseDown,
        onMouseEnter: _this.handleMouseEnter,
        onMouseMove: _this.handleMouseMove,
        onTouchStart: _this.handleTouchStart,
        onTouchMove: _this.handleTouchMove,
        onTouchEnd: _this.handleTouchEnd,
        title: option.title
      }, _react.default.createElement("div", {
        className: "option-checkbox-area"
      }, _react.default.createElement(_Checkbox.default, {
        checked: isSelected,
        readOnly: true
      })), children);
    });
    return _this;
  }

  (0, _createClass2.default)(Option, [{
    key: "render",
    value: function render() {
      var _this$props6 = this.props,
          isDisabled = _this$props6.isDisabled,
          isMulti = _this$props6.isMulti;
      if (isDisabled) return this.renderDisabledOption();

      if (isMulti) {
        return this.renderMultiOption();
      }

      return this.renderSingleOption();
    }
  }]);
  return Option;
}(_react.Component);

(0, _defineProperty2.default)(Option, "propTypes", {
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  // className (based on mouse position)
  isDisabled: _propTypes.default.bool,
  // the option is disabled
  isFocused: _propTypes.default.bool,
  // the option is focused
  isSelected: _propTypes.default.bool,
  // the option is selected
  onFocus: _propTypes.default.func,
  // method to handle mouseEnter on option element
  onSelect: _propTypes.default.func,
  // method to handle click on option element
  option: _propTypes.default.object.isRequired,
  // object that is base for that option
  isMulti: _propTypes.default.bool
});
var _default = Option;
exports.default = _default;