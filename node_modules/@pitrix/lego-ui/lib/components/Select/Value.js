"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _Tag = _interopRequireDefault(require("../Tag"));

var Value =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Value, _Component);

  function Value() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Value);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Value)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRemove", function (event) {
      var _this$props = _this.props,
          onRemove = _this$props.onRemove,
          value = _this$props.value;
      event.preventDefault();
      event.stopPropagation();
      onRemove(value);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMouseDown", function (event) {
      var _this$props2 = _this.props,
          onClick = _this$props2.onClick,
          value = _this$props2.value;

      if (event.type === 'mousedown' && event.button !== 0) {
        return;
      }

      if (onClick) {
        event.stopPropagation();
        onClick(value, event);
        return;
      }

      if (value.href) {
        event.stopPropagation();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleTouchEndRemove", function (event) {
      // Check if the view is being dragged, In this case
      // we don't want to fire the click event (because the user only wants to scroll)
      if (_this.dragging) return; // Fire the mouse events

      _this.onRemove(event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleTouchMove", function () {
      // Set a flag that the view is being dragged
      _this.dragging = true;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleTouchStart", function () {
      // Set a flag that the view is not being dragged
      _this.dragging = false;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderRemoveIcon", function () {
      var _this$props3 = _this.props,
          disabled = _this$props3.disabled,
          onRemove = _this$props3.onRemove;

      if (!(disabled || !onRemove)) {
        return _react.default.createElement("span", {
          key: "icon",
          className: "select-value-icon",
          onMouseDown: _this.onRemove,
          onTouchEnd: _this.handleTouchEndRemove,
          onTouchStart: _this.handleTouchStart,
          onTouchMove: _this.handleTouchMove
        }, _react.default.createElement(_Icon.default, {
          name: "close"
        }));
      }

      return null;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderLabel", function () {
      var className = 'select-value-label';
      var _this$props4 = _this.props,
          onClick = _this$props4.onClick,
          value = _this$props4.value,
          children = _this$props4.children,
          id = _this$props4.id;
      return onClick || value.href ? _react.default.createElement("a", {
        key: "label",
        className: className,
        href: value.href,
        target: value.target,
        onMouseDown: _this.handleMouseDown,
        onTouchEnd: _this.handleMouseDown
      }, children) : _react.default.createElement("span", {
        key: "label",
        className: className,
        id: id
      }, children);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderValue", function () {
      var isMulti = _this.props.isMulti;

      if (isMulti) {
        return _react.default.createElement(_Tag.default, {
          onClick: function onClick(e) {
            return e.stopPropagation;
          }
        }, _this.renderLabel(), _this.renderRemoveIcon());
      }

      return [_this.renderLabel(), _this.renderRemoveIcon()];
    });
    return _this;
  }

  (0, _createClass2.default)(Value, [{
    key: "render",
    value: function render() {
      var value = this.props.value;
      return _react.default.createElement("div", {
        className: (0, _classnames.default)('select-value', value.className),
        style: value.style,
        title: value.title
      }, this.renderValue());
    }
  }]);
  return Value;
}(_react.Component);

(0, _defineProperty2.default)(Value, "propTypes", {
  children: _propTypes.default.node,
  disabled: _propTypes.default.bool,
  // disabled prop passed to ReactSelect
  id: _propTypes.default.string,
  // Unique id for the value
  onClick: _propTypes.default.func,
  // method to handle click on value label
  onRemove: _propTypes.default.func,
  // method to handle removal of the value
  value: _propTypes.default.object.isRequired,
  // the option object for this value
  isMulti: _propTypes.default.bool
});
var _default = Value;
exports.default = _default;