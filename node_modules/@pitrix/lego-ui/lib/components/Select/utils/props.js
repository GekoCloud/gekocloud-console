"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultProps = exports.propTypes = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _defaultArrowRenderer = _interopRequireDefault(require("./defaultArrowRenderer"));

var _defaultClearRenderer = _interopRequireDefault(require("./defaultClearRenderer"));

var _defaultMenuRenderer = _interopRequireDefault(require("./defaultMenuRenderer"));

var _Option = _interopRequireDefault(require("../Option"));

var _Value = _interopRequireDefault(require("../Value"));

var stringOrNode = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]);

var stringOrNumber = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]);
/* eslint-disable max-len */


var propTypes = {
  arrowRenderer: _propTypes.default.func,
  // create the drop-down caret element
  autoBlur: _propTypes.default.bool,
  // automatically blur the component when an option is selected
  autoFocus: _propTypes.default.bool,
  // autofocus the component on mount
  backspaceRemoves: _propTypes.default.bool,
  // whether backspace removes an item if there is no text input
  className: _propTypes.default.string,
  // className for the outer element
  clearAllText: stringOrNode,
  // title for the "clear" control when multi: true
  clearRenderer: _propTypes.default.func,
  // create clearable x element
  clearValueText: stringOrNode,
  // title for the "clear" control
  clearable: _propTypes.default.bool,
  // should it be possible to reset value
  closeOnSelect: _propTypes.default.bool,
  // whether to close the menu when a value is selected
  defaultValue: _propTypes.default.any,
  // initial field value
  deleteRemoves: _propTypes.default.bool,
  // whether delete removes an item if there is no text input
  disabled: _propTypes.default.bool,
  // whether the Select is disabled or not
  escapeClearsValue: _propTypes.default.bool,
  // whether escape clears the value when the menu is closed
  isLoadingAtBottom: _propTypes.default.bool,
  // whether display the loading status at the bottom
  bottomTextVisible: _propTypes.default.bool,
  // if the async data has gone out
  id: _propTypes.default.string,
  // html id to set on the input element for accessibility or tests
  inputProps: _propTypes.default.object,
  // custom attributes for the Input
  inputRenderer: _propTypes.default.func,
  // returns a custom input component
  instanceId: _propTypes.default.string,
  // set the components instanceId
  isLoading: _propTypes.default.bool,
  // whether the Select is loading externally or not (such as options being loaded)
  labelKey: _propTypes.default.string,
  // path of the label value in option objects
  menuContainerStyle: _propTypes.default.object,
  // optional style to apply to the menu container
  menuRenderer: _propTypes.default.func,
  // renders a custom menu with options
  menuStyle: _propTypes.default.object,
  // optional style to apply to the menu
  multi: _propTypes.default.bool,
  // multi-value input
  name: _propTypes.default.string,
  // generates a hidden <input /> tag with this field name for html forms
  noResultsText: stringOrNode,
  // placeholder displayed when there are no matching search results
  onBlur: _propTypes.default.func,
  // onBlur handler: function (event) {}
  onBlurResetsInput: _propTypes.default.bool,
  // whether input is cleared on blur
  onChange: _propTypes.default.func,
  // onChange handler: function (newValue) {}
  onClose: _propTypes.default.func,
  // fires when the menu is closed
  onCloseResetsInput: _propTypes.default.bool,
  // whether input is cleared when menu is closed through the arrow
  onFocus: _propTypes.default.func,
  // onFocus handler: function (event) {}
  onInputChange: _propTypes.default.func,
  // onInputChange handler: function (inputValue) {}
  onInputKeyDown: _propTypes.default.func,
  // input keyDown handler: function (event) {}
  onMenuScrollToBottom: _propTypes.default.func,
  // fires when the menu is scrolled to the bottom; can be used to paginate options
  onOpen: _propTypes.default.func,
  // fires when the menu is opened
  onSelectResetsInput: _propTypes.default.bool,
  // whether input is cleared on select (works only for multiselect)
  onValueClick: _propTypes.default.func,
  // onClick handler for value labels: function (value, event) {}
  openOnClick: _propTypes.default.bool,
  // boolean to control opening the menu when the control is clicked
  openOnFocus: _propTypes.default.bool,
  // always open options menu on focus
  openOnClear: _propTypes.default.bool,
  // boolean to control opening the menu when the input is cleared
  optionClassName: _propTypes.default.string,
  // additional class(es) to apply to the <Option /> elements
  optionComponent: _propTypes.default.func,
  // option component to render in dropdown
  optionRenderer: _propTypes.default.func,
  // optionRenderer: function (option) {}
  options: _propTypes.default.array,
  // array of options
  prefixIcon: _propTypes.default.node,
  // the icon shown in the front of the input
  placeholder: stringOrNode,
  // field placeholder, displayed when there's no value
  bottomText: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  // label to show bottom reached
  resetValue: _propTypes.default.any,
  // value to use when you clear the control
  scrollMenuIntoView: _propTypes.default.bool,
  // boolean to enable the viewport to shift so that the full menu fully visible when engaged
  searchable: _propTypes.default.bool,
  // whether to enable searching feature or not
  simpleValue: _propTypes.default.bool,
  // pass the value to onChange as a simple value, defaults to false
  size: _propTypes.default.string,
  // control size
  style: _propTypes.default.object,
  // optional style to apply to the control
  tabIndex: stringOrNumber,
  // optional tab index of the control
  tabSelectsValue: _propTypes.default.bool,
  // whether to treat tabbing out while focused to be value selection
  value: _propTypes.default.any,
  // controlled field value
  valueComponent: _propTypes.default.func,
  // value component to render
  valueKey: _propTypes.default.string,
  // path of the label value in option objects
  valueRenderer: _propTypes.default.func,
  // valueRenderer: function (option) {}
  wrapperStyle: _propTypes.default.object // optional style to apply to the component wrapper

};
exports.propTypes = propTypes;
var defaultProps = {
  arrowRenderer: _defaultArrowRenderer.default,
  backspaceRemoves: true,
  clearable: false,
  clearRenderer: _defaultClearRenderer.default,
  closeOnSelect: true,
  deleteRemoves: true,
  disabled: false,
  escapeClearsValue: true,
  isLoadingAtBottom: false,
  bottomTextVisible: false,
  inputProps: {},
  isLoading: false,
  labelKey: 'label',
  menuRenderer: _defaultMenuRenderer.default,
  multi: false,
  onBlurResetsInput: true,
  onCloseResetsInput: true,
  onSelectResetsInput: true,
  openOnClick: false,
  openOnFocus: false,
  openOnClear: false,
  optionComponent: _Option.default,
  options: [],
  prefixIcon: null,
  scrollMenuIntoView: true,
  searchable: false,
  simpleValue: true,
  size: 'default',
  tabSelectsValue: true,
  valueComponent: _Value.default,
  valueKey: 'value'
};
exports.defaultProps = defaultProps;