"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Track = _interopRequireDefault(require("./common/Track"));

var _createSlider = _interopRequireDefault(require("./common/createSlider"));

var utils = _interopRequireWildcard(require("./sliderUtils"));

var _Range = _interopRequireDefault(require("./Range"));

var _Handle = _interopRequireDefault(require("./Handle"));

var Slider =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Slider, _Component);

  function Slider(_props) {
    var _this;

    (0, _classCallCheck2.default)(this, Slider);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Slider).call(this, _props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onChange", function (state) {
      var _assertThisInitialize = (0, _assertThisInitialized2.default)(_this),
          props = _assertThisInitialize.props;

      var isNotControlled = !('value' in props);

      if (isNotControlled) {
        _this.setState(state);
      }

      var changedValue = state.value;
      props.onChange(changedValue);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onStart", function (position) {
      _this.setState({
        dragging: true
      });

      var _assertThisInitialize2 = (0, _assertThisInitialized2.default)(_this),
          props = _assertThisInitialize2.props;

      var prevValue = _this.getValue();

      props.onBeforeChange(prevValue);

      var value = _this.calcValueByPos(position);

      _this.startValue = value;
      _this.startPosition = position;
      if (value === prevValue) return;
      _this.prevMovedHandleIndex = 0;

      _this.onChange({
        value: value
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onEnd", function () {
      var onAfterChange = _this.props.onAfterChange;

      _this.setState({
        dragging: false
      });

      _this.removeDocumentEvents();

      onAfterChange(_this.getValue());
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMove", function (e, position) {
      utils.pauseEvent(e);
      var oldValue = _this.state.value;

      var value = _this.calcValueByPos(position);

      if (value === oldValue) return;

      _this.onChange({
        value: value
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onKeyboard", function (e) {
      var valueMutator = utils.getKeyboardValueMutator(e);

      if (valueMutator) {
        utils.pauseEvent(e);

        var _assertThisInitialize3 = (0, _assertThisInitialized2.default)(_this),
            state = _assertThisInitialize3.state;

        var oldValue = state.value;
        var mutatedValue = valueMutator(oldValue, _this.props);

        var value = _this.trimAlignValue(mutatedValue);

        if (value === oldValue) return;

        _this.onChange({
          value: value
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getValue", function () {
      var value = _this.state.value;
      return value;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getLowerBound", function () {
      var min = _this.props.min;
      return min;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getUpperBound", function () {
      var value = _this.state.value;
      return value;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "trimAlignValue", function (v) {
      var nextProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var mergedProps = (0, _objectSpread2.default)({}, _this.props, nextProps);
      var val = utils.ensureValueInRange(v, mergedProps);
      return utils.ensureValuePrecision(val, mergedProps);
    });
    var defaultValue = _props.defaultValue !== undefined ? _props.defaultValue : _props.min;

    var _value = _props.value !== undefined ? _props.value : defaultValue;

    _this.state = {
      value: _this.trimAlignValue(_value),
      dragging: false
    };
    return _this;
  }

  (0, _createClass2.default)(Slider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          autoFocus = _this$props.autoFocus,
          disabled = _this$props.disabled;

      if (autoFocus && !disabled) {
        this.focus();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var _this$props2 = this.props,
          onChange = _this$props2.onChange,
          nextValue = _this$props2.value;
      var prevValue = prevState.value;
      if (!('value' in this.props || 'min' in this.props || 'max' in this.props)) return;
      var value = nextValue !== undefined ? nextValue : prevValue;
      var trimNextValue = this.trimAlignValue(value, this.props);
      if (trimNextValue === prevValue) return;

      if (utils.isValueOutOfRange(value, this.props)) {
        onChange(trimNextValue);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          prefixCls = _this$props3.prefixCls,
          vertical = _this$props3.vertical,
          included = _this$props3.included,
          disabled = _this$props3.disabled,
          trackStyle = _this$props3.trackStyle,
          handleStyle = _this$props3.handleStyle,
          min = _this$props3.min,
          max = _this$props3.max,
          handleGenerator = _this$props3.handle;
      var _this$state = this.state,
          value = _this$state.value,
          dragging = _this$state.dragging;
      var offset = this.calcOffset(value);
      var handle = handleGenerator({
        className: "".concat(prefixCls, "-handle"),
        prefixCls: prefixCls,
        vertical: vertical,
        offset: offset,
        value: value,
        dragging: dragging,
        disabled: disabled,
        min: min,
        max: max,
        index: 0,
        style: handleStyle[0] || handleStyle,
        ref: function ref(h) {
          return _this2.saveHandle(0, h);
        }
      });

      var track = _react.default.createElement(_Track.default, {
        className: "".concat(prefixCls, "-track"),
        vertical: vertical,
        included: included,
        offset: 0,
        length: offset,
        style: trackStyle[0] || trackStyle
      });

      return {
        tracks: track,
        handles: handle
      };
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var prevValue = prevState.value;
      if (!('value' in nextProps || 'min' in nextProps || 'max' in nextProps)) return null;
      var value = nextProps.value !== undefined ? nextProps.value : prevValue;
      var rangeValue = utils.ensureValueInRange(value, nextProps);
      var nextValue = utils.ensureValuePrecision(rangeValue, nextProps);
      if (nextValue === prevValue) return null;
      return {
        value: nextValue
      };
    }
  }]);
  return Slider;
}(_react.Component);

(0, _defineProperty2.default)(Slider, "Range", _Range.default);
(0, _defineProperty2.default)(Slider, "Handle", _Handle.default);
(0, _defineProperty2.default)(Slider, "propTypes", {
  defaultValue: _propTypes.default.number,
  min: _propTypes.default.number,
  max: _propTypes.default.number,
  handle: _propTypes.default.func,
  value: _propTypes.default.number,
  disabled: _propTypes.default.bool,
  autoFocus: _propTypes.default.bool,
  onChange: _propTypes.default.func,
  onAfterChange: _propTypes.default.func,
  prefixCls: _propTypes.default.string,
  vertical: _propTypes.default.bool,
  included: _propTypes.default.bool,
  trackStyle: _propTypes.default.object,
  handleStyle: _propTypes.default.object,
  onBeforeChange: _propTypes.default.func
});

var _default = (0, _createSlider.default)(Slider);

exports.default = _default;