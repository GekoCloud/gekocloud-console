"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Icon = _interopRequireDefault(require("../../Icon"));

var _Tag = _interopRequireDefault(require("../../Tag"));

var _Autosuggest = _interopRequireDefault(require("./Autosuggest"));

var FilterInput =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(FilterInput, _Component);

  function FilterInput(props) {
    var _this;

    (0, _classCallCheck2.default)(this, FilterInput);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(FilterInput).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleInputChange", function (event, value) {
      var onInputChange = _this.props.onInputChange;

      _this.setState({
        hasValue: value !== ''
      });

      onInputChange(event, value);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleInputFocus", function (event) {
      var onFocus = _this.props.onFocus;

      _this.setState({
        hasValue: true,
        isFocused: true
      }, function () {
        onFocus(event);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleInputBlur", function (event) {
      var value = _this.autosuggest.value;
      var onBlur = _this.props.onBlur;

      _this.setState({
        hasValue: value !== '',
        isFocused: false
      }, function () {
        onBlur(event);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClick", function () {
      _this.autosuggest.focus();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleSelect", function (value) {
      _this.handleAdd(value);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleAdd", function (item) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          isMultiKeyword = _this$props.isMultiKeyword;
      var tags = _this.state.tags;
      var newTags = [];

      if (item.filter !== 'keyword' || isMultiKeyword) {
        newTags = [].concat((0, _toConsumableArray2.default)(tags), [item]);
      } else {
        newTags = [].concat((0, _toConsumableArray2.default)(tags.filter(function (n) {
          return n.filter !== 'keyword';
        })), [item]);
      }

      _this.setState({
        tags: newTags
      }, function () {
        onChange(newTags);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleDelete", function () {
      var tags = _this.state.tags;
      var onChange = _this.props.onChange;
      if (tags.length <= 0) return;
      var newTags = tags.filter(function (n, index) {
        return index !== tags.length - 1;
      });

      _this.setState({
        tags: newTags
      }, function () {
        onChange(newTags);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleCloseTag", function (_ref) {
      var value = _ref.value,
          filter = _ref.filter;
      var tags = _this.state.tags;
      var onChange = _this.props.onChange;
      var newTags = tags.filter(function (n) {
        if (n.value === value && n.filter === filter) {
          return false;
        }

        return true;
      });

      _this.setState({
        tags: newTags
      }, function () {
        onChange(newTags);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClear", function (event) {
      var _this$props2 = _this.props,
          onChange = _this$props2.onChange,
          onClear = _this$props2.onClear;
      event.stopPropagation();

      _this.setState({
        tags: [],
        hasValue: false
      }, function () {
        _this.autosuggest.clear();

        onClear([]);
        onChange([]);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderTokenizer", function () {
      var tags = _this.state.tags;
      var defaultKeywordLabel = _this.props.defaultKeywordLabel;
      return _react.default.createElement(_react.default.Fragment, null, tags.map(function (item, index) {
        return _react.default.createElement(_Tag.default, {
          closable: true,
          key: "".concat(item.filter, "-").concat(item.value, "-").concat(index + 1),
          onClick: function onClick(e) {
            e.stopPropagation();
          },
          onClose: function onClose() {
            _this.handleCloseTag(item);
          }
        }, item.filter !== 'keyword' || defaultKeywordLabel !== '' && item.filter === 'keyword' ? _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("strong", null, item.filterLabel || defaultKeywordLabel, ":"), item.valueLabel) : item.valueLabel);
      }));
    });
    _this.state = {
      tags: props.tags,
      hasValue: false,
      isFocused: false
    };
    return _this;
  }

  (0, _createClass2.default)(FilterInput, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var isFocused = this.state.isFocused;
      return _react.default.createElement("div", {
        className: (0, _classnames.default)('table-filter-bar', {
          'has-value': this.hasValue,
          'is-focused': isFocused
        }),
        onClick: this.handleClick
      }, _react.default.createElement(_Icon.default, {
        className: "is-left",
        name: "magnifier",
        size: 20
      }), _react.default.createElement("div", {
        className: "table-filter-input tags"
      }, this.renderTokenizer(), _react.default.createElement(_Autosuggest.default, {
        ref: function ref(n) {
          _this2.autosuggest = n;
        },
        placeholder: this.placeholder,
        items: this.suggestions,
        onSelected: this.handleSelect,
        onDelete: this.handleDelete,
        onChange: this.handleInputChange,
        onFocus: this.handleInputFocus,
        onBlur: this.handleInputBlur
      })), this.showClearBtn ? _react.default.createElement(_Icon.default, {
        className: "is-right",
        name: "close",
        clickable: true,
        onClick: this.handleClear
      }) : null);
    }
  }, {
    key: "suggestions",
    get: function get() {
      var suggestions = this.props.suggestions;
      var tags = this.state.tags;
      var curTags = tags.map(function (n) {
        return n.filter;
      });

      if (curTags.length > 0) {
        return suggestions.filter(function (n) {
          return curTags.indexOf(n.key) === -1;
        });
      }

      return suggestions;
    }
  }, {
    key: "placeholder",
    get: function get() {
      var placeholder = this.props.placeholder;
      var tags = this.state.tags;

      if (tags.length === 0) {
        return placeholder;
      }

      return null;
    }
  }, {
    key: "showClearBtn",
    get: function get() {
      var tags = this.state.tags;
      var autosuggest = this.autosuggest;
      return tags.length > 0 || (autosuggest ? autosuggest.value !== '' : false);
    }
  }, {
    key: "hasValue",
    get: function get() {
      var _this$state = this.state,
          tags = _this$state.tags,
          hasValue = _this$state.hasValue;
      return tags.length > 0 || hasValue;
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if (prevState.tags !== nextProps.tags) {
        return {
          tags: nextProps.tags
        };
      }

      return null;
    }
  }]);
  return FilterInput;
}(_react.Component);

(0, _defineProperty2.default)(FilterInput, "propTypes", {
  placeholder: _propTypes.default.string,
  suggestions: _propTypes.default.array,
  tags: _propTypes.default.array,
  onChange: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  onFocus: _propTypes.default.func,
  onClear: _propTypes.default.func,
  onInputChange: _propTypes.default.func,
  isMultiKeyword: _propTypes.default.bool,
  defaultKeywordLabel: _propTypes.default.string
});
(0, _defineProperty2.default)(FilterInput, "defaultProps", {
  suggestions: [],
  tags: [],
  onChange: _noop2.default,
  onBlur: _noop2.default,
  onFocus: _noop2.default,
  onClear: _noop2.default,
  onInputChange: _noop2.default,
  isMultiKeyword: false,
  defaultKeywordLabel: ''
});
var _default = FilterInput;
exports.default = _default;