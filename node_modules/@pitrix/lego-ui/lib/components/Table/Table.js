"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _tableUtils = require("./tableUtils");

var _MainTable = _interopRequireDefault(require("./core/MainTable"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _Pagination = _interopRequireDefault(require("../Pagination"));

var _Loading = _interopRequireDefault(require("../Loading"));

var _FilterDropdown = _interopRequireDefault(require("./FilterDropdown"));

var _SelectionBox = _interopRequireDefault(require("./SelectionBox"));

var _SelectionCheckboxAll = _interopRequireDefault(require("./SelectionCheckboxAll"));

var Table =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Table, _Component);

  function Table(_props) {
    var _this;

    (0, _classCallCheck2.default)(this, Table);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Table).call(this, _props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRow", function (record, index) {
      var _this$props = _this.props,
          onRow = _this$props.onRow,
          prefixCls = _this$props.prefixCls;
      var custom = onRow ? onRow(record, index) : {};
      return (0, _objectSpread3.default)({}, custom, {
        prefixCls: prefixCls,
        store: _this.store,
        rowKey: _this.getRecordKey(record, index)
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDefaultSortOrder", function (columns) {
      var definedSortState = (0, _tableUtils.getSortStateFromColumns)(columns);
      var defaultSortedColumn = (0, _tableUtils.flatFilter)(columns || [], function (column) {
        return column.defaultSortOrder != null;
      })[0];

      if (defaultSortedColumn && !definedSortState.sortColumn) {
        return {
          sortColumn: defaultSortedColumn,
          sortOrder: defaultSortedColumn.defaultSortOrder
        };
      }

      return definedSortState;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getFiltersFromColumns", function (columns) {
      var filters = {};
      (0, _tableUtils.getFilteredValueColumns)(columns).forEach(function (col) {
        var colKey = (0, _tableUtils.getColumnKey)(col);

        if ('filteredValue' in col && col.filteredValue !== null && col.filteredValue !== undefined) {
          filters[colKey] = col.filteredValue;
        }
      });
      return filters;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getFlatData", function () {
      return (0, _tableUtils.flatArray)(_this.getLocalData());
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getFlatCurrentPageData", function () {
      return (0, _tableUtils.flatArray)(_this.getCurrentPageData());
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRecordKey", function (record, index) {
      var rowKey = _this.props.rowKey;
      var recordKey = typeof rowKey === 'function' ? rowKey(record, index) : record[rowKey];
      return recordKey === undefined ? index : recordKey;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getCheckboxPropsByItem", function (item, index) {
      var _this$props$rowSelect = _this.props.rowSelection,
          rowSelection = _this$props$rowSelect === void 0 ? {} : _this$props$rowSelect;

      if (!rowSelection.getCheckboxProps) {
        return {};
      }

      var key = _this.getRecordKey(item, index);

      if (!_this.CheckboxPropsCache[key]) {
        _this.CheckboxPropsCache[key] = rowSelection.getCheckboxProps(item);
      }

      return _this.CheckboxPropsCache[key];
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFilterDropdownClick", function (value, column) {
      if (value.action === 'sort') {
        _this.toggleSortOrder(value.type, column);
      }

      if (value.action === 'filter') {
        _this.handleFilter(value.type, column);
      }

      if (value.action === 'hidden') {
        _this.handleHideColumn(column);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handlePageChange", function (current) {
      var _assertThisInitialize = (0, _assertThisInitialized2.default)(_this),
          props = _assertThisInitialize.props;

      var statePagination = _this.state.pagination;
      var pagination = (0, _objectSpread3.default)({}, statePagination);

      if (current) {
        pagination.current = current;
      } else {
        pagination.current = pagination.current || 1;
      }

      for (var _len = arguments.length, otherArguments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        otherArguments[_key - 1] = arguments[_key];
      }

      pagination.onChange.apply(pagination, [pagination.current].concat(otherArguments));
      var newState = {
        pagination: pagination
      };

      if (props.pagination && (0, _typeof2.default)(props.pagination) === 'object' && 'current' in props.pagination) {
        newState.pagination = (0, _objectSpread3.default)({}, pagination, {
          current: statePagination.current
        });
      }

      _this.setState(newState);

      _this.store.setState({
        selectionDirty: false
      });

      var onChange = _this.props.onChange;

      if (typeof onChange === 'function') {
        onChange.apply(void 0, (0, _toConsumableArray2.default)(_this.prepareParamsArguments((0, _objectSpread3.default)({}, _this.state, {
          selectionDirty: false,
          pagination: pagination
        }))));
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFilter", function (nextFilters, column) {
      var _assertThisInitialize2 = (0, _assertThisInitialized2.default)(_this),
          props = _assertThisInitialize2.props;

      var _this$state = _this.state,
          statePagination = _this$state.pagination,
          stateFilters = _this$state.filters,
          columns = _this$state.columns;
      var pagination = (0, _objectSpread3.default)({}, statePagination);
      var colKey = (0, _tableUtils.getColumnKey)(column);
      var newFilter = (0, _defineProperty2.default)({}, colKey, nextFilters);
      var filters = (0, _objectSpread3.default)({}, stateFilters, newFilter);

      if (stateFilters[colKey] === nextFilters) {
        delete filters[colKey];
      }

      var currentColumnKeys = [];
      (0, _tableUtils.treeMap)(columns, function (col) {
        if (!col.children) {
          currentColumnKeys.push((0, _tableUtils.getColumnKey)(col));
        }
      });
      Object.keys(filters).forEach(function (columnKey) {
        if (currentColumnKeys.indexOf(columnKey) < 0) {
          delete filters[columnKey];
        }
      });

      if (props.pagination) {
        pagination.current = 1;
        pagination.onChange(pagination.current);
      }

      var newState = {
        pagination: pagination,
        filters: {}
      };
      var filtersToSetState = (0, _objectSpread3.default)({}, filters);
      (0, _tableUtils.getFilteredValueColumns)(columns).forEach(function (col) {
        var columnKey = (0, _tableUtils.getColumnKey)(col);

        if (columnKey) {
          delete filtersToSetState[columnKey];
        }
      });

      if (Object.keys(filtersToSetState).length > 0) {
        newState.filters = filtersToSetState;
      }

      if ((0, _typeof2.default)(props.pagination) === 'object' && 'current' in props.pagination) {
        newState.pagination = (0, _objectSpread3.default)({}, pagination, {
          current: statePagination.current
        });
      }

      _this.setState(newState, function () {
        _this.store.setState({
          selectionDirty: false
        });

        var onChange = _this.props.onChange;

        if (onChange) {
          onChange.apply(void 0, (0, _toConsumableArray2.default)(_this.prepareParamsArguments((0, _objectSpread3.default)({}, _this.state, {
            selectionDirty: false,
            filters: filters,
            pagination: pagination
          }))));
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleHideColumn", function (column) {
      var hiddenCols = _this.state.hiddenCols;
      var onHideColumn = _this.props.onHideColumn;
      var columnKey = (0, _tableUtils.getColumnKey)(column);
      var newHiddenCols = (0, _toConsumableArray2.default)(hiddenCols);

      if (hiddenCols.indexOf(columnKey) === -1) {
        newHiddenCols.push(columnKey);
      }

      _this.setState({
        hiddenCols: newHiddenCols
      }, function () {
        if (onHideColumn) {
          onHideColumn(newHiddenCols);
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleSelect", function (record, rowIndex, e) {
      var checked = e.target.checked;
      var nativeEvent = e.nativeEvent;
      var defaultSelection = _this.store.getState().selectionDirty ? [] : _this.getDefaultSelection();

      var selectedRowKeys = _this.store.getState().selectedRowKeys.concat(defaultSelection);

      var key = _this.getRecordKey(record, rowIndex);

      if (checked) {
        selectedRowKeys.push(_this.getRecordKey(record, rowIndex));
      } else {
        selectedRowKeys = selectedRowKeys.filter(function (i) {
          return key !== i;
        });
      }

      _this.store.setState({
        selectionDirty: true
      });

      _this.setSelectedRowKeys(selectedRowKeys, {
        selectWay: 'onSelect',
        record: record,
        checked: checked,
        changeRowKeys: undefined,
        nativeEvent: nativeEvent
      });

      _this.setState({
        hasSelected: selectedRowKeys.length > 0
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleRadioSelect", function (record, rowIndex, e) {
      var checked = e.target.checked.checked;
      var nativeEvent = e.nativeEvent;
      var defaultSelection = _this.store.getState().selectionDirty ? [] : _this.getDefaultSelection();

      var selectedRowKeys = _this.store.getState().selectedRowKeys.concat(defaultSelection);

      var key = _this.getRecordKey(record, rowIndex);

      selectedRowKeys = [key];

      _this.store.setState({
        selectionDirty: true
      });

      _this.setSelectedRowKeys(selectedRowKeys, {
        selectWay: 'onSelect',
        record: record,
        checked: checked,
        changeRowKeys: undefined,
        nativeEvent: nativeEvent
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleSelectRow", function (selectionKey) {
      var data = _this.getFlatCurrentPageData();

      var defaultSelection = _this.store.getState().selectionDirty ? [] : _this.getDefaultSelection();

      var selectedRowKeys = _this.store.getState().selectedRowKeys.concat(defaultSelection);

      var changeableRowKeys = data.filter(function (item, i) {
        return !_this.getCheckboxPropsByItem(item, i).disabled;
      }).map(function (item, i) {
        return _this.getRecordKey(item, i);
      });
      var changeRowKeys = [];
      var selectWay = '';
      var checked;

      switch (selectionKey) {
        case 'all':
          changeableRowKeys.forEach(function (key) {
            if (selectedRowKeys.indexOf(key) < 0) {
              selectedRowKeys.push(key);
              changeRowKeys.push(key);
            }
          });
          selectWay = 'onSelectAll';
          checked = true;
          break;

        case 'removeAll':
          changeableRowKeys.forEach(function (key) {
            if (selectedRowKeys.indexOf(key) >= 0) {
              selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);
              changeRowKeys.push(key);
            }
          });
          selectWay = 'onSelectAll';
          checked = false;
          break;

        case 'invert':
          changeableRowKeys.forEach(function (key) {
            if (selectedRowKeys.indexOf(key) < 0) {
              selectedRowKeys.push(key);
            } else {
              selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);
            }

            changeRowKeys.push(key);
            selectWay = 'onSelectInvert';
          });
          break;

        default:
          break;
      }

      _this.store.setState({
        selectionDirty: true
      });

      _this.setSelectedRowKeys(selectedRowKeys, {
        selectWay: selectWay,
        checked: checked,
        changeRowKeys: changeRowKeys
      });

      return false;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "recursiveSort", function (data, sorterFn) {
      var childrenColumnName = _this.props.childrenColumnName;
      return data.sort(sorterFn).map(function (item) {
        return item[childrenColumnName] ? (0, _objectSpread3.default)({}, item, (0, _defineProperty2.default)({}, childrenColumnName, _this.recursiveSort(item[childrenColumnName], sorterFn))) : item;
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "findColumn", function (Key) {
      var columns = _this.state.columns;
      var column;
      (0, _tableUtils.treeMap)(columns, function (c) {
        if ((0, _tableUtils.getColumnKey)(c) === Key) {
          column = c;
        }
      });
      return column;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isSortColumn", function (column) {
      var sortColumn = _this.state.sortColumn;

      if (!column || !sortColumn) {
        return false;
      }

      return (0, _tableUtils.getColumnKey)(sortColumn) === (0, _tableUtils.getColumnKey)(column);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "prepareParamsArguments", function (state) {
      var pagination = (0, _objectSpread3.default)({}, state.pagination);
      delete pagination.onChange;
      delete pagination.onShowSizeChange;
      var filters = state.filters;
      var sorter = {};

      if (state.sortColumn && state.sortOrder) {
        sorter.column = state.sortColumn;
        sorter.order = state.sortOrder;
        sorter.field = state.sortColumn.dataIndex;
        sorter.columnKey = (0, _tableUtils.getColumnKey)(state.sortColumn);
      }

      return [pagination, filters, sorter];
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "toggleSortOrder", function (order, column) {
      var _this$state2 = _this.state,
          sortColumn = _this$state2.sortColumn,
          sortOrder = _this$state2.sortOrder;
      var columns = _this.state.columns;

      var isSortColumn = _this.isSortColumn(column);

      if (!isSortColumn) {
        sortOrder = order;
        sortColumn = column;
      } else if (sortOrder === order) {
        sortOrder = '';
        sortColumn = null;
      } else {
        sortOrder = order;
      }

      var newState = {
        sortOrder: sortOrder,
        sortColumn: sortColumn
      };

      if ((0, _tableUtils.getSortOrderColumns)(columns).length === 0) {
        _this.setState(newState);
      }

      var onChange = _this.props.onChange;

      if (onChange) {
        onChange.apply(void 0, (0, _toConsumableArray2.default)(_this.prepareParamsArguments((0, _objectSpread3.default)({}, _this.state, newState))));
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasPagination", function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props;
      return !('footer' in props) && 'pagination' in props;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderSelectionBox", function (type) {
      return function (_, record, index) {
        var rowIndex = _this.getRecordKey(record, index);

        var props = _this.getCheckboxPropsByItem(record, index);

        var handleChange = function handleChange(e) {
          if (type === 'radio') {
            _this.handleRadioSelect(record, rowIndex, e);
          } else {
            _this.handleSelect(record, rowIndex, e);
          }
        };

        return _react.default.createElement("span", {
          onClick: _tableUtils.stopPropagation
        }, _react.default.createElement(_SelectionBox.default, (0, _extends2.default)({
          type: type,
          store: _this.store,
          rowIndex: rowIndex,
          onChange: handleChange,
          defaultSelection: _this.getDefaultSelection()
        }, props)));
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderTable", function () {
      var _classNames;

      var _this$props2 = _this.props,
          style = _this$props2.style,
          className = _this$props2.className,
          prefixCls = _this$props2.prefixCls,
          dataSource = _this$props2.dataSource,
          showHeader = _this$props2.showHeader,
          expandedRowRender = _this$props2.expandedRowRender,
          bordered = _this$props2.bordered,
          expandIcons = _this$props2.expandIcons,
          propsExpandIconAsCell = _this$props2.expandIconAsCell,
          restProps = (0, _objectWithoutProperties2.default)(_this$props2, ["style", "className", "prefixCls", "dataSource", "showHeader", "expandedRowRender", "bordered", "expandIcons", "expandIconAsCell"]);
      var _this$state3 = _this.state,
          hiddenCols = _this$state3.hiddenCols,
          hasSelected = _this$state3.hasSelected,
          components = _this$state3.components,
          stateColumns = _this$state3.columns;
      var data = dataSource;
      var expandIconAsCell = expandedRowRender && propsExpandIconAsCell !== false;
      var classString = (0, _classnames.default)((_classNames = {}, (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-bordered"), bordered), (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-empty"), !data.length), (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-without-column-header"), !showHeader), (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-hasSelected"), hasSelected), _classNames)); // eslint-disable-next-line

      var columns = stateColumns;
      columns = _this.renderRowSelection();
      columns = _this.renderColumnsDropdown(columns);
      columns = columns.map(function (column, i) {
        var newColumn = (0, _objectSpread3.default)({}, column);
        newColumn.key = (0, _tableUtils.getColumnKey)(newColumn, i);
        return newColumn;
      });
      hiddenCols.forEach(function (key) {
        columns.forEach(function (column, index) {
          if (column.key === key) {
            columns.splice(index, 1);
          }
        });
      });

      if (!('expandIconColumnIndex' in restProps)) {
        restProps.expandIconColumnIndex = columns[0] && columns[0].key === 'selection-column' ? 1 : 0;
      }

      return _react.default.createElement(_MainTable.default, (0, _extends2.default)({
        key: "table"
      }, restProps, {
        onRow: _this.onRow,
        prefixCls: prefixCls,
        data: data,
        components: components,
        columns: columns,
        showHeader: showHeader,
        className: classString,
        expandIconAsCell: expandIconAsCell,
        expandedRowRender: expandedRowRender,
        expandIcons: expandIcons
      }));
    });

    var _columns = _props.columns || (0, _tableUtils.normalizeColumns)(_props.children);

    _this.state = (0, _objectSpread3.default)({}, _this.getDefaultSortOrder(_columns), {
      filters: (0, _tableUtils.getFiltersFromColumns)(_columns),
      pagination: _this.getDefaultPagination(_props),
      hasSelected: false,
      hiddenCols: [],
      columns: _columns,
      components: (0, _tableUtils.createComponents)(_props.components)
    });
    _this.CheckboxPropsCache = {};
    _this.store = (0, _tableUtils.createStore)({
      selectedRowKeys: (_props.rowSelection || {}).selectedRowKeys || [],
      selectionDirty: false
    });

    if (_this.store.getState().selectedRowKeys.length > 0) {
      _this.state.hasSelected = true;
    }

    return _this;
  }

  (0, _createClass2.default)(Table, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      var rowSelection = nextProps.rowSelection,
          dataSource = nextProps.dataSource;
      var prevDataSource = this.props.dataSource;

      if (rowSelection && 'selectedRowKeys' in rowSelection) {
        var selectedRowKeys = rowSelection.selectedRowKeys || [];
        this.store.setState({
          selectedRowKeys: selectedRowKeys
        });
      }

      if ('dataSource' in this.props && dataSource !== prevDataSource) {
        this.store.setState({
          selectionDirty: false
        });
      }

      this.CheckboxPropsCache = {};
      return true;
    }
  }, {
    key: "setSelectedRowKeys",
    value: function setSelectedRowKeys(selectedRowKeys, _ref) {
      var _this2 = this;

      var selectWay = _ref.selectWay,
          record = _ref.record,
          checked = _ref.checked,
          changeRowKeys = _ref.changeRowKeys,
          nativeEvent = _ref.nativeEvent;
      var _this$props$rowSelect2 = this.props.rowSelection,
          rowSelection = _this$props$rowSelect2 === void 0 ? {} : _this$props$rowSelect2;

      if (rowSelection && !('selectedRowKeys' in rowSelection)) {
        this.store.setState({
          selectedRowKeys: selectedRowKeys
        });
      }

      var data = this.getFlatData();

      if (!rowSelection.onChange && !rowSelection[selectWay]) {
        return;
      }

      var selectedRows = data.filter(function (row, index) {
        var recordKey = _this2.getRecordKey(row, index);

        return selectedRowKeys.indexOf(recordKey) > -1;
      });

      if (rowSelection.onChange) {
        rowSelection.onChange(selectedRowKeys, selectedRows);
      }

      if (selectWay === 'onSelect' && rowSelection.onSelect) {
        rowSelection.onSelect(record, checked, selectedRows, nativeEvent);
      } else if (selectWay === 'onSelectAll' && rowSelection.onSelectAll) {
        var changeRows = data.filter(function (row, index) {
          var recordKey = _this2.getRecordKey(row, index);

          return changeRowKeys.indexOf(recordKey) > -1;
        });
        rowSelection.onSelectAll(checked, selectedRows, changeRows);
      } else if (selectWay === 'onSelectInvert' && rowSelection.onSelectInvert) {
        rowSelection.onSelectInvert(selectedRowKeys);
      }

      this.setState({
        hasSelected: selectedRowKeys.length > 0
      });
    }
  }, {
    key: "getSorterFn",
    value: function getSorterFn() {
      var _this$state4 = this.state,
          sortOrder = _this$state4.sortOrder,
          sortColumn = _this$state4.sortColumn;

      if (!sortOrder || !sortColumn || typeof sortColumn.sorter !== 'function') {
        return false;
      }

      return function (a, b) {
        var result = sortColumn && sortColumn.sorter(a, b);

        if (result !== 0) {
          return sortOrder === 'descend' ? -result : result;
        }

        return 0;
      };
    }
  }, {
    key: "getDefaultPagination",
    value: function getDefaultPagination(props) {
      var pagination = props.pagination || {};
      return this.hasPagination(props) ? (0, _objectSpread3.default)({
        onChange: function onChange() {}
      }, pagination, {
        current: pagination.defaultCurrent || pagination.current || 1,
        pageSize: pagination.defaultPageSize || pagination.pageSize || 10
      }) : {};
    }
  }, {
    key: "getCurrentPageData",
    value: function getCurrentPageData() {
      var data = this.getLocalData();
      var current;
      var pagination = this.state.pagination;
      var pageSize = pagination.pageSize;

      if (!this.hasPagination()) {
        pageSize = Number.MAX_VALUE;
        current = 1;
      } else {
        current = this.getMaxCurrent(pagination.total || data.length);
      }

      if (data.length > pageSize || pageSize === Number.MAX_VALUE) {
        data = data.filter(function (item, i) {
          return i >= (current - 1) * pageSize && i < current * pageSize;
        });
      }

      return data;
    }
  }, {
    key: "getLocalData",
    value: function getLocalData() {
      var _this3 = this;

      var state = this.state;
      var dataSource = this.props.dataSource;
      var data = dataSource || [];
      data = data.slice(0);
      var sorterFn = this.getSorterFn();

      if (sorterFn) {
        data = this.recursiveSort(data, sorterFn);
      }

      if (state.filters) {
        Object.keys(state.filters).forEach(function (columnKey) {
          var col = _this3.findColumn(columnKey);

          if (!col) {
            return;
          }

          var values = state.filters[columnKey] || [];

          if (values.length === 0) {
            return;
          }

          var onFilter = col.onFilter;
          data = onFilter ? data.filter(function (record) {
            return values.some(function (v) {
              return onFilter(v, record);
            });
          }) : data;
        });
      }

      return data;
    }
  }, {
    key: "getDefaultSelection",
    value: function getDefaultSelection() {
      var _this4 = this;

      var _this$props$rowSelect3 = this.props.rowSelection,
          rowSelection = _this$props$rowSelect3 === void 0 ? {} : _this$props$rowSelect3;

      if (!rowSelection.getCheckboxProps) {
        return [];
      }

      return this.getFlatData().filter(function (item, rowIndex) {
        return _this4.getCheckboxPropsByItem(item, rowIndex).defaultChecked;
      }).map(function (record, rowIndex) {
        return _this4.getRecordKey(record, rowIndex);
      });
    }
  }, {
    key: "getMaxCurrent",
    value: function getMaxCurrent(total) {
      var pagination = this.state.pagination;
      var current = pagination.current,
          pageSize = pagination.pageSize;

      if ((current - 1) * pageSize >= total) {
        return Math.floor((total - 1) / pageSize) + 1;
      }

      return current;
    }
  }, {
    key: "renderColumnsDropdown",
    value: function renderColumnsDropdown(columns) {
      var _this5 = this;

      var _this$props3 = this.props,
          prefixCls = _this$props3.prefixCls,
          dropdownPrefixCls = _this$props3.dropdownPrefixCls;
      var _this$state5 = this.state,
          sortOrder = _this$state5.sortOrder,
          filters = _this$state5.filters;
      return (0, _tableUtils.treeMap)(columns, function (originColumn, i) {
        var column = (0, _objectSpread3.default)({}, originColumn);
        var key = (0, _tableUtils.getColumnKey)(column, i);
        var filterDropdown = null;
        var sortButton;

        if (column.filters && column.filters.length > 0 || column.sorter || column.hideable) {
          var colFilters = filters[key] || [];
          filterDropdown = _react.default.createElement(_FilterDropdown.default, {
            key: key,
            filterIcon: column.filterIcon,
            column: column,
            enableSort: column.sorter,
            selectedKeys: colFilters,
            hideable: column.hideable,
            label: column.title,
            onClick: _this5.handleFilterDropdownClick,
            prefixCls: "".concat(prefixCls, "-filter"),
            dropdownPrefixCls: dropdownPrefixCls || 'dropdown',
            getPopupContainer: _this5.getPopupContainer
          });
        }

        if (column.sorter) {
          var isSortColumn = _this5.isSortColumn(column);

          if (isSortColumn) {
            column.className = (0, _classnames.default)(column.className, (0, _defineProperty2.default)({}, "".concat(prefixCls, "-column-sort"), sortOrder));
          }

          var isAscend = isSortColumn && sortOrder === 'ascend';
          var isDescend = isSortColumn && sortOrder === 'descend';
          sortButton = _react.default.createElement("div", {
            className: "".concat(prefixCls, "-column-sorter")
          }, isAscend ? _react.default.createElement("span", {
            className: "".concat(prefixCls, "-column-sorter-up")
          }, _react.default.createElement(_Icon.default, {
            name: "sort-ascending",
            size: 16,
            type: "coloured"
          })) : null, isDescend ? _react.default.createElement("span", {
            className: "".concat(prefixCls, "-column-sorter-down")
          }, _react.default.createElement(_Icon.default, {
            name: "sort-descending",
            size: 16,
            type: "coloured"
          })) : null);
        }

        column.title = _react.default.createElement("span", {
          key: key
        }, filterDropdown || column.title, sortButton);

        if (sortButton || filterDropdown) {
          column.className = (0, _classnames.default)("".concat(prefixCls, "-column-has-filters"), column.className);
        }

        return column;
      });
    }
  }, {
    key: "renderRowSelection",
    value: function renderRowSelection() {
      var _this6 = this;

      var _this$props4 = this.props,
          prefixCls = _this$props4.prefixCls,
          rowSelection = _this$props4.rowSelection;
      var stateColumns = this.state.columns;
      var columns = stateColumns.concat();

      if (rowSelection) {
        var data = this.getFlatCurrentPageData().filter(function (item, index) {
          if (rowSelection.getCheckboxProps) {
            return !_this6.getCheckboxPropsByItem(item, index).disabled;
          }

          return true;
        });
        var selectionColumnClass = (0, _classnames.default)("".concat(prefixCls, "-selection-column"), (0, _defineProperty2.default)({}, "".concat(prefixCls, "-selection-column-custom"), rowSelection.selections));
        var selectionColumn = {
          key: 'selection-column',
          render: this.renderSelectionBox(rowSelection.type),
          className: selectionColumnClass,
          fixed: rowSelection.fixed,
          width: rowSelection.columnWidth
        };

        if (rowSelection.type !== 'radio') {
          var disabled = data.every(function (n, i) {
            return _this6.getCheckboxPropsByItem(n, i).disabled;
          });
          selectionColumn.title = _react.default.createElement(_SelectionCheckboxAll.default, {
            store: this.store,
            data: data,
            getCheckboxPropsByItem: this.getCheckboxPropsByItem,
            getRecordKey: this.getRecordKey,
            disabled: disabled,
            prefixCls: prefixCls,
            onSelect: this.handleSelectRow,
            selections: rowSelection.selections,
            hideDefaultSelections: rowSelection.hideDefaultSelections,
            getPopupContainer: this.getPopupContainer
          });
        }

        if ('fixed' in rowSelection) {
          selectionColumn.fixed = rowSelection.fixed;
        } else if (columns.some(function (column) {
          return column.fixed === 'left' || column.fixed === true;
        })) {
          selectionColumn.fixed = 'left';
        }

        if (columns[0] && columns[0].key === 'selection-column') {
          columns[0] = selectionColumn;
        } else {
          columns.unshift(selectionColumn);
        }
      }

      return columns;
    }
  }, {
    key: "renderPagination",
    value: function renderPagination(paginationPosition) {
      if (!this.hasPagination()) {
        return null;
      }

      var prefixCls = this.props.prefixCls;
      var pagination = this.state.pagination;
      var position = pagination.position || 'bottom';
      var total = pagination.total || this.getLocalData().length;
      return total > 0 && (position === paginationPosition || position === 'both') ? _react.default.createElement(_Pagination.default, {
        isFullwidth: true,
        placement: "right",
        key: "pagination-".concat(paginationPosition),
        className: (0, _classnames.default)(pagination.className, "".concat(prefixCls, "-pagination")),
        current: this.getMaxCurrent(total),
        total: total,
        pageSize: pagination.pageSize,
        onChange: this.handlePageChange
      }) : null;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props5 = this.props,
          prefixCls = _this$props5.prefixCls,
          className = _this$props5.className,
          style = _this$props5.style;
      var loading = this.props.loading;

      if (typeof loading === 'boolean') {
        loading = {
          spinning: loading
        };
      }

      return _react.default.createElement(_Loading.default, (0, _extends2.default)({}, loading, {
        size: "large"
      }), _react.default.createElement("div", {
        className: (0, _classnames.default)("".concat(prefixCls, "-wrapper"), className),
        style: style
      }, this.renderPagination('top'), this.renderTable(loading), this.renderPagination('bottom')));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var pagination = nextProps.pagination,
          rowSelection = nextProps.rowSelection,
          hiddenColumns = nextProps.hiddenColumns,
          components = nextProps.components;
      var sortColumn = prevState.sortColumn,
          sortOrder = prevState.sortOrder,
          hiddenCols = prevState.hiddenCols,
          filters = prevState.filters;
      var columns = nextProps.columns || (0, _tableUtils.normalizeColumns)(nextProps.children);
      var newState = {};

      if ('pagination' in nextProps) {
        var newPagination = (0, _objectSpread3.default)({
          onChange: function onChange() {}
        }, prevState.pagination, pagination);
        newPagination.current = newPagination.current || 1;
        newPagination.pageSize = newPagination.pageSize || 10;
        newState.pagination = pagination !== false ? newPagination : {};
      }

      if (rowSelection && 'selectedRowKeys' in rowSelection) {
        var selectedRowKeys = rowSelection.selectedRowKeys || [];
        newState.hasSelected = selectedRowKeys.length > 0;
      }

      if ((0, _tableUtils.getSortOrderColumns)(columns).length > 0) {
        var sortState = (0, _tableUtils.getSortStateFromColumns)(columns);

        if (sortState.sortColumn !== sortColumn || sortState.sortOrder !== sortOrder) {
          newState.sortState = sortState;
        }
      }

      var filteredValueColumns = (0, _tableUtils.getFilteredValueColumns)(columns);

      if (filteredValueColumns.length > 0) {
        var filtersFromColumns = (0, _tableUtils.getFiltersFromColumns)(columns);
        var newFilters = {};
        Object.keys(filtersFromColumns).forEach(function (key) {
          newFilters[key] = filtersFromColumns[key];
        });

        if ((0, _tableUtils.isFiltersChanged)(newFilters, filters)) {
          newState.filters = newFilters;
        }
      } else {
        newState.filters = {};
      }

      if (hiddenColumns && hiddenCols !== hiddenColumns) {
        newState.hiddenCols = hiddenColumns;
      }

      if (components !== prevState.components) {
        newState.components = (0, _tableUtils.createComponents)(components, prevState.components);
      }

      if (columns !== prevState.columns) {
        newState.columns = columns;
      }

      return newState;
    }
  }]);
  return Table;
}(_react.Component);

(0, _defineProperty2.default)(Table, "propTypes", {
  rowKey: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.func]),
  dataSource: _propTypes.default.array,
  columns: _propTypes.default.array,
  prefixCls: _propTypes.default.string,
  useFixedHeader: _propTypes.default.bool,
  rowSelection: _propTypes.default.object,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  loading: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.object]),
  bordered: _propTypes.default.bool,
  onChange: _propTypes.default.func,
  dropdownPrefixCls: _propTypes.default.string,
  showHeader: _propTypes.default.bool,
  expandedRowRender: _propTypes.default.any,
  expandIconAsCell: _propTypes.default.bool,
  expandIcons: _propTypes.default.array,
  children: _propTypes.default.node,
  pagination: _propTypes.default.object,
  onRow: _propTypes.default.func,
  childrenColumnName: _propTypes.default.string,
  hiddenColumns: _propTypes.default.array,
  onHideColumn: _propTypes.default.func,
  expandRowIndent: _propTypes.default.bool,
  components: _propTypes.default.shape({
    table: _propTypes.default.any,
    header: _propTypes.default.shape({
      wrapper: _propTypes.default.any,
      row: _propTypes.default.any,
      cell: _propTypes.default.any
    }),
    body: _propTypes.default.shape({
      wrapper: _propTypes.default.any,
      row: _propTypes.default.any,
      cell: _propTypes.default.any
    })
  })
});
(0, _defineProperty2.default)(Table, "defaultProps", {
  dataSource: [],
  prefixCls: 'table',
  useFixedHeader: false,
  rowSelection: null,
  loading: false,
  bordered: false,
  rowKey: 'key',
  showHeader: true,
  expandRowIndent: true,
  childrenColumnName: 'children',
  expandIcons: ['chevron-up', 'chevron-down'],
  components: {}
});
var _default = Table;
exports.default = _default;