"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _tableUtils = require("../tableUtils");

var _BaseTable = _interopRequireDefault(require("./BaseTable"));

var BodyTable =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2.default)(BodyTable, _PureComponent);

  function BodyTable() {
    (0, _classCallCheck2.default)(this, BodyTable);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BodyTable).apply(this, arguments));
  }

  (0, _createClass2.default)(BodyTable, [{
    key: "render",
    value: function render() {
      var table = this.context.table;
      var _table$props = table.props,
          prefixCls = _table$props.prefixCls,
          scroll = _table$props.scroll;
      var _this$props = this.props,
          columns = _this$props.columns,
          fixed = _this$props.fixed,
          tableClassName = _this$props.tableClassName,
          getRowKey = _this$props.getRowKey,
          handleBodyScroll = _this$props.handleBodyScroll,
          handleWheel = _this$props.handleWheel,
          expander = _this$props.expander,
          isAnyColumnsFixed = _this$props.isAnyColumnsFixed;
      var saveRef = table.saveRef;
      var useFixedHeader = table.props.useFixedHeader;
      var bodyStyle = (0, _objectSpread2.default)({}, table.props.bodyStyle);
      var innerBodyStyle = {};

      if (scroll.x || fixed) {
        bodyStyle.overflowX = bodyStyle.overflowX || 'scroll';
        bodyStyle.WebkitTransform = 'translate3d (0, 0, 0)';
      }

      if (scroll.y) {
        if (fixed) {
          innerBodyStyle.maxHeight = bodyStyle.maxHeight || scroll.y;
          innerBodyStyle.overflowY = bodyStyle.overflowY || 'scroll';
        } else {
          bodyStyle.maxHeight = bodyStyle.maxHeight || scroll.y;
        }

        bodyStyle.overflowY = bodyStyle.overflowY || 'scroll';
        useFixedHeader = true;
        var scrollbarWidth = (0, _tableUtils.measureScrollbar)();

        if (scrollbarWidth > 0 && fixed) {
          bodyStyle.marginBottom = "-".concat(scrollbarWidth, "px");
          bodyStyle.paddingBottom = '0px';
        }
      }

      var baseTable = _react.default.createElement(_BaseTable.default, {
        tableClassName: tableClassName,
        hasHead: !useFixedHeader,
        hasBody: true,
        fixed: fixed,
        columns: columns,
        expander: expander,
        getRowKey: getRowKey,
        isAnyColumnsFixed: isAnyColumnsFixed
      });

      if (fixed && columns.length) {
        var refName;

        if (columns[0].fixed === 'left' || columns[0].fixed === true) {
          refName = 'fixedColumnsBodyLeft';
        } else if (columns[0].fixed === 'right') {
          refName = 'fixedColumnsBodyRight';
        }

        delete bodyStyle.overflowX;
        delete bodyStyle.overflowY;
        return _react.default.createElement("div", {
          key: "bodyTable",
          className: "".concat(prefixCls, "-body-outer"),
          style: (0, _objectSpread2.default)({}, bodyStyle)
        }, _react.default.createElement("div", {
          className: "".concat(prefixCls, "-body-inner"),
          style: innerBodyStyle,
          ref: saveRef(refName),
          onWheel: handleWheel,
          onScroll: handleBodyScroll
        }, baseTable));
      }

      return _react.default.createElement("div", {
        key: "bodyTable",
        className: "".concat(prefixCls, "-body"),
        style: bodyStyle,
        ref: saveRef('bodyTable'),
        onWheel: handleWheel,
        onScroll: handleBodyScroll
      }, baseTable);
    }
  }]);
  return BodyTable;
}(_react.PureComponent);

(0, _defineProperty2.default)(BodyTable, "propTypes", {
  fixed: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool]),
  columns: _propTypes.default.array.isRequired,
  tableClassName: _propTypes.default.string.isRequired,
  handleWheel: _propTypes.default.func.isRequired,
  handleBodyScroll: _propTypes.default.func.isRequired,
  getRowKey: _propTypes.default.func.isRequired,
  expander: _propTypes.default.object.isRequired,
  isAnyColumnsFixed: _propTypes.default.bool
});
(0, _defineProperty2.default)(BodyTable, "contextTypes", {
  table: _propTypes.default.any
});
var _default = BodyTable;
exports.default = _default;