"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var ColGroup =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(ColGroup, _Component);

  function ColGroup() {
    (0, _classCallCheck2.default)(this, ColGroup);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ColGroup).apply(this, arguments));
  }

  (0, _createClass2.default)(ColGroup, [{
    key: "render",
    value: function render() {
      return _react.default.createElement("colgroup", null, this.cols);
    }
  }, {
    key: "cols",
    get: function get() {
      var table = this.context.table;
      var _table$props = table.props,
          prefixCls = _table$props.prefixCls,
          expandIconAsCell = _table$props.expandIconAsCell;
      var fixed = this.props.fixed;
      var cols = [];

      if (expandIconAsCell && fixed !== 'right') {
        cols.push(_react.default.createElement("col", {
          className: "".concat(prefixCls, "-expand-icon-col"),
          key: "table-expand-icon-col"
        }));
      }

      var leafColumns;

      if (fixed === 'left') {
        leafColumns = table.columnManager.leftLeafColumns();
      } else if (fixed === 'right') {
        leafColumns = table.columnManager.rightLeafColumns();
      } else {
        leafColumns = table.columnManager.leafColumns();
      }

      cols = cols.concat(leafColumns.map(function (c) {
        return _react.default.createElement("col", {
          key: c.key || c.dataIndex,
          style: {
            width: c.width,
            minWidth: c.width
          }
        });
      }));
      return cols;
    }
  }]);
  return ColGroup;
}(_react.Component);

(0, _defineProperty2.default)(ColGroup, "propTypes", {
  fixed: _propTypes.default.string
});
(0, _defineProperty2.default)(ColGroup, "contextTypes", {
  table: _propTypes.default.any
});
var _default = ColGroup;
exports.default = _default;