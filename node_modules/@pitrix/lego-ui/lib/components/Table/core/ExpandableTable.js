"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _miniStore = require("../../../utils/mini-store");

var _TableRow = _interopRequireDefault(require("./TableRow"));

var _tableUtils = require("../tableUtils");

var ExpandableTable =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(ExpandableTable, _Component);

  function ExpandableTable(props) {
    var _this;

    (0, _classCallCheck2.default)(this, ExpandableTable);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ExpandableTable).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getExpandedRowKeys", function () {
      var _this$props = _this.props,
          data = _this$props.data,
          childrenColumnName = _this$props.childrenColumnName,
          defaultExpandAllRows = _this$props.defaultExpandAllRows,
          expandedRowKeys = _this$props.expandedRowKeys,
          defaultExpandedRowKeys = _this$props.defaultExpandedRowKeys,
          getRowKey = _this$props.getRowKey;
      var finalExpandedRowKeys = [];
      var rows = (0, _toConsumableArray2.default)(data);

      if (defaultExpandAllRows) {
        for (var i = 0; i < rows.length; i += 1) {
          var row = rows[i];
          finalExpandedRowKeys.push(getRowKey(row, i));
          rows = rows.concat(row[childrenColumnName] || []);
        }
      } else {
        finalExpandedRowKeys = expandedRowKeys || defaultExpandedRowKeys;
      }

      _this.store.setState({
        expandedRowsHeight: {},
        expandedRowKeys: finalExpandedRowKeys
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleExpandChange", function (expanded, record, event, rowKey) {
      var destroy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      var propsExpandedRowKeys = _this.props.expandedRowKeys;

      if (event) {
        event.preventDefault();
        event.stopPropagation();
      }

      var _this$props2 = _this.props,
          onExpandedRowsChange = _this$props2.onExpandedRowsChange,
          onExpand = _this$props2.onExpand;

      var _this$store$getState = _this.store.getState(),
          expandedRowKeys = _this$store$getState.expandedRowKeys;

      if (expanded) {
        expandedRowKeys = [].concat((0, _toConsumableArray2.default)(expandedRowKeys), [rowKey]);
      } else {
        var expandedRowIndex = expandedRowKeys.indexOf(rowKey);

        if (expandedRowIndex !== -1) {
          expandedRowKeys = (0, _tableUtils.remove)(expandedRowKeys, rowKey);
        }
      }

      if (!propsExpandedRowKeys) {
        _this.store.setState({
          expandedRowKeys: expandedRowKeys
        });
      }

      onExpandedRowsChange(expandedRowKeys);

      if (!destroy) {
        onExpand(expanded, record);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderExpandIndentCell", function (rows, fixed) {
      var _this$props3 = _this.props,
          prefixCls = _this$props3.prefixCls,
          expandIconAsCell = _this$props3.expandIconAsCell;

      if (!expandIconAsCell || fixed === 'right' || !rows.length) {
        return;
      }

      var iconColumn = {
        key: 'table-expand-icon-cell',
        className: "".concat(prefixCls, "-expand-icon-th"),
        title: '',
        rowSpan: rows.length
      };
      rows[0].unshift((0, _objectSpread2.default)({}, iconColumn, {
        column: iconColumn
      }));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderRows", function (renderRows, rows, record, index, indent, fixed, parentKey, ancestorKeys) {
      var _this$props4 = _this.props,
          expandedRowClassName = _this$props4.expandedRowClassName,
          expandedRowRender = _this$props4.expandedRowRender,
          childrenColumnName = _this$props4.childrenColumnName;
      var childrenData = record[childrenColumnName];
      var nextAncestorKeys = [].concat((0, _toConsumableArray2.default)(ancestorKeys), [parentKey]);
      var nextIndent = indent + 1;

      if (expandedRowRender && expandedRowRender(record) !== null) {
        var expandedRow = _this.renderExpandedRow(record, index, expandedRowRender, expandedRowClassName(record, index, indent), nextAncestorKeys, nextIndent, fixed);

        rows.push(expandedRow);
      }

      if (childrenData) {
        rows.push.apply(rows, (0, _toConsumableArray2.default)(renderRows(childrenData, nextIndent, nextAncestorKeys)));
      }
    });
    _this.columnManager = props.columnManager;
    _this.store = props.store;

    _this.getExpandedRowKeys();

    return _this;
  }

  (0, _createClass2.default)(ExpandableTable, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var _this$props5 = this.props,
          defaultExpandAllRows = _this$props5.defaultExpandAllRows,
          expandedRowKeys = _this$props5.expandedRowKeys;

      if (defaultExpandAllRows) {
        this.getExpandedRowKeys();
        return;
      }

      if ('expandedRowKeys' in this.props) {
        this.store.setState({
          expandedRowKeys: expandedRowKeys
        });
      }
    }
  }, {
    key: "renderExpandedRow",
    value: function renderExpandedRow(record, index, _render, className, ancestorKeys, indent, fixed) {
      var _this2 = this;

      var _this$props6 = this.props,
          prefixCls = _this$props6.prefixCls,
          expandIconAsCell = _this$props6.expandIconAsCell,
          indentSize = _this$props6.indentSize,
          expandRowIndent = _this$props6.expandRowIndent;
      var parentKey = ancestorKeys[ancestorKeys.length - 1];
      var rowKey = "".concat(parentKey, "-extra-row");
      var components = {
        body: {
          row: 'tr',
          cell: 'td'
        }
      };
      var colCount;

      if (fixed === 'left') {
        colCount = this.columnManager.leftLeafColumns().length;
      } else if (fixed === 'right') {
        colCount = this.columnManager.rightLeafColumns().length;
      } else {
        colCount = this.columnManager.leafColumns().length;
      }

      var columns = [{
        key: 'extra-row',
        render: function render() {
          var _this2$store$getState = _this2.store.getState(),
              expandedRowKeys = _this2$store$getState.expandedRowKeys;

          var expanded = expandedRowKeys.indexOf(parentKey) !== -1;
          return {
            props: {
              colSpan: expandRowIndent ? colCount : colCount + 1
            },
            children: fixed !== 'right' ? _render(record, index, indent, expanded) : '&nbsp;'
          };
        }
      }];

      if (expandIconAsCell && fixed !== 'right' && expandRowIndent) {
        columns.unshift({
          key: 'expand-icon-placeholder',
          render: function render() {
            return null;
          }
        });
      }

      return _react.default.createElement(_TableRow.default, {
        key: rowKey,
        columns: columns,
        className: className,
        rowKey: rowKey,
        ancestorKeys: ancestorKeys,
        prefixCls: "".concat(prefixCls, "-expanded-row"),
        indentSize: indentSize,
        indent: indent,
        fixed: fixed,
        components: components,
        expandedRow: true
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props7 = this.props,
          data = _this$props7.data,
          childrenColumnName = _this$props7.childrenColumnName,
          children = _this$props7.children;
      var needIndentSpaced = data.some(function (record) {
        return record[childrenColumnName];
      });
      return children({
        props: this.props,
        needIndentSpaced: needIndentSpaced,
        renderRows: this.renderRows,
        handleExpandChange: this.handleExpandChange,
        renderExpandIndentCell: this.renderExpandIndentCell
      });
    }
  }]);
  return ExpandableTable;
}(_react.Component);

(0, _defineProperty2.default)(ExpandableTable, "propTypes", {
  expandIconAsCell: _propTypes.default.bool,
  expandedRowKeys: _propTypes.default.array,
  expandedRowClassName: _propTypes.default.func,
  defaultExpandAllRows: _propTypes.default.bool,
  defaultExpandedRowKeys: _propTypes.default.array,
  // eslint-disable-next-line
  expandIconColumnIndex: _propTypes.default.number,
  expandedRowRender: _propTypes.default.func,
  // eslint-disable-next-line
  expandIcon: _propTypes.default.func,
  childrenColumnName: _propTypes.default.string,
  indentSize: _propTypes.default.number,
  onExpand: _propTypes.default.func,
  onExpandedRowsChange: _propTypes.default.func,
  columnManager: _propTypes.default.object.isRequired,
  store: _propTypes.default.object.isRequired,
  prefixCls: _propTypes.default.string.isRequired,
  data: _propTypes.default.array,
  children: _propTypes.default.func.isRequired,
  getRowKey: _propTypes.default.func.isRequired,
  expandRowIndent: _propTypes.default.bool
});
(0, _defineProperty2.default)(ExpandableTable, "defaultProps", {
  expandIconAsCell: false,
  expandedRowClassName: function expandedRowClassName() {
    return '';
  },
  expandIconColumnIndex: 0,
  defaultExpandAllRows: false,
  expandRowIndent: true,
  defaultExpandedRowKeys: [],
  childrenColumnName: 'children',
  indentSize: 15,
  onExpand: function onExpand() {},
  onExpandedRowsChange: function onExpandedRowsChange() {}
});

var _default = (0, _miniStore.connect)()(ExpandableTable);

exports.default = _default;