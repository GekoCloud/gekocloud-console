"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _CellContent = _interopRequireDefault(require("./CellContent"));

var isInvalidRenderCellText = function isInvalidRenderCellText(text) {
  return text && !_react.default.isValidElement(text) && Object.prototype.toString.call(text) === '[object Object]';
};

var TableCell =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(TableCell, _Component);

  function TableCell() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, TableCell);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TableCell)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClick", function (e) {
      var _this$props = _this.props,
          record = _this$props.record,
          onCellClick = _this$props.column.onCellClick;

      if (onCellClick) {
        onCellClick(record, e);
      }
    });
    return _this;
  }

  (0, _createClass2.default)(TableCell, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          record = _this$props2.record,
          indentSize = _this$props2.indentSize,
          prefixCls = _this$props2.prefixCls,
          indent = _this$props2.indent,
          index = _this$props2.index,
          expandIcon = _this$props2.expandIcon,
          column = _this$props2.column,
          BodyCell = _this$props2.component;
      var dataIndex = column.dataIndex,
          render = column.render,
          _column$className = column.className,
          className = _column$className === void 0 ? '' : _column$className;
      var text;

      if (typeof dataIndex === 'number') {
        text = (0, _get2.default)(record, dataIndex);
      } else if (!dataIndex || dataIndex.length === 0) {
        text = record;
      } else {
        text = (0, _get2.default)(record, dataIndex);
      }

      var tdProps = {};
      var tdColSpan;
      var tdRowSpan;

      if (render) {
        text = render(text, record, index);

        if (isInvalidRenderCellText(text)) {
          tdProps = text.props || tdProps;
          tdColSpan = tdProps.colSpan;
          tdRowSpan = tdProps.rowSpan;
          text = text.children;
        }
      }

      if (column.onCell) {
        tdProps = (0, _objectSpread2.default)({}, tdProps, column.onCell(record, index));
      }

      if (isInvalidRenderCellText(text)) {
        text = null;
      }

      var indentText = expandIcon ? _react.default.createElement("span", {
        style: {
          paddingLeft: "".concat(indentSize * indent, "px")
        },
        className: "".concat(prefixCls, "-indent indent-level-").concat(indent)
      }) : null;

      if (tdRowSpan === 0 || tdColSpan === 0) {
        return null;
      }

      if (column.align) {
        tdProps.style = (0, _objectSpread2.default)({}, tdProps.style, {
          textAlign: column.align
        });
      }

      return _react.default.createElement(BodyCell, (0, _extends2.default)({
        className: className,
        onClick: this.handleClick
      }, tdProps), indentText, expandIcon, _react.default.createElement(_CellContent.default, null, text));
    }
  }]);
  return TableCell;
}(_react.Component);

(0, _defineProperty2.default)(TableCell, "propTypes", {
  record: _propTypes.default.object,
  prefixCls: _propTypes.default.string,
  index: _propTypes.default.number,
  indent: _propTypes.default.number,
  indentSize: _propTypes.default.number,
  column: _propTypes.default.object,
  expandIcon: _propTypes.default.node,
  component: _propTypes.default.any
});
var _default = TableCell;
exports.default = _default;