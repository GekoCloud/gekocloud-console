"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.measureScrollbar = measureScrollbar;
exports.debounce = debounce;
exports.warningOnce = warningOnce;
exports.remove = remove;
exports.createStore = createStore;
exports.treeMap = treeMap;
exports.flatFilter = flatFilter;
exports.flatArray = flatArray;
exports.normalizeColumns = normalizeColumns;
exports.stopPropagation = stopPropagation;
exports.getDataAndAriaProps = getDataAndAriaProps;
exports.createComponents = createComponents;
exports.getColumnKey = getColumnKey;
exports.getFilteredValueColumns = getFilteredValueColumns;
exports.getSortOrderColumns = getSortOrderColumns;
exports.getFiltersFromColumns = getFiltersFromColumns;
exports.getSortStateFromColumns = getSortStateFromColumns;
exports.isFiltersChanged = isFiltersChanged;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _react = _interopRequireDefault(require("react"));

var _utils = require("../../utils");

var scrollbarSize;
var scrollbarMeasure = {
  position: 'absolute',
  top: '-9999px',
  width: '50px',
  height: '50px',
  overflow: 'scroll'
};

function measureScrollbar() {
  var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'vertical';

  if (typeof document === 'undefined' || typeof window === 'undefined') {
    return 0;
  }

  if (scrollbarSize) {
    return scrollbarSize;
  }

  var scrollDiv = document.createElement('div');
  Object.keys(scrollbarMeasure).forEach(function (scrollProp) {
    scrollDiv.style[scrollProp] = scrollbarMeasure[scrollProp];
  });
  document.body.appendChild(scrollDiv);
  var size = 0;

  if (direction === 'vertical') {
    size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
  } else if (direction === 'horizontal') {
    size = scrollDiv.offsetHeight - scrollDiv.clientHeight;
  }

  document.body.removeChild(scrollDiv);
  scrollbarSize = size;
  return scrollbarSize;
}

function debounce(func, wait, immediate) {
  var timeout;

  function debounceFunc() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var context = this; // https://fb.me/react-event-pooling

    if (args[0] && args[0].persist) {
      args[0].persist();
    }

    var later = function later() {
      timeout = null;

      if (!immediate) {
        func.apply(context, args);
      }
    };

    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);

    if (callNow) {
      func.apply(context, args);
    }
  }

  debounceFunc.cancel = function cancel() {
    if (timeout) {
      clearTimeout(timeout);
      timeout = null;
    }
  };

  return debounceFunc;
}

var warned = {};

function warningOnce(condition, format, args) {
  if (!warned[format]) {
    (0, _utils.warning)(condition, format, args);
    warned[format] = !condition;
  }
}

function remove(array, item) {
  var index = array.indexOf(item);
  var front = array.slice(0, index);
  var last = array.slice(index + 1, array.length);
  return front.concat(last);
}

function createStore(initialState) {
  var state = initialState;
  var listeners = [];

  function setState(partial) {
    state = (0, _objectSpread2.default)({}, state, partial);

    for (var i = 0; i < listeners.length; i += 1) {
      listeners[i]();
    }
  }

  function getState() {
    return state;
  }

  function subscribe(listener) {
    listeners.push(listener);
    return function unsubscribe() {
      var index = listeners.indexOf(listener);
      listeners.splice(index, 1);
    };
  }

  return {
    setState: setState,
    getState: getState,
    subscribe: subscribe
  };
}

function treeMap(tree, mapper) {
  var childrenName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'children';
  return tree.map(function (node, index) {
    var extra = {};

    if (node[childrenName]) {
      extra[childrenName] = treeMap(node[childrenName], mapper, childrenName);
    }

    return (0, _objectSpread2.default)({}, mapper(node, index), extra);
  });
}

function flatFilter(tree, callback) {
  return tree.reduce(function (acc, node) {
    if (callback(node)) {
      acc.push(node);
    }

    if (node.children) {
      var children = flatFilter(node.children, callback);
      acc.push.apply(acc, (0, _toConsumableArray2.default)(children));
    }

    return acc;
  }, []);
}

function flatArray(data) {
  var childrenName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'children';
  var result = [];

  var loop = function loop(array) {
    array.forEach(function (item) {
      if (item[childrenName]) {
        var newItem = (0, _objectSpread2.default)({}, item);
        delete newItem[childrenName];
        result.push(newItem);

        if (item[childrenName].length > 0) {
          loop(item[childrenName]);
        }
      } else {
        result.push(item);
      }
    });
  };

  loop(data);
  return result;
}

function normalizeColumns(elements) {
  var columns = [];

  _react.default.Children.forEach(elements, function (element) {
    if (!_react.default.isValidElement(element)) {
      return;
    }

    var column = (0, _objectSpread2.default)({}, element.props);

    if (element.key) {
      column.key = element.key;
    }

    if (element.type && element.type.TABLE_COLUMN_GROUP) {
      column.children = normalizeColumns(column.children);
    }

    columns.push(column);
  });

  return columns;
}

function stopPropagation(e) {
  e.stopPropagation();

  if (e.nativeEvent.stopImmediatePropagation) {
    e.nativeEvent.stopImmediatePropagation();
  }
}

function getDataAndAriaProps(props) {
  return Object.keys(props).reduce(function (memo, key) {
    if (key.substr(0, 5) === 'data-' || key.substr(0, 5) === 'aria-') {
      memo[key] = props[key]; // eslint-disable-line no-param-reassign
    }

    return memo;
  }, {});
}

function createComponents(components, prevComponents) {
  var bodyRow = components && components.body && components.body.row;
  var preBodyRow = prevComponents && prevComponents.body && prevComponents.body.row;
  var nextComponents = (0, _objectSpread2.default)({}, components, {
    body: (0, _objectSpread2.default)({}, components.body)
  });

  if (prevComponents === undefined || bodyRow !== preBodyRow) {
    nextComponents.body.row = bodyRow;
  }

  return nextComponents;
}

function getColumnKey(column, index) {
  return column.key || column.dataIndex || index;
}

function getFilteredValueColumns(columns) {
  return flatFilter(columns || [], function (column) {
    return typeof column.filteredValue !== 'undefined';
  });
}

function getSortOrderColumns(columns) {
  return flatFilter(columns || [], function (column) {
    return 'sortOrder' in column;
  });
}

function getFiltersFromColumns(columns) {
  var filters = {};
  getFilteredValueColumns(columns).forEach(function (col) {
    var colKey = getColumnKey(col);

    if ('filteredValue' in col && col.filteredValue !== null && col.filteredValue !== undefined) {
      filters[colKey] = col.filteredValue;
    }
  });
  return filters;
}

function getSortStateFromColumns(columns) {
  var sortedColumn = getSortOrderColumns(columns).filter(function (col) {
    return col.sortOrder;
  })[0];

  if (sortedColumn) {
    return {
      sortColumn: sortedColumn,
      sortOrder: sortedColumn.sortOrder
    };
  }

  return {
    sortColumn: null,
    sortOrder: null
  };
}

function isFiltersChanged(filters, stateFilters) {
  var filtersChanged = false;

  if (Object.keys(filters).length !== Object.keys(stateFilters).length) {
    filtersChanged = true;
  } else {
    Object.keys(filters).forEach(function (columnKey) {
      if (filters[columnKey] !== stateFilters[columnKey]) {
        filtersChanged = true;
      }
    });
  }

  return filtersChanged;
}