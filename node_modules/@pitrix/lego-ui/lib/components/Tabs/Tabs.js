"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _TabPanel = _interopRequireDefault(require("./TabPanel"));

var _Icon = _interopRequireDefault(require("../Icon"));

var Tabs =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Tabs, _Component);

  function Tabs(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Tabs);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Tabs).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClose", function (e, name) {
      e.stopPropagation();
      var onClose = _this.props.onClose;
      onClose(name);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleSelect", function (activeName) {
      var _this$props = _this.props,
          propsActiveName = _this$props.activeName,
          onChange = _this$props.onChange;

      if (!propsActiveName) {
        _this.setState({
          activeName: activeName
        });
      }

      onChange(activeName);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollLeft", function () {
      if (!_this.reachLeft && _this.handler) {
        _this.scrollByDirection('left');
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollRight", function () {
      if (!_this.reachRight && _this.handler) {
        _this.scrollByDirection('right');
      }
    });
    _this.state = {
      activeName: props.activeName || props.defaultActiveName,
      handlerVisible: false,
      leftHandlerDisabled: false,
      rightHandlerDisabled: false
    };
    return _this;
  }

  (0, _createClass2.default)(Tabs, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.calculateWidth();
      this.reachLeft = false;
      this.reachRight = false;
      this.addingChild = false;
      this.removingChild = false;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var children = this.props.children;

      var nextTotal = _react.Children.count(children);

      var prevTotal = _react.Children.count(prevProps.children);

      if (nextTotal > prevTotal) {
        this.addingChild = true;
      }

      if (nextTotal < prevTotal) {
        this.removingChild = true;
      }

      this.calculateWidth();
    }
  }, {
    key: "autoScrollRight",
    value: function autoScrollRight() {
      if (this.handler) {
        var containerWidth = this.container.getBoundingClientRect().width;
        var handlerWidth = this.handler.getBoundingClientRect().width;
        var distance = containerWidth - 2 * handlerWidth;
        var tabsWidth = this.tabs.getBoundingClientRect().width;
        var tabsOffset = window.getComputedStyle(this.tabs).left;
        tabsOffset = Number(tabsOffset.substring(0, tabsOffset.length - 2));

        if (this.addingChild || -tabsOffset + distance > tabsWidth && this.removingChild || this.reachRight && this.removingChild) {
          this.reachRight = false;
          this.addingChild = false;
          this.removingChild = false;
          this.scrollRight();
        }
      }
    }
  }, {
    key: "calculateWidth",
    value: function calculateWidth() {
      var containerWidth = this.container.getBoundingClientRect().width;
      var tabsWidth = this.tabs.getBoundingClientRect().width;
      var shouldShowHandler = containerWidth < tabsWidth;
      var handlerVisible = this.state.handlerVisible;

      if (handlerVisible !== shouldShowHandler) {
        this.setState({
          handlerVisible: shouldShowHandler
        }, this.autoScrollRight);
      } else {
        this.autoScrollRight();
      }
    }
  }, {
    key: "generateHandlerStatus",
    value: function generateHandlerStatus() {
      this.setState({
        leftHandlerDisabled: !!this.reachLeft,
        rightHandlerDisabled: !!this.reachRight
      });
    }
  }, {
    key: "scrollByDirection",
    value: function scrollByDirection(dir) {
      var containerWidth = this.container.getBoundingClientRect().width;
      var handlerWidth = this.handler.getBoundingClientRect().width;
      var distance = containerWidth - 2 * handlerWidth;
      var tabsWidth = this.tabs.getBoundingClientRect().width;
      var tabsOffset = window.getComputedStyle(this.tabs).left;
      tabsOffset = Number(tabsOffset.substring(0, tabsOffset.length - 2));

      if (dir === 'left') {
        this.reachRight = false;

        if (-tabsOffset > distance) {
          this.tabs.style.left = "".concat(tabsOffset + distance, "px");
          this.reachLeft = false;
        } else {
          this.tabs.style.left = '0px';
          this.reachLeft = true;
        }
      }

      if (dir === 'right') {
        this.reachLeft = false;

        if (tabsWidth < -tabsOffset + 2 * distance) {
          this.tabs.style.left = "".concat(-tabsWidth + distance, "px");
          this.reachRight = true;
        } else {
          this.tabs.style.left = "".concat(tabsOffset - distance, "px");
          this.reachRight = false;
        }
      }

      this.generateHandlerStatus();
    }
  }, {
    key: "scrollUntilVisible",
    value: function scrollUntilVisible(target) {
      var containerWidth = this.container.getBoundingClientRect().width;
      var handlerWidth = this.handler.getBoundingClientRect().width;
      var distance = containerWidth - 2 * handlerWidth;
      var tabsWidth = this.tabs.getBoundingClientRect().width;
      var tabsOffset = window.getComputedStyle(this.tabs).left;
      tabsOffset = Number(tabsOffset.substring(0, tabsOffset.length - 2));
      var targetWidth = target.getBoundingClientRect().width;
      var targetOffsetLeft = target.offsetLeft;

      if (-tabsOffset > targetOffsetLeft && -tabsOffset < targetOffsetLeft + targetWidth) {
        this.tabs.style.left = "".concat(-targetOffsetLeft, "px");
        this.reachLeft = targetOffsetLeft === 0;
        this.reachRight = false;
      }

      if (-tabsOffset + distance > targetOffsetLeft && -tabsOffset + distance < targetOffsetLeft + targetWidth) {
        this.tabs.style.left = "".concat(distance - targetOffsetLeft - targetWidth, "px");
        this.reachRight = targetOffsetLeft === tabsWidth - targetWidth;
        this.reachLeft = false;
      }

      this.generateHandlerStatus();
    }
  }, {
    key: "renderCloseIcon",
    value: function renderCloseIcon(tabProps, specKey) {
      var _this2 = this;

      var type = this.props.type;

      if (tabProps.closable && type === 'card') {
        return _react.default.createElement(_Icon.default, {
          name: "close",
          className: "tab-close",
          onClick: function onClick(e) {
            if (!tabProps.disabled) {
              _this2.handleClose(e, specKey);
            }
          }
        });
      }

      return null;
    }
  }, {
    key: "renderTabLabel",
    value: function renderTabLabel(tabProps, isActive, index) {
      var _this3 = this;

      var specKey = tabProps.name || "tab-".concat(index);
      var _this$state = this.state,
          activeName = _this$state.activeName,
          handlerVisible = _this$state.handlerVisible;
      return _react.default.createElement("li", {
        key: specKey,
        className: (0, _classnames.default)({
          'is-active': isActive,
          'is-disabled': tabProps.disabled
        }),
        onClick: function onClick(e) {
          if (!tabProps.disabled && activeName !== specKey) {
            _this3.handleSelect(specKey);
          }

          if (handlerVisible) {
            var currentTarget = e.currentTarget;

            _this3.scrollUntilVisible(currentTarget);
          }
        }
      }, tabProps.label, this.renderCloseIcon(tabProps, specKey));
    }
  }, {
    key: "renderTabPanels",
    value: function renderTabPanels() {
      var _this4 = this;

      var tabLabels = [];
      var tabPanels = [];
      var children = this.props.children;
      var activeName = this.state.activeName;
      var hasActiveName = !(0, _isUndefined2.default)(activeName);
      var leastIndex = 0;
      var leastActive = false;

      _react.Children.forEach(children, function (tab, index) {
        if (_react.default.isValidElement(tab)) {
          var tabProps = tab.props;
          var isActive = false;
          if (tabProps.disabled && !leastActive) leastIndex += 1;

          if (hasActiveName && tabProps.name === activeName || !hasActiveName && index === leastIndex) {
            isActive = true;
            leastActive = true;
          }

          var tabLabel = _this4.renderTabLabel(tabProps, isActive, index);

          tabLabels.push(tabLabel);

          var tabPanel = _react.default.cloneElement(tab, {
            isActive: isActive,
            key: tabProps.name
          });

          tabPanels.push(tabPanel);
        } else {
          leastIndex += 1;
        }
      });

      return {
        tabLabels: tabLabels,
        tabPanels: tabPanels
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this5 = this;

      var _this$props2 = this.props,
          type = _this$props2.type,
          className = _this$props2.className,
          style = _this$props2.style,
          direction = _this$props2.direction,
          alignment = _this$props2.alignment;
      var _this$state2 = this.state,
          handlerVisible = _this$state2.handlerVisible,
          leftHandlerDisabled = _this$state2.leftHandlerDisabled,
          rightHandlerDisabled = _this$state2.rightHandlerDisabled;

      var _this$renderTabPanels = this.renderTabPanels(),
          tabLabels = _this$renderTabPanels.tabLabels,
          tabPanels = _this$renderTabPanels.tabPanels;

      var hasHandler = handlerVisible && direction === 'horizon';
      return _react.default.createElement("div", {
        className: (0, _classnames.default)('tabs-container', className, {
          'tabs-container-vertical': direction === 'vertical' && type !== 'card'
        }),
        ref: function ref(n) {
          _this5.container = n;
        }
      }, _react.default.createElement("div", {
        className: (0, _classnames.default)('tabs', (0, _defineProperty2.default)({
          'is-boxed': type === 'card',
          'is-horizon': direction === 'horizon' || type === 'card',
          'is-vertical': direction === 'vertical' && type !== 'card'
        }, "is-".concat(alignment), alignment)),
        style: style
      }, _react.default.createElement("ul", {
        ref: function ref(n) {
          _this5.tabs = n;
        },
        className: (0, _classnames.default)({
          'has-handler': hasHandler
        })
      }, tabLabels), hasHandler && _react.default.createElement("div", {
        className: (0, _classnames.default)('tabs-handler', 'to-left', {
          'is-disabled': leftHandlerDisabled
        }),
        onClick: this.scrollLeft,
        ref: function ref(n) {
          _this5.handler = n;
        }
      }, _react.default.createElement(_Icon.default, {
        name: "chevron-left"
      })), hasHandler && _react.default.createElement("div", {
        className: (0, _classnames.default)('tabs-handler', 'to-right', {
          'is-disabled': rightHandlerDisabled
        }),
        onClick: this.scrollRight
      }, _react.default.createElement(_Icon.default, {
        name: "chevron-right"
      }))), _react.default.createElement("div", {
        className: "tab-content"
      }, tabPanels));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var activeName = prevState.activeName;

      if ('activeName' in nextProps && nextProps.activeName !== activeName) {
        return {
          activeName: nextProps.activeName
        };
      }

      return null;
    }
  }]);
  return Tabs;
}(_react.Component);

(0, _defineProperty2.default)(Tabs, "TabPanel", _TabPanel.default);
(0, _defineProperty2.default)(Tabs, "propTypes", {
  type: _propTypes.default.string,
  onChange: _propTypes.default.func,
  onClose: _propTypes.default.func,
  direction: _propTypes.default.string,
  alignment: _propTypes.default.string,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  activeName: _propTypes.default.string,
  defaultActiveName: _propTypes.default.string,
  children: _propTypes.default.node
});
(0, _defineProperty2.default)(Tabs, "defaultProps", {
  type: 'line',
  direction: 'horizon',
  alignment: 'start',
  style: {},
  onChange: _noop2.default,
  onClose: _noop2.default
});
var _default = Tabs;
exports.default = _default;