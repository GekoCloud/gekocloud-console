"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("../../utils");

var _contextTypes = _interopRequireDefault(require("./contextTypes"));

var _TreeNode = _interopRequireDefault(require("./TreeNode"));

var _treeUtils = require("./treeUtils");

var convertDataToTree = function convertDataToTree(treeData, processor) {
  if (!treeData) return [];

  var internalProcessProps = function internalProcessProps(props) {
    return props;
  };

  var _ref = processor || {},
      _ref$processProps = _ref.processProps,
      processProps = _ref$processProps === void 0 ? internalProcessProps : _ref$processProps;

  var list = Array.isArray(treeData) ? treeData : [treeData];
  return list.map(function (_ref2) {
    var children = _ref2.children,
        props = (0, _objectWithoutProperties2.default)(_ref2, ["children"]);
    var childrenNodes = convertDataToTree(children, processor);
    return _react.default.createElement(_TreeNode.default, processProps(props), childrenNodes);
  });
};

var Tree =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Tree, _Component);

  function Tree() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Tree);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Tree)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      posEntities: {},
      // eslint-disable-line react/no-unused-state
      keyEntities: {},
      selectedKeys: [],
      checkedKeys: [],
      halfCheckedKeys: [],
      loadedKeys: [],
      loadingKeys: [],
      treeNode: []
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onNodeDragStart", function (event, node) {
      var expandedKeys = _this.state.expandedKeys;
      var onDragStart = _this.props.onDragStart;
      var _node$props = node.props,
          eventKey = _node$props.eventKey,
          children = _node$props.children;
      _this.dragNode = node;

      _this.setState({
        dragNodesKeys: (0, _treeUtils.getDragNodesKeys)(children, node),
        expandedKeys: (0, _treeUtils.arrDel)(expandedKeys, eventKey)
      });

      if (onDragStart) {
        onDragStart({
          event: event,
          node: node
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onNodeDragEnter", function (event, node) {
      var expandedKeys = _this.state.expandedKeys;
      var onDragEnter = _this.props.onDragEnter;
      var _node$props2 = node.props,
          pos = _node$props2.pos,
          eventKey = _node$props2.eventKey;
      if (!_this.dragNode) return;
      var dropPosition = (0, _treeUtils.calcDropPosition)(event, node);

      if (_this.dragNode.props.eventKey === eventKey && dropPosition === 0) {
        _this.setState({
          dragOverNodeKey: '',
          dropPosition: null
        });

        return;
      }

      setTimeout(function () {
        _this.setState({
          dragOverNodeKey: eventKey,
          dropPosition: dropPosition
        });

        if (!_this.delayedDragEnterLogic) {
          _this.delayedDragEnterLogic = {};
        }

        Object.keys(_this.delayedDragEnterLogic).forEach(function (key) {
          clearTimeout(_this.delayedDragEnterLogic[key]);
        });
        _this.delayedDragEnterLogic[pos] = setTimeout(function () {
          var newExpandedKeys = (0, _treeUtils.arrAdd)(expandedKeys, eventKey);

          _this.setState({
            expandedKeys: newExpandedKeys
          });

          if (onDragEnter) {
            onDragEnter({
              event: event,
              node: node,
              expandedKeys: newExpandedKeys
            });
          }
        }, 400);
      }, 0);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onNodeDragOver", function (event, node) {
      var onDragOver = _this.props.onDragOver;
      var _this$state = _this.state,
          dragOverNodeKey = _this$state.dragOverNodeKey,
          stateDropPosition = _this$state.dropPosition;
      var eventKey = node.props.eventKey;

      if (_this.dragNode && eventKey === dragOverNodeKey) {
        var dropPosition = (0, _treeUtils.calcDropPosition)(event, node);
        if (dropPosition === stateDropPosition) return;

        _this.setState({
          dropPosition: dropPosition
        });
      }

      if (onDragOver) {
        onDragOver({
          event: event,
          node: node
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onNodeDragLeave", function (event, node) {
      var onDragLeave = _this.props.onDragLeave;

      _this.setState({
        dragOverNodeKey: ''
      });

      if (onDragLeave) {
        onDragLeave({
          event: event,
          node: node
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onNodeDragEnd", function (event, node) {
      var onDragEnd = _this.props.onDragEnd;

      _this.setState({
        dragOverNodeKey: ''
      });

      if (onDragEnd) {
        onDragEnd({
          event: event,
          node: node
        });
      }

      _this.dragNode = null;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onNodeDrop", function (event, node) {
      var _this$state2 = _this.state,
          _this$state2$dragNode = _this$state2.dragNodesKeys,
          dragNodesKeys = _this$state2$dragNode === void 0 ? [] : _this$state2$dragNode,
          dropPosition = _this$state2.dropPosition;
      var onDrop = _this.props.onDrop;
      var _node$props3 = node.props,
          eventKey = _node$props3.eventKey,
          pos = _node$props3.pos;

      _this.setState({
        dragOverNodeKey: ''
      });

      if (dragNodesKeys.indexOf(eventKey) !== -1) {
        (0, _utils.warning)(false, "Can not drop to dragNode(include it's children node)");
        return;
      }

      var posArr = (0, _treeUtils.posToArr)(pos);
      var dropResult = {
        event: event,
        node: node,
        dragNode: _this.dragNode,
        dragNodesKeys: dragNodesKeys.slice(),
        dropPosition: dropPosition + Number(posArr[posArr.length - 1])
      };

      if (dropPosition !== 0) {
        dropResult.dropToGap = true;
      }

      if (onDrop) {
        onDrop(dropResult);
      }

      _this.dragNode = null;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onNodeClick", function (e, treeNode) {
      var onClick = _this.props.onClick;

      if (onClick) {
        onClick(e, treeNode);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onNodeDoubleClick", function (e, treeNode) {
      var onDoubleClick = _this.props.onDoubleClick;

      if (onDoubleClick) {
        onDoubleClick(e, treeNode);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onNodeSelect", function (e, treeNode) {
      var selectedKeys = _this.state.selectedKeys;
      var keyEntities = _this.state.keyEntities;
      var _this$props = _this.props,
          onSelect = _this$props.onSelect,
          multiple = _this$props.multiple;
      var _treeNode$props = treeNode.props,
          selected = _treeNode$props.selected,
          eventKey = _treeNode$props.eventKey;
      var targetSelected = !selected;

      if (!targetSelected) {
        selectedKeys = (0, _treeUtils.arrDel)(selectedKeys, eventKey);
      } else if (!multiple) {
        selectedKeys = [eventKey];
      } else {
        selectedKeys = (0, _treeUtils.arrAdd)(selectedKeys, eventKey);
      }

      var selectedNodes = selectedKeys.map(function (key) {
        var entity = keyEntities[key];
        if (!entity) return null;
        return entity.node;
      }).filter(function (node) {
        return node;
      });

      _this.setUncontrolledState({
        selectedKeys: selectedKeys
      });

      if (onSelect) {
        var eventObj = {
          event: 'select',
          selected: targetSelected,
          node: treeNode,
          selectedNodes: selectedNodes,
          nativeEvent: e.nativeEvent
        };
        onSelect(selectedKeys, eventObj);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onNodeCheck", function (e, treeNode, checked) {
      var _this$state3 = _this.state,
          keyEntities = _this$state3.keyEntities,
          oriCheckedKeys = _this$state3.checkedKeys,
          oriHalfCheckedKeys = _this$state3.halfCheckedKeys;
      var _this$props2 = _this.props,
          checkStrictly = _this$props2.checkStrictly,
          onCheck = _this$props2.onCheck;
      var eventKey = treeNode.props.eventKey;
      var checkedObj;
      var eventObj = {
        event: 'check',
        node: treeNode,
        checked: checked,
        nativeEvent: e.nativeEvent
      };

      var callBack = function callBack(paramChecked, paramEvent) {
        if (onCheck) {
          return function () {
            return onCheck(paramChecked, paramEvent);
          };
        }

        return function () {
          return null;
        };
      };

      if (checkStrictly) {
        var checkedKeys = checked ? (0, _treeUtils.arrAdd)(oriCheckedKeys, eventKey) : (0, _treeUtils.arrDel)(oriCheckedKeys, eventKey);
        var halfCheckedKeys = (0, _treeUtils.arrDel)(oriHalfCheckedKeys, eventKey);
        checkedObj = {
          checked: checkedKeys,
          halfChecked: halfCheckedKeys
        };
        eventObj.checkedNodes = checkedKeys.map(function (key) {
          return keyEntities[key];
        }).filter(function (entity) {
          return entity;
        }).map(function (entity) {
          return entity.node;
        });

        _this.setUncontrolledState({
          checkedKeys: checkedKeys
        }, callBack(checkedObj, eventObj));
      } else {
        var _conductCheck = (0, _treeUtils.conductCheck)([eventKey], checked, keyEntities, {
          checkedKeys: oriCheckedKeys,
          halfCheckedKeys: oriHalfCheckedKeys
        }),
            _checkedKeys = _conductCheck.checkedKeys,
            _halfCheckedKeys = _conductCheck.halfCheckedKeys;

        checkedObj = _checkedKeys;
        eventObj.checkedNodes = [];
        eventObj.checkedNodesPositions = [];
        eventObj.halfCheckedKeys = _halfCheckedKeys;

        _checkedKeys.forEach(function (key) {
          var entity = keyEntities[key];
          if (!entity) return;
          var node = entity.node,
              pos = entity.pos;
          eventObj.checkedNodes.push(node);
          eventObj.checkedNodesPositions.push({
            node: node,
            pos: pos
          });
        });

        _this.setUncontrolledState({
          checkedKeys: _checkedKeys,
          halfCheckedKeys: _halfCheckedKeys
        }, callBack(checkedObj, eventObj));
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onNodeLoad", function (treeNode) {
      return new Promise(function (resolve) {
        _this.setState(function (_ref3) {
          var _ref3$loadedKeys = _ref3.loadedKeys,
              loadedKeys = _ref3$loadedKeys === void 0 ? [] : _ref3$loadedKeys,
              _ref3$loadingKeys = _ref3.loadingKeys,
              loadingKeys = _ref3$loadingKeys === void 0 ? [] : _ref3$loadingKeys;
          var _this$props3 = _this.props,
              loadData = _this$props3.loadData,
              onLoad = _this$props3.onLoad;
          var eventKey = treeNode.props.eventKey;

          if (!loadData || loadedKeys.indexOf(eventKey) !== -1 || loadingKeys.indexOf(eventKey) !== -1) {
            return {};
          }

          var promise = loadData(treeNode);
          promise.then(function () {
            var _this$state4 = _this.state,
                loaded = _this$state4.loadedKeys,
                loading = _this$state4.loadingKeys;
            var newLoadedKeys = (0, _treeUtils.arrAdd)(loaded, eventKey);
            var newLoadingKeys = (0, _treeUtils.arrDel)(loading, eventKey);

            if (onLoad) {
              var eventObj = {
                event: 'load',
                node: treeNode
              };
              onLoad(newLoadedKeys, eventObj);
            }

            _this.setUncontrolledState({
              loadedKeys: newLoadedKeys
            });

            _this.setState({
              loadingKeys: newLoadingKeys
            });

            resolve();
          });
          return {
            loadingKeys: (0, _treeUtils.arrAdd)(loadingKeys, eventKey)
          };
        });
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onNodeExpand", function (e, treeNode) {
      var expandedKeys = _this.state.expandedKeys;
      var _this$props4 = _this.props,
          onExpand = _this$props4.onExpand,
          loadData = _this$props4.loadData;
      var _treeNode$props2 = treeNode.props,
          eventKey = _treeNode$props2.eventKey,
          expanded = _treeNode$props2.expanded;
      var index = expandedKeys.indexOf(eventKey);
      var targetExpanded = !expanded;
      (0, _utils.warning)(expanded && index !== -1 || !expanded && index === -1, 'Expand state not sync with index check');

      if (targetExpanded) {
        expandedKeys = (0, _treeUtils.arrAdd)(expandedKeys, eventKey);
      } else {
        expandedKeys = (0, _treeUtils.arrDel)(expandedKeys, eventKey);
      }

      _this.setUncontrolledState({
        expandedKeys: expandedKeys
      });

      if (onExpand) {
        onExpand(expandedKeys, {
          node: treeNode,
          expanded: targetExpanded,
          nativeEvent: e.nativeEvent
        });
      }

      if (targetExpanded && loadData) {
        var loadPromise = _this.onNodeLoad(treeNode);

        return loadPromise ? loadPromise.then(function () {
          _this.setUncontrolledState({
            expandedKeys: expandedKeys
          });
        }) : null;
      }

      return null;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onNodeMouseEnter", function (event, node) {
      var onMouseEnter = _this.props.onMouseEnter;

      if (onMouseEnter) {
        onMouseEnter({
          event: event,
          node: node
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onNodeMouseLeave", function (event, node) {
      var onMouseLeave = _this.props.onMouseLeave;

      if (onMouseLeave) {
        onMouseLeave({
          event: event,
          node: node
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onNodeContextMenu", function (event, node) {
      var onRightClick = _this.props.onRightClick;

      if (onRightClick) {
        event.preventDefault();
        onRightClick({
          event: event,
          node: node
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setUncontrolledState", function (state, callBack) {
      var needSync = false;
      var newState = {};
      Object.keys(state).forEach(function (name) {
        if (name in _this.props) return;
        needSync = true;
        newState[name] = state[name];
      });

      if (needSync) {
        _this.setState(newState, callBack);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isKeyChecked", function (key) {
      var _this$state$checkedKe = _this.state.checkedKeys,
          checkedKeys = _this$state$checkedKe === void 0 ? [] : _this$state$checkedKe;
      return checkedKeys.indexOf(key) !== -1;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getCheckedNodes", function () {
      var _this$state5 = _this.state,
          checkedKeys = _this$state5.checkedKeys,
          halfCheckedKeys = _this$state5.halfCheckedKeys,
          treeNode = _this$state5.treeNode;
      var checkedNodes = [];
      var halfCheckedNodes = [];
      (0, _treeUtils.traverseTreeNodes)(treeNode, function (_ref4) {
        var node = _ref4.node,
            key = _ref4.key;

        if (checkedKeys.includes(key)) {
          checkedNodes.push(node);
        }

        if (halfCheckedKeys.includes(key)) {
          halfCheckedNodes.push(node);
        }
      });
      return {
        checkedNodes: checkedNodes,
        halfCheckedNodes: halfCheckedNodes
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "forceRefreshStatus", function () {
      var callBack = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};

      _this.setState({
        selectedKeys: [],
        checkedKeys: [],
        halfCheckedKeys: [],
        expandedKeys: [],
        loadedKeys: [],
        loadingKeys: []
      }, callBack);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderTreeNode", function (child, index) {
      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var _this$state6 = _this.state,
          keyEntities = _this$state6.keyEntities,
          _this$state6$expanded = _this$state6.expandedKeys,
          expandedKeys = _this$state6$expanded === void 0 ? [] : _this$state6$expanded,
          _this$state6$selected = _this$state6.selectedKeys,
          selectedKeys = _this$state6$selected === void 0 ? [] : _this$state6$selected,
          _this$state6$halfChec = _this$state6.halfCheckedKeys,
          halfCheckedKeys = _this$state6$halfChec === void 0 ? [] : _this$state6$halfChec,
          _this$state6$loadedKe = _this$state6.loadedKeys,
          loadedKeys = _this$state6$loadedKe === void 0 ? [] : _this$state6$loadedKe,
          _this$state6$loadingK = _this$state6.loadingKeys,
          loadingKeys = _this$state6$loadingK === void 0 ? [] : _this$state6$loadingK,
          dragOverNodeKey = _this$state6.dragOverNodeKey,
          dropPosition = _this$state6.dropPosition;
      var pos = (0, _treeUtils.getPosition)(level, index);
      var key = child.key || pos;

      if (!keyEntities[key]) {
        (0, _treeUtils.warnOnlyTreeNode)();
        return null;
      }

      return _react.default.cloneElement(child, {
        key: key,
        eventKey: key,
        expanded: expandedKeys.indexOf(key) !== -1,
        selected: selectedKeys.indexOf(key) !== -1,
        loaded: loadedKeys.indexOf(key) !== -1,
        loading: loadingKeys.indexOf(key) !== -1,
        checked: _this.isKeyChecked(key),
        halfChecked: halfCheckedKeys.indexOf(key) !== -1,
        pos: pos,
        dragOver: dragOverNodeKey === key && dropPosition === 0,
        dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,
        dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1
      });
    });
    return _this;
  }

  (0, _createClass2.default)(Tree, [{
    key: "getChildContext",
    value: function getChildContext() {
      var _this$props5 = this.props,
          prefixCls = _this$props5.prefixCls,
          selectable = _this$props5.selectable,
          showIcon = _this$props5.showIcon,
          icon = _this$props5.icon,
          draggable = _this$props5.draggable,
          checkable = _this$props5.checkable,
          checkStrictly = _this$props5.checkStrictly,
          disabled = _this$props5.disabled,
          loadData = _this$props5.loadData,
          filterTreeNode = _this$props5.filterTreeNode,
          transitionName = _this$props5.transitionName,
          transitionDuration = _this$props5.transitionDuration,
          switcherIconsName = _this$props5.switcherIconsName,
          switcherIcon = _this$props5.switcherIcon;
      return {
        tree: {
          // root: this,
          prefixCls: prefixCls,
          selectable: selectable,
          showIcon: showIcon,
          icon: icon,
          switcherIcon: switcherIcon,
          switcherIconsName: switcherIconsName,
          draggable: draggable,
          checkable: checkable,
          checkStrictly: checkStrictly,
          disabled: disabled,
          transitionName: transitionName,
          transitionDuration: transitionDuration,
          loadData: loadData,
          filterTreeNode: filterTreeNode,
          renderTreeNode: this.renderTreeNode,
          isKeyChecked: this.isKeyChecked,
          onNodeClick: this.onNodeClick,
          onNodeDoubleClick: this.onNodeDoubleClick,
          onNodeExpand: this.onNodeExpand,
          onNodeSelect: this.onNodeSelect,
          onNodeCheck: this.onNodeCheck,
          onNodeLoad: this.onNodeLoad,
          onNodeMouseEnter: this.onNodeMouseEnter,
          onNodeMouseLeave: this.onNodeMouseLeave,
          onNodeContextMenu: this.onNodeContextMenu,
          onNodeDragStart: this.onNodeDragStart,
          onNodeDragEnter: this.onNodeDragEnter,
          onNodeDragOver: this.onNodeDragOver,
          onNodeDragLeave: this.onNodeDragLeave,
          onNodeDragEnd: this.onNodeDragEnd,
          onNodeDrop: this.onNodeDrop
        }
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var treeNode = this.state.treeNode;
      var _this$props6 = this.props,
          prefixCls = _this$props6.prefixCls,
          className = _this$props6.className,
          focusable = _this$props6.focusable,
          showLine = _this$props6.showLine,
          _this$props6$tabIndex = _this$props6.tabIndex,
          tabIndex = _this$props6$tabIndex === void 0 ? 0 : _this$props6$tabIndex;
      var domProps = (0, _treeUtils.getDataAndAria)(this.props);

      if (focusable) {
        domProps.tabIndex = tabIndex;
        domProps.onKeyDown = this.onKeyDown;
      }

      return _react.default.createElement("ul", (0, _extends2.default)({}, domProps, {
        className: (0, _classnames.default)(prefixCls, className, (0, _defineProperty2.default)({}, "".concat(prefixCls, "-show-line"), showLine)),
        role: "tree",
        unselectable: "on"
      }), (0, _treeUtils.mapChildren)(treeNode, function (node, index) {
        return _this2.renderTreeNode(node, index);
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var prevProps = prevState.prevProps;
      var defaultExpandParent = nextProps.defaultExpandParent,
          expandedKeys = nextProps.expandedKeys,
          defaultExpandedKeys = nextProps.defaultExpandedKeys,
          autoExpandParent = nextProps.autoExpandParent,
          defaultExpandAll = nextProps.defaultExpandAll;
      var newState = {
        prevProps: nextProps
      };

      var needSync = function needSync(name) {
        if (!prevProps && name in nextProps) {
          return true;
        }

        if (prevProps && prevProps[name] !== nextProps[name]) {
          return true;
        }

        return false;
      };

      var treeNode = null;

      if (needSync('treeData')) {
        treeNode = convertDataToTree(nextProps.treeData);
      } else if (needSync('children')) {
        treeNode = (0, _treeUtils.toArray)(nextProps.children);
      }

      if (treeNode) {
        newState.treeNode = treeNode;
        var entitiesMap = (0, _treeUtils.convertTreeToEntities)(treeNode);
        newState.posEntities = entitiesMap.posEntities;
        newState.keyEntities = entitiesMap.keyEntities;
      }

      var keyEntities = newState.keyEntities || prevState.keyEntities;

      if (needSync('expandedKeys') || prevProps && needSync('autoExpandParent')) {
        newState.expandedKeys = autoExpandParent || !prevProps && defaultExpandParent ? (0, _treeUtils.conductExpandParent)(expandedKeys, keyEntities) : expandedKeys;
      } else if (!prevProps && defaultExpandAll) {
        newState.expandedKeys = Object.keys(keyEntities);
      } else if (!prevProps && defaultExpandedKeys) {
        newState.expandedKeys = autoExpandParent || defaultExpandParent ? (0, _treeUtils.conductExpandParent)(defaultExpandedKeys, keyEntities) : defaultExpandedKeys;
      }

      if (nextProps.selectable) {
        if (needSync('selectedKeys')) {
          newState.selectedKeys = (0, _treeUtils.calcSelectedKeys)(nextProps.selectedKeys, nextProps);
        } else if (!prevProps && nextProps.defaultSelectedKeys) {
          newState.selectedKeys = (0, _treeUtils.calcSelectedKeys)(nextProps.defaultSelectedKeys, nextProps);
        }
      }

      if (nextProps.checkable) {
        var checkedKeyEntity;

        if (needSync('checkedKeys')) {
          checkedKeyEntity = (0, _treeUtils.parseCheckedKeys)(nextProps.checkedKeys) || {};
        } else if (!prevProps && nextProps.defaultCheckedKeys) {
          checkedKeyEntity = (0, _treeUtils.parseCheckedKeys)(nextProps.defaultCheckedKeys) || {};
        } else if (treeNode) {
          checkedKeyEntity = (0, _treeUtils.parseCheckedKeys)(nextProps.checkedKeys) || {
            checkedKeys: prevState.checkedKeys,
            halfCheckedKeys: prevState.halfCheckedKeys
          };
        }

        if (checkedKeyEntity) {
          var _checkedKeyEntity = checkedKeyEntity,
              _checkedKeyEntity$che = _checkedKeyEntity.checkedKeys,
              checkedKeys = _checkedKeyEntity$che === void 0 ? [] : _checkedKeyEntity$che,
              _checkedKeyEntity$hal = _checkedKeyEntity.halfCheckedKeys,
              halfCheckedKeys = _checkedKeyEntity$hal === void 0 ? [] : _checkedKeyEntity$hal;

          if (!nextProps.checkStrictly) {
            var conductKeys = (0, _treeUtils.conductCheck)(checkedKeys, true, keyEntities);
            var checked = conductKeys.checkedKeys,
                halfChecked = conductKeys.halfCheckedKeys;
            checkedKeys = checked;
            halfCheckedKeys = halfChecked;
          }

          newState.checkedKeys = checkedKeys;
          newState.halfCheckedKeys = halfCheckedKeys;
        }
      }

      if (needSync('loadedKeys')) {
        newState.loadedKeys = nextProps.loadedKeys;
      }

      return newState;
    }
  }]);
  return Tree;
}(_react.Component);

(0, _defineProperty2.default)(Tree, "propTypes", {
  prefixCls: _propTypes.default.string,
  className: _propTypes.default.string,
  tabIndex: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  children: _propTypes.default.any,
  treeData: _propTypes.default.array,
  showLine: _propTypes.default.bool,
  showIcon: _propTypes.default.bool,
  icon: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  focusable: _propTypes.default.bool,
  selectable: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  multiple: _propTypes.default.bool,
  checkable: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.node]),
  checkStrictly: _propTypes.default.bool,
  draggable: _propTypes.default.bool,
  defaultExpandParent: _propTypes.default.bool,
  autoExpandParent: _propTypes.default.bool,
  defaultExpandAll: _propTypes.default.bool,
  defaultExpandedKeys: _propTypes.default.arrayOf(_propTypes.default.string),
  expandedKeys: _propTypes.default.arrayOf(_propTypes.default.string),
  defaultCheckedKeys: _propTypes.default.arrayOf(_propTypes.default.string),
  checkedKeys: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])), _propTypes.default.object]),
  defaultSelectedKeys: _propTypes.default.arrayOf(_propTypes.default.string),
  selectedKeys: _propTypes.default.arrayOf(_propTypes.default.string),
  onClick: _propTypes.default.func,
  onDoubleClick: _propTypes.default.func,
  onExpand: _propTypes.default.func,
  onCheck: _propTypes.default.func,
  onSelect: _propTypes.default.func,
  onLoad: _propTypes.default.func,
  loadData: _propTypes.default.func,
  loadedKeys: _propTypes.default.arrayOf(_propTypes.default.string),
  onMouseEnter: _propTypes.default.func,
  onMouseLeave: _propTypes.default.func,
  onRightClick: _propTypes.default.func,
  onDragStart: _propTypes.default.func,
  onDragEnter: _propTypes.default.func,
  onDragOver: _propTypes.default.func,
  onDragLeave: _propTypes.default.func,
  onDragEnd: _propTypes.default.func,
  onDrop: _propTypes.default.func,
  filterTreeNode: _propTypes.default.func,
  transitionName: _propTypes.default.string,
  transitionDuration: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.object]),
  switcherIconsName: _propTypes.default.object,
  switcherIcon: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func])
});
(0, _defineProperty2.default)(Tree, "childContextTypes", _contextTypes.default);
(0, _defineProperty2.default)(Tree, "defaultProps", {
  prefixCls: 'tree',
  showLine: false,
  showIcon: false,
  selectable: true,
  multiple: false,
  checkable: false,
  disabled: false,
  checkStrictly: false,
  draggable: false,
  defaultExpandParent: true,
  autoExpandParent: false,
  defaultExpandAll: false,
  defaultExpandedKeys: [],
  defaultCheckedKeys: [],
  defaultSelectedKeys: [],
  transitionName: 'fade down',
  transitionDuration: 100
});
var _default = Tree;
exports.default = _default;