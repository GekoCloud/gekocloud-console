"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _Loading = _interopRequireDefault(require("../Loading"));

var _contextTypes = _interopRequireDefault(require("./contextTypes"));

var _TransitionGroup = _interopRequireDefault(require("../Transition/TransitionGroup"));

var _treeUtils = require("./treeUtils");

var ICON_OPEN = 'open';
var ICON_CLOSE = 'close';

var TreeNode =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(TreeNode, _Component);

  function TreeNode(_props) {
    var _this;

    (0, _classCallCheck2.default)(this, TreeNode);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TreeNode).call(this, _props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onSelectorClick", function (e) {
      var onNodeClick = _this.context.tree.onNodeClick;
      onNodeClick(e, (0, _assertThisInitialized2.default)(_this));

      if (_this.isSelectable()) {
        _this.onSelect(e);
      } else {
        _this.onCheck(e);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onSelectorDoubleClick", function (e) {
      var onNodeDoubleClick = _this.context.tree.onNodeDoubleClick;
      onNodeDoubleClick(e, (0, _assertThisInitialized2.default)(_this));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onSelect", function (e) {
      if (_this.isDisabled()) return;
      var onNodeSelect = _this.context.tree.onNodeSelect;
      e.preventDefault();
      onNodeSelect(e, (0, _assertThisInitialized2.default)(_this));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCheck", function (e) {
      if (_this.isDisabled()) return;
      var _this$props = _this.props,
          disableCheckbox = _this$props.disableCheckbox,
          checked = _this$props.checked;
      var _this$context$tree = _this.context.tree,
          checkable = _this$context$tree.checkable,
          onNodeCheck = _this$context$tree.onNodeCheck;
      if (!checkable || disableCheckbox) return;
      e.preventDefault();
      var targetChecked = !checked;
      onNodeCheck(e, (0, _assertThisInitialized2.default)(_this), targetChecked);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMouseEnter", function (e) {
      var onNodeMouseEnter = _this.context.tree.onNodeMouseEnter;
      onNodeMouseEnter(e, (0, _assertThisInitialized2.default)(_this));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMouseLeave", function (e) {
      var onNodeMouseLeave = _this.context.tree.onNodeMouseLeave;
      onNodeMouseLeave(e, (0, _assertThisInitialized2.default)(_this));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onContextMenu", function (e) {
      var onNodeContextMenu = _this.context.tree.onNodeContextMenu;
      onNodeContextMenu(e, (0, _assertThisInitialized2.default)(_this));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onDragStart", function (e) {
      var onNodeDragStart = _this.context.tree.onNodeDragStart;
      e.stopPropagation();

      _this.setState({
        dragNodeHighlight: true
      });

      onNodeDragStart(e, (0, _assertThisInitialized2.default)(_this));

      try {
        e.dataTransfer.setData('text/plain', '');
      } catch (error) {// empty
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onDragEnter", function (e) {
      var onNodeDragEnter = _this.context.tree.onNodeDragEnter;
      e.preventDefault();
      e.stopPropagation();
      onNodeDragEnter(e, (0, _assertThisInitialized2.default)(_this));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onDragOver", function (e) {
      var onNodeDragOver = _this.context.tree.onNodeDragOver;
      e.preventDefault();
      e.stopPropagation();
      onNodeDragOver(e, (0, _assertThisInitialized2.default)(_this));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onDragLeave", function (e) {
      var onNodeDragLeave = _this.context.tree.onNodeDragLeave;
      e.stopPropagation();
      onNodeDragLeave(e, (0, _assertThisInitialized2.default)(_this));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onDragEnd", function (e) {
      var onNodeDragEnd = _this.context.tree.onNodeDragEnd;
      e.stopPropagation();

      _this.setState({
        dragNodeHighlight: false
      });

      onNodeDragEnd(e, (0, _assertThisInitialized2.default)(_this));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onDrop", function (e) {
      var onNodeDrop = _this.context.tree.onNodeDrop;
      e.preventDefault();
      e.stopPropagation();

      _this.setState({
        dragNodeHighlight: false
      });

      onNodeDrop(e, (0, _assertThisInitialized2.default)(_this));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onExpand", function (e) {
      var onNodeExpand = _this.context.tree.onNodeExpand;
      onNodeExpand(e, (0, _assertThisInitialized2.default)(_this));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setSelectHandle", function (node) {
      _this.selectHandle = node;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getNodeChildren", function () {
      var children = _this.props.children;
      var originList = (0, _treeUtils.toArray)(children).filter(function (node) {
        return node;
      });
      var targetList = (0, _treeUtils.getNodeChildren)(originList);

      if (originList.length !== targetList.length) {
        (0, _treeUtils.warnOnlyTreeNode)();
      }

      return targetList;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getNodeState", function () {
      var expanded = _this.props.expanded;

      if (_this.isLeaf()) {
        return null;
      }

      return expanded ? ICON_OPEN : ICON_CLOSE;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isLeaf", function () {
      var _this$props2 = _this.props,
          isLeaf = _this$props2.isLeaf,
          loaded = _this$props2.loaded;
      var loadData = _this.context.tree.loadData;
      var hasChildren = _this.getNodeChildren().length !== 0;

      if (isLeaf === false) {
        return false;
      }

      return isLeaf || !loadData && !hasChildren || loadData && loaded && !hasChildren;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isDisabled", function () {
      var disabled = _this.props.disabled;
      var treeDisabled = _this.context.tree.disabled;

      if (disabled === false) {
        return false;
      }

      return !!(treeDisabled || disabled);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isSelectable", function () {
      var selectable = _this.props.selectable;
      var treeSelectable = _this.context.tree.selectable;

      if (typeof selectable === 'boolean') {
        return selectable;
      }

      return treeSelectable;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "syncLoadData", function (props) {
      var expanded = props.expanded,
          loading = props.loading,
          loaded = props.loaded;
      var _this$context$tree2 = _this.context.tree,
          loadData = _this$context$tree2.loadData,
          onNodeLoad = _this$context$tree2.onNodeLoad;
      if (loading) return;

      if (loadData && expanded && !_this.isLeaf()) {
        var hasChildren = _this.getNodeChildren().length !== 0;

        if (!hasChildren && !loaded) {
          onNodeLoad((0, _assertThisInitialized2.default)(_this));
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderSwitcher", function () {
      var _this$props3 = _this.props,
          expanded = _this$props3.expanded,
          switcherIconFromProps = _this$props3.switcherIcon,
          loading = _this$props3.loading;
      var _this$context$tree3 = _this.context.tree,
          prefixCls = _this$context$tree3.prefixCls,
          switcherIconFromCtx = _this$context$tree3.switcherIcon,
          switcherIconsName = _this$context$tree3.switcherIconsName,
          loadData = _this$context$tree3.loadData;

      if (loadData && loading) {
        return _this.renderLoadingIcon();
      }

      var customIconName = false;

      var isLeaf = _this.isLeaf();

      var generatorIcon = function generatorIcon() {
        var switcherIcon = switcherIconFromProps || switcherIconFromCtx;

        if (!switcherIconsName && !switcherIcon) {
          return _react.default.createElement(_Icon.default, {
            name: "triangle-right",
            size: 16,
            type: "dark"
          });
        }

        if (switcherIconsName) {
          customIconName = true;
          return _react.default.createElement(_Icon.default, {
            name: expanded ? switcherIconsName.open : switcherIconsName.close,
            size: 16,
            type: "dark"
          });
        }

        if (typeof switcherIcon === 'function') {
          return _react.default.createElement(switcherIcon, (0, _objectSpread2.default)({}, _this.props, {
            isLeaf: _this.isLeaf()
          }));
        }

        return switcherIcon;
      };

      var iconComponent = generatorIcon();
      var switcherCls = (0, _classnames.default)("".concat(prefixCls, "-switcher"), !isLeaf && !customIconName && "".concat(prefixCls, "-switcher-").concat(expanded ? ICON_OPEN : ICON_CLOSE), isLeaf && "".concat(prefixCls, "-switcher-noop"));
      return _react.default.createElement("span", {
        onClick: isLeaf ? _noop2.default : _this.onExpand,
        className: switcherCls
      }, iconComponent);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderCheckbox", function () {
      var _this$props4 = _this.props,
          checked = _this$props4.checked,
          halfChecked = _this$props4.halfChecked,
          disableCheckbox = _this$props4.disableCheckbox;
      var _this$context$tree4 = _this.context.tree,
          prefixCls = _this$context$tree4.prefixCls,
          checkable = _this$context$tree4.checkable;

      var disabled = _this.isDisabled();

      if (!checkable) return null;
      var $custom = typeof checkable !== 'boolean' ? checkable : null;
      return _react.default.createElement("span", {
        className: (0, _classnames.default)("".concat(prefixCls, "-checkbox"), checked && "".concat(prefixCls, "-checkbox-checked"), !checked && halfChecked && "".concat(prefixCls, "-checkbox-indeterminate"), (disabled || disableCheckbox) && "".concat(prefixCls, "-checkbox-disabled")),
        onClick: _this.onCheck
      }, $custom);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderLoadingIcon", function () {
      var loading = _this.props.loading;
      var prefixCls = _this.context.tree.prefixCls;
      return _react.default.createElement("span", {
        className: (0, _classnames.default)("".concat(prefixCls, "-switcher"), "".concat(prefixCls, "-switcher-open"), loading && "".concat(prefixCls, "-icon-loading"))
      }, _react.default.createElement(_Loading.default, {
        size: 16
      }));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderSelector", function () {
      var dragNodeHighlight = _this.state.dragNodeHighlight;
      var _this$props5 = _this.props,
          title = _this$props5.title,
          selected = _this$props5.selected,
          icon = _this$props5.icon;
      var _this$context$tree5 = _this.context.tree,
          prefixCls = _this$context$tree5.prefixCls,
          showIcon = _this$context$tree5.showIcon,
          treeIcon = _this$context$tree5.icon,
          draggable = _this$context$tree5.draggable;

      var disabled = _this.isDisabled();

      var wrapClass = "".concat(prefixCls, "-node-content-wrapper");
      var $icon;

      if (showIcon) {
        var currentIcon = icon || treeIcon;
        $icon = currentIcon ? _react.default.createElement("span", {
          className: (0, _classnames.default)("".concat(prefixCls, "-iconEle"), "".concat(prefixCls, "-icon-customize"))
        }, typeof currentIcon === 'function' ? _react.default.createElement(currentIcon, (0, _objectSpread2.default)({}, _this.props)) : currentIcon) : null;
      }

      var $title = _react.default.createElement("span", {
        className: "".concat(prefixCls, "-title")
      }, title);

      return _react.default.createElement("span", {
        ref: _this.setSelectHandle,
        title: typeof title === 'string' ? title : '',
        className: (0, _classnames.default)("".concat(wrapClass), "".concat(wrapClass, "-").concat(_this.getNodeState() || 'normal'), !disabled && (selected || dragNodeHighlight) && "".concat(prefixCls, "-node-selected"), !disabled && draggable && 'draggable'),
        draggable: !disabled && draggable || undefined,
        "aria-grabbed": !disabled && draggable || undefined,
        onMouseEnter: _this.onMouseEnter,
        onMouseLeave: _this.onMouseLeave,
        onContextMenu: _this.onContextMenu,
        onClick: _this.onSelectorClick,
        onDoubleClick: _this.onSelectorDoubleClick,
        onDragStart: draggable ? _this.onDragStart : undefined
      }, $icon, $title);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderChildren", function () {
      var _this$props6 = _this.props,
          expanded = _this$props6.expanded,
          pos = _this$props6.pos;
      var _this$context$tree6 = _this.context.tree,
          prefixCls = _this$context$tree6.prefixCls,
          renderTreeNode = _this$context$tree6.renderTreeNode,
          transitionName = _this$context$tree6.transitionName,
          transitionDuration = _this$context$tree6.transitionDuration;

      var nodeList = _this.getNodeChildren();

      if (nodeList.length === 0) {
        return null;
      }

      var $children;

      if (expanded) {
        $children = _react.default.createElement("ul", {
          className: (0, _classnames.default)("".concat(prefixCls, "-child-tree"), expanded && "".concat(prefixCls, "-child-tree-open")),
          "data-expanded": expanded,
          role: "group"
        }, (0, _treeUtils.mapChildren)(nodeList, function (node, index) {
          return renderTreeNode(node, index, pos);
        }));
      }

      return _react.default.createElement(_TransitionGroup.default, {
        as: "none",
        animation: transitionName,
        duration: transitionDuration
      }, $children);
    });
    _this.state = {
      dragNodeHighlight: false
    };
    return _this;
  }

  (0, _createClass2.default)(TreeNode, [{
    key: "getChildContext",
    value: function getChildContext() {
      return (0, _objectSpread2.default)({}, this.context);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.syncLoadData(this.props);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.syncLoadData(this.props);
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames;

      var loading = this.props.loading;
      var _this$props7 = this.props,
          className = _this$props7.className,
          style = _this$props7.style,
          dragOver = _this$props7.dragOver,
          dragOverGapTop = _this$props7.dragOverGapTop,
          dragOverGapBottom = _this$props7.dragOverGapBottom,
          isLeaf = _this$props7.isLeaf,
          expanded = _this$props7.expanded,
          selected = _this$props7.selected,
          checked = _this$props7.checked,
          halfChecked = _this$props7.halfChecked,
          otherProps = (0, _objectWithoutProperties2.default)(_this$props7, ["className", "style", "dragOver", "dragOverGapTop", "dragOverGapBottom", "isLeaf", "expanded", "selected", "checked", "halfChecked"]);
      var _this$context$tree7 = this.context.tree,
          prefixCls = _this$context$tree7.prefixCls,
          filterTreeNode = _this$context$tree7.filterTreeNode,
          draggable = _this$context$tree7.draggable;
      var dragNodeHighlight = this.state.dragNodeHighlight;
      var disabled = this.isDisabled();
      var dataOrAriaAttributeProps = (0, _treeUtils.getDataAndAria)(otherProps);
      var children = this.renderChildren();
      return _react.default.createElement("li", (0, _extends2.default)({
        className: (0, _classnames.default)(className, "".concat(prefixCls, "-node"), (_classNames = {}, (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-node-disabled"), disabled), (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-node-switcher-").concat(expanded ? 'open' : 'close'), !isLeaf), (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-node-checkbox-checked"), checked), (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-node-checkbox-indeterminate"), halfChecked), (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-node-selected"), selected), (0, _defineProperty2.default)(_classNames, "".concat(prefixCls, "-node-loading"), loading), (0, _defineProperty2.default)(_classNames, 'drag-over', !disabled && dragOver), (0, _defineProperty2.default)(_classNames, 'drag-over-gap-top', !disabled && dragOverGapTop), (0, _defineProperty2.default)(_classNames, 'drag-over-gap-bottom', !disabled && dragOverGapBottom), (0, _defineProperty2.default)(_classNames, 'filter-node', filterTreeNode && filterTreeNode(this)), (0, _defineProperty2.default)(_classNames, 'is-leaf-node', children === null), _classNames)),
        style: style,
        role: "treeitem",
        onDragEnter: draggable ? this.onDragEnter : undefined,
        onDragOver: draggable ? this.onDragOver : undefined,
        onDragLeave: draggable ? this.onDragLeave : undefined,
        onDrop: draggable ? this.onDrop : undefined,
        onDragEnd: draggable ? this.onDragEnd : undefined
      }, dataOrAriaAttributeProps), _react.default.createElement("div", {
        className: (0, _classnames.default)("".concat(prefixCls, "-node-wrap"), !disabled && (selected || dragNodeHighlight) && "".concat(prefixCls, "-node-wrap-selected"))
      }, this.renderSwitcher(), this.renderCheckbox(), this.renderSelector()), children);
    }
  }]);
  return TreeNode;
}(_react.Component);

(0, _defineProperty2.default)(TreeNode, "isTreeNode", true);
(0, _defineProperty2.default)(TreeNode, "propTypes", {
  eventKey: _propTypes.default.string,
  prefixCls: _propTypes.default.string,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  root: _propTypes.default.object,
  onSelect: _propTypes.default.func,
  expanded: _propTypes.default.bool,
  selected: _propTypes.default.bool,
  checked: _propTypes.default.bool,
  loaded: _propTypes.default.bool,
  loading: _propTypes.default.bool,
  halfChecked: _propTypes.default.bool,
  children: _propTypes.default.node,
  title: _propTypes.default.node,
  pos: _propTypes.default.string,
  dragOver: _propTypes.default.bool,
  dragOverGapTop: _propTypes.default.bool,
  dragOverGapBottom: _propTypes.default.bool,
  dataRef: _propTypes.default.object,
  isLeaf: _propTypes.default.bool,
  selectable: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  disableCheckbox: _propTypes.default.bool,
  icon: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  switcherIcon: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func])
});
(0, _defineProperty2.default)(TreeNode, "contextTypes", _contextTypes.default);
(0, _defineProperty2.default)(TreeNode, "childContextTypes", _contextTypes.default);
(0, _defineProperty2.default)(TreeNode, "defaultProps", {
  title: '---'
});
var _default = TreeNode;
exports.default = _default;