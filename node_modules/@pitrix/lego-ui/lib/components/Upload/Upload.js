"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _request = _interopRequireDefault(require("./utils/request"));

var _attrAccept = _interopRequireDefault(require("./utils/attr-accept"));

var _traverseFileTree = _interopRequireDefault(require("./utils/traverseFileTree"));

var _warning = _interopRequireDefault(require("../../utils/warning"));

var now = +new Date();
var index = 0;

function getUid() {
  index += 1;
  return "upload-".concat(now, "-").concat(index);
}

var Uploader =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Uploader, _Component);

  function Uploader() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Uploader);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Uploader)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "reqs", {});
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "files", {});
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      uid: getUid(),
      isDragging: false
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onChange", function (e) {
      var files = e.target.files;

      _this.uploadFiles(files);

      _this.reset();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onClick", function () {
      if (!_this.fileInput) return;

      _this.fileInput.click();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onKeyDown", function (e) {
      if (e.key === 'Enter') {
        _this.onClick();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFileDrop", function (e) {
      var _this$props = _this.props,
          directory = _this$props.directory,
          propsAccept = _this$props.accept;
      e.preventDefault();

      if (e.type === 'dragover') {
        _this.setState({
          isDragging: true
        });

        return;
      }

      if (e.type === 'dragleave') {
        _this.setState({
          isDragging: false
        });

        return;
      }

      if (e.type === 'drop') {
        _this.setState({
          isDragging: false
        });

        var accept = function accept(_file) {
          return (0, _attrAccept.default)(_file, propsAccept);
        };

        if (directory) {
          (0, _traverseFileTree.default)((0, _toConsumableArray2.default)(e.dataTransfer.items), _this.uploadFiles, accept);
        } else {
          var files = (0, _toConsumableArray2.default)(e.dataTransfer.files).filter(accept);

          _this.uploadFiles(files);
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "uploadFiles", function (files) {
      var postFiles = (0, _toConsumableArray2.default)(files);
      postFiles.forEach(function (file) {
        var fileWithId = Object.assign(file, {
          uid: getUid()
        });

        _this.upload(fileWithId, postFiles);
      });
    });
    return _this;
  }

  (0, _createClass2.default)(Uploader, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.uploaderMounted = true;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.uploaderMounted = false;
      this.files = {};
      this.abort();
    }
  }, {
    key: "upload",
    value: function upload(file, fileList) {
      var _this2 = this;

      var beforeUpload = this.props.beforeUpload;

      if (!beforeUpload) {
        // always async in case use react state to keep fileList
        return setTimeout(function () {
          return _this2.post(file);
        }, 0);
      }

      var before = beforeUpload(file, fileList);

      if (before && before.then) {
        before.then(function (processedFile) {
          var processedFileType = Object.prototype.toString.call(processedFile);

          if (processedFileType === '[object File]' || processedFileType === '[object Blob]') {
            return _this2.post(processedFile);
          }

          return _this2.post(file);
        }).catch(function (e) {
          (0, _warning.default)(false, e);
        });
      } else if (before !== false) {
        setTimeout(function () {
          return _this2.post(file);
        }, 0);
      }

      return true;
    }
  }, {
    key: "post",
    value: function post(file) {
      var _this3 = this;

      if (!this.uploaderMounted) return;
      var _this$props2 = this.props,
          data = _this$props2.data,
          onStart = _this$props2.onStart,
          onProgress = _this$props2.onProgress,
          _onSuccess = _this$props2.onSuccess,
          _onError = _this$props2.onError,
          action = _this$props2.action,
          customRequest = _this$props2.customRequest,
          name = _this$props2.name,
          headers = _this$props2.headers,
          withCredentials = _this$props2.withCredentials;
      var currentData = data;

      if (typeof currentData === 'function') {
        currentData = currentData(file);
      }

      new Promise(function (resolve) {
        if (typeof action === 'function') {
          return resolve(action(file));
        }

        return resolve(action);
      }).then(function (currentAction) {
        var uid = file.uid;
        var request = customRequest || _request.default;
        _this3.files[uid] = file;
        _this3.reqs[uid] = request({
          file: file,
          headers: headers,
          withCredentials: withCredentials,
          action: currentAction,
          filename: name,
          data: currentData,
          onProgress: onProgress ? function (e) {
            onProgress(e, file);
          } : null,
          onSuccess: function onSuccess(res, xhr) {
            delete _this3.files[uid];
            delete _this3.reqs[uid];

            _onSuccess(res, file, xhr);
          },
          onError: function onError(err, res) {
            delete _this3.reqs[uid];

            _onError(err, res, file);
          }
        });
        onStart(file);
      });
    }
  }, {
    key: "reset",
    value: function reset() {
      this.setState({
        uid: getUid()
      });
    }
  }, {
    key: "resend",
    value: function resend(fileId) {
      var propsAccept = this.props.accept;

      var accept = function accept(_file) {
        return (0, _attrAccept.default)(_file, propsAccept);
      };

      var file = this.files[fileId];

      if (file && accept(file)) {
        this.upload(file, [file]);
      }
    }
  }, {
    key: "abort",
    value: function abort(fileId) {
      var reqs = this.reqs;

      if (fileId) {
        if (reqs[fileId]) {
          reqs[fileId].abort();
          delete reqs[fileId];
        }
      } else {
        Object.keys(reqs).forEach(function (uid) {
          if (reqs[uid]) {
            reqs[uid].abort();
          }

          delete reqs[uid];
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var _this$props3 = this.props,
          className = _this$props3.className,
          disabled = _this$props3.disabled,
          style = _this$props3.style,
          multiple = _this$props3.multiple,
          accept = _this$props3.accept,
          children = _this$props3.children,
          directory = _this$props3.directory;
      var _this$state = this.state,
          isDragging = _this$state.isDragging,
          uid = _this$state.uid;
      var events = disabled ? {} : {
        onClick: this.onClick,
        onKeyDown: this.onKeyDown,
        onDrop: this.onFileDrop,
        onDragOver: this.onFileDrop,
        onDragLeave: this.onFileDrop
      };
      return _react.default.createElement("span", (0, _extends2.default)({}, events, {
        className: (0, _classnames.default)('upload', {
          'upload-dragover': isDragging,
          'upload-disabled': disabled,
          className: className
        }),
        role: "button",
        style: style
      }), _react.default.createElement("input", {
        type: "file",
        ref: function ref(n) {
          _this4.fileInput = n;
        },
        key: uid,
        style: {
          display: 'none'
        },
        accept: accept,
        directory: directory ? 'directory' : null,
        webkitdirectory: directory ? 'webkitdirectory' : null,
        multiple: multiple,
        onChange: this.onChange
      }), children);
    }
  }]);
  return Uploader;
}(_react.Component);

(0, _defineProperty2.default)(Uploader, "propTypes", {
  name: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  action: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),
  directory: _propTypes.default.bool,
  onError: _propTypes.default.func,
  onSuccess: _propTypes.default.func,
  onProgress: _propTypes.default.func,
  onStart: _propTypes.default.func,
  data: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),
  headers: _propTypes.default.object,
  accept: _propTypes.default.string,
  multiple: _propTypes.default.bool,
  beforeUpload: _propTypes.default.func,
  customRequest: _propTypes.default.func,
  children: _propTypes.default.node,
  withCredentials: _propTypes.default.bool,
  style: _propTypes.default.object,
  className: _propTypes.default.string
});
(0, _defineProperty2.default)(Uploader, "defaultProps", {
  data: {},
  headers: {},
  name: 'file',
  onStart: _noop2.default,
  onError: _noop2.default,
  onSuccess: _noop2.default,
  multiple: false,
  beforeUpload: null,
  customRequest: null,
  withCredentials: false
});
var _default = Uploader;
exports.default = _default;