"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var colorsys = {};
var RGB_MAX = 255;
var HUE_MAX = 360;
var SV_MAX = 100;

colorsys.rgb2Hsl = function rgb2Hsl(r, g, b) {
  /* eslint-disable prefer-destructuring, no-param-reassign */
  if ((0, _typeof2.default)(r) === 'object') {
    var args = r;
    r = args.r;
    g = args.g;
    b = args.b;
  } // It converts [0,255] format, to [0,1]


  r = r === RGB_MAX ? 1 : r % RGB_MAX / parseFloat(RGB_MAX);
  g = g === RGB_MAX ? 1 : g % RGB_MAX / parseFloat(RGB_MAX);
  b = b === RGB_MAX ? 1 : b % RGB_MAX / parseFloat(RGB_MAX);
  var max = Math.max(r, g, b);
  var min = Math.min(r, g, b);
  var h;
  var s;
  var l = (max + min) / 2;

  if (max === min) {
    h = 0;
    s = 0;
  } else {
    var d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;

      case g:
        h = (b - r) / d + 2;
        break;

      case b:
        h = (r - g) / d + 4;
        break;

      default:
        break;
    }

    h /= 6;
  }

  return {
    h: Math.round(h * HUE_MAX),
    s: Math.round(s * SV_MAX),
    l: Math.round(l * SV_MAX)
  };
};

colorsys.hex2Rgb = function hex2Rgb(hex) {
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16)
  } : null;
};

colorsys.parseCSS = function parseCSS(cssString) {
  if (cssString.indexOf('#') > -1) {
    return colorsys.hex2Rgb(cssString);
  }

  var prefix = cssString.split('(')[0];
  var args = cssString.split('(')[1].split(')')[0].split(','); // Use the prefix as an array [r, g, b, a] to parse the colours

  return prefix.split('').reduce(function (color, param, idx) {
    var nextColor = color;
    nextColor[param] = parseFloat(args[idx]);
    return nextColor;
  }, {});
};

var _default = colorsys;
exports.default = _default;