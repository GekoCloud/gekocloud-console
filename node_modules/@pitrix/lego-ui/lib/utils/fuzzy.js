"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Examples:
// const list = [
//   { rompalu: 'baconing', zibbity: 'simba' },
//   { rompalu: 'narwhal', zibbity: 'mufasa' },
//   { rompalu: 'a mighty bear canoe', zibbity: 'saddam hussein' },
// ];
// const options = {
//   pre: '<',
//   post: '>',
//   extract(el) {
//     return el.rompalu;
//   },
// };
// const results = fuzzy.filter('bcn', list, options);
// const matches = results.map(el => el.string);
// console.log(matches);
// [ '<b>a<c>o<n>ing', 'a mighty <b>ear <c>a<n>oe' ]

/* eslint-disable no-param-reassign */
var fuzzy = {
  simpleFilter: function simpleFilter(pattern, array) {
    return array.filter(function (str) {
      return fuzzy.test(pattern, str);
    });
  },
  test: function test(pattern, str) {
    return fuzzy.match(pattern, str) !== null;
  },
  match: function match(pattern, str) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var patternIdx = 0;
    var result = [];
    var len = str.length;
    var totalScore = 0;
    var currScore = 0;
    var pre = opts.pre || '';
    var post = opts.post || '';
    var compareString = opts.caseSensitive && str || str.toLowerCase();
    var ch;
    pattern = opts.caseSensitive && pattern || pattern.toLowerCase();

    for (var idx = 0; idx < len; idx += 1) {
      ch = str[idx];

      if (compareString[idx] === pattern[patternIdx]) {
        ch = pre + ch + post;
        patternIdx += 1;
        currScore += 1 + currScore;
      } else {
        currScore = 0;
      }

      totalScore += currScore;
      result[result.length] = ch;
    }

    if (patternIdx === pattern.length) {
      totalScore = compareString === pattern ? Infinity : totalScore;
      return {
        rendered: result.join(''),
        score: totalScore
      };
    }

    return null;
  },
  filter: function filter(pattern, arr) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    if (!arr || arr.length === 0) {
      return [];
    }

    if (typeof pattern !== 'string') {
      return arr;
    }

    return arr.reduce(function (prev, element, idx) {
      var str = element;

      if (opts.extract) {
        str = opts.extract(element);
      }

      var rendered = fuzzy.match(pattern, str, opts);

      if (rendered != null) {
        prev[prev.length] = {
          string: rendered.rendered,
          score: rendered.score,
          index: idx,
          original: element
        };
      }

      return prev;
    }, []).sort(function (a, b) {
      var compare = b.score - a.score;
      if (compare) return compare;
      return a.index - b.index;
    });
  }
};
var _default = fuzzy;
exports.default = _default;